#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 7a54403d7ec9d1a015d2313d09b6b6aa
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer globalConstants
; {
;
;   struct globalConstants
;   {
;
;       column_major float4x4 gViewToClip;            ; Offset:    0
;       column_major float4x4 gViewToWorld;           ; Offset:   64
;       float4 gFrustum;                              ; Offset:  128
;       float4 gHitDistParams;                        ; Offset:  144
;       float4 gViewVectorWorld;                      ; Offset:  160
;       float4 gViewVectorWorldPrev;                  ; Offset:  176
;       float3 gMvScale;                              ; Offset:  192
;       float gDebug;                                 ; Offset:  204
;       float2 gInvScreenSize;                        ; Offset:  208
;       float2 gScreenSize;                           ; Offset:  216
;       float2 gInvRectSize;                          ; Offset:  224
;       float2 gRectSize;                             ; Offset:  232
;       float2 gRectSizePrev;                         ; Offset:  240
;       float2 gResolutionScale;                      ; Offset:  248
;       float2 gRectOffset;                           ; Offset:  256
;       float2 gSensitivityToDarkness;                ; Offset:  264
;       uint2 gRectOrigin;                            ; Offset:  272
;       float gNonReferenceAccumulation;              ; Offset:  280
;       float gOrthoMode;                             ; Offset:  284
;       float gUnproject;                             ; Offset:  288
;       float gDenoisingRange;                        ; Offset:  292
;       float gPlaneDistSensitivity;                  ; Offset:  296
;       float gFramerateScale;                        ; Offset:  300
;       float gBlurRadius;                            ; Offset:  304
;       float gMaxAccumulatedFrameNum;                ; Offset:  308
;       float gMaxFastAccumulatedFrameNum;            ; Offset:  312
;       float gAntiFirefly;                           ; Offset:  316
;       float gLobeAngleFraction;                     ; Offset:  320
;       float gRoughnessFraction;                     ; Offset:  324
;       float gResponsiveAccumulationRoughnessThreshold;; Offset:  328
;       float gDiffPrepassBlurRadius;                 ; Offset:  332
;       float gSpecPrepassBlurRadius;                 ; Offset:  336
;       float gHistoryFixFrameNum;                    ; Offset:  340
;       float gMinRectDimMulUnproject;                ; Offset:  344
;       uint gIsWorldSpaceMotionEnabled;              ; Offset:  348
;       uint gFrameIndex;                             ; Offset:  352
;       uint gDiffMaterialMask;                       ; Offset:  356
;       uint gSpecMaterialMask;                       ; Offset:  360
;       uint gResetHistory;                           ; Offset:  364
;       float4 gRotator;                              ; Offset:  368
;   
;   } globalConstants;                                ; Offset:    0 Size:   384
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; globalConstants                   cbuffer      NA          NA     CB0            cb0     1
; gNearestClamp                     sampler      NA          NA      S0             s0     1
; gIn_Normal_Roughness              texture     f32          2d      T0             t0     1
; gIn_Data1                         texture     f32          2d      T1             t1     1
; gIn_Diff                          texture     f32          2d      T2             t2     1
; gIn_ViewZ                         texture     f32          2d      T3             t3     1
; gIn_DiffSh                        texture     f32          2d      T4             t4     1
; gOut_Normal_Roughness                 UAV     f32          2d      U0             u0     1
; gOut_Diff                             UAV     f32          2d      U1             u1     1
; gOut_InternalData                     UAV     u32          2d      U2             u2     1
; gOut_DiffSh                           UAV     f32          2d      U3             u3     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%globalConstants = type { %class.matrix.float.4.4, %class.matrix.float.4.4, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, <4 x float> }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %12 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %13 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %14 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %15 = sitofp i32 %12 to float
  %16 = sitofp i32 %13 to float
  %17 = fadd fast float %15, 5.000000e-01
  %18 = fadd fast float %16, 5.000000e-01
  %19 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.f32 %19, 0
  %21 = extractvalue %dx.types.CBufRet.f32 %19, 1
  %22 = fmul fast float %20, %17
  %23 = fmul fast float %21, %18
  %24 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %6, i32 0, i32 %12, i32 %13, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %25 = extractvalue %dx.types.ResRet.f32 %24, 0
  %26 = fmul fast float %25, 8.000000e+00
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %29 = fcmp fast ogt float %26, %28
  br i1 %29, label %30, label %31, !dx.controlflow.hints !25

; <label>:30                                      ; preds = %0
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %4, i32 %12, i32 %13, i32 undef, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3F70101020000000, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1074

; <label>:31                                      ; preds = %0
  %32 = extractvalue %dx.types.CBufRet.i32 %14, 1
  %33 = add i32 %32, %13
  %34 = extractvalue %dx.types.CBufRet.i32 %14, 0
  %35 = add i32 %34, %12
  %36 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %9, i32 0, i32 %35, i32 %33, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %37 = extractvalue %dx.types.ResRet.f32 %36, 0
  %38 = extractvalue %dx.types.ResRet.f32 %36, 1
  %39 = extractvalue %dx.types.ResRet.f32 %36, 2
  %40 = extractvalue %dx.types.ResRet.f32 %36, 3
  %41 = fmul fast float %37, 2.000000e+00
  %42 = fmul fast float %38, 2.000000e+00
  %43 = fadd fast float %41, -1.000000e+00
  %44 = fadd fast float %42, -1.000000e+00
  %45 = call float @dx.op.unary.f32(i32 6, float %43)  ; FAbs(value)
  %46 = fsub fast float 1.000000e+00, %45
  %47 = call float @dx.op.unary.f32(i32 6, float %44)  ; FAbs(value)
  %48 = fsub fast float %46, %47
  %49 = fsub fast float -0.000000e+00, %48
  %50 = call float @dx.op.unary.f32(i32 7, float %49)  ; Saturate(value)
  %51 = fcmp fast olt float %43, 0.000000e+00
  %52 = fcmp fast olt float %44, 0.000000e+00
  %53 = select i1 %51, float -1.000000e+00, float 1.000000e+00
  %54 = select i1 %52, float -1.000000e+00, float 1.000000e+00
  %55 = fmul fast float %53, %50
  %56 = fmul fast float %54, %50
  %57 = fsub fast float %43, %55
  %58 = fsub fast float %44, %56
  %59 = call float @dx.op.dot3.f32(i32 55, float %57, float %58, float %48, float %57, float %58, float %48)  ; Dot3(ax,ay,az,bx,by,bz)
  %60 = call float @dx.op.unary.f32(i32 25, float %59)  ; Rsqrt(value)
  %61 = fmul fast float %57, %60
  %62 = fmul fast float %58, %60
  %63 = fmul fast float %60, %48
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %76 = fmul fast float %61, %65
  %77 = call float @dx.op.tertiary.f32(i32 46, float %66, float %62, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %67, float %63, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %69, %61
  %80 = call float @dx.op.tertiary.f32(i32 46, float %70, float %62, float %79)  ; FMad(a,b,c)
  %81 = call float @dx.op.tertiary.f32(i32 46, float %71, float %63, float %80)  ; FMad(a,b,c)
  %82 = fmul fast float %73, %61
  %83 = call float @dx.op.tertiary.f32(i32 46, float %74, float %62, float %82)  ; FMad(a,b,c)
  %84 = call float @dx.op.tertiary.f32(i32 46, float %75, float %63, float %83)  ; FMad(a,b,c)
  %85 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %8, i32 0, i32 %12, i32 %13, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %86 = extractvalue %dx.types.ResRet.f32 %85, 0
  %87 = extractvalue %dx.types.ResRet.f32 %85, 1
  %88 = extractvalue %dx.types.ResRet.f32 %85, 2
  %89 = fmul fast float %86, 6.300000e+01
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = fmul fast float %95, %22
  %98 = fmul fast float %96, %23
  %99 = fadd fast float %97, %93
  %100 = fadd fast float %98, %94
  %101 = call float @dx.op.unary.f32(i32 6, float %91)  ; FAbs(value)
  %102 = fsub fast float 1.000000e+00, %101
  %103 = fmul fast float %102, %26
  %104 = fadd fast float %103, %91
  %105 = fmul fast float %104, %99
  %106 = fmul fast float %104, %100
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = extractvalue %dx.types.CBufRet.f32 %107, 3
  %112 = fcmp fast oeq float %91, 0.000000e+00
  %113 = fsub fast float -0.000000e+00, %105
  %114 = fsub fast float -0.000000e+00, %106
  %115 = fsub fast float -0.000000e+00, %26
  %116 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %117 = call float @dx.op.unary.f32(i32 25, float %116)  ; Rsqrt(value)
  %118 = fmul fast float %117, %113
  %119 = fmul fast float %117, %114
  %120 = fmul fast float %117, %115
  %121 = select i1 %112, float %118, float 0.000000e+00
  %122 = select i1 %112, float %119, float 0.000000e+00
  %123 = select i1 %112, float %120, float -1.000000e+00
  %124 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %121, float %122, float %123)  ; Dot3(ax,ay,az,bx,by,bz)
  %125 = call float @dx.op.unary.f32(i32 6, float %124)  ; FAbs(value)
  %126 = fmul fast float %61, 5.000000e-01
  %127 = fmul fast float %62, 5.000000e-01
  %128 = fmul fast float %63, 5.000000e-01
  %129 = fadd fast float %126, 5.000000e-01
  %130 = fadd fast float %127, 5.000000e-01
  %131 = fadd fast float %128, 5.000000e-01
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %4, i32 %12, i32 %13, i32 undef, float %129, float %130, float %131, float %39, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %132 = fadd fast float %86, 0x3F90410420000000
  %133 = fadd fast float %88, 0x3F90410420000000
  %134 = call float @dx.op.unary.f32(i32 7, float %132)  ; Saturate(value)
  %135 = call float @dx.op.unary.f32(i32 7, float %133)  ; Saturate(value)
  %136 = call float @dx.op.unary.f32(i32 7, float %40)  ; Saturate(value)
  %137 = fmul fast float %134, 1.270000e+02
  %138 = fmul fast float %135, 1.270000e+02
  %139 = fmul fast float %136, 3.000000e+00
  %140 = fadd fast float %137, 5.000000e-01
  %141 = fadd fast float %138, 5.000000e-01
  %142 = fadd fast float %139, 5.000000e-01
  %143 = fptoui float %140 to i32
  %144 = fptoui float %141 to i32
  %145 = fptoui float %142 to i32
  %146 = shl i32 %144, 7
  %147 = shl i32 %145, 14
  %148 = or i32 %146, %143
  %149 = or i32 %148, %147
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %2, i32 %12, i32 %13, i32 undef, i32 %149, i32 %149, i32 %149, i32 %149, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %150 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %7, i32 0, i32 %12, i32 %13, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %151 = extractvalue %dx.types.ResRet.f32 %150, 0
  %152 = extractvalue %dx.types.ResRet.f32 %150, 1
  %153 = extractvalue %dx.types.ResRet.f32 %150, 2
  %154 = extractvalue %dx.types.ResRet.f32 %150, 3
  %155 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %5, i32 0, i32 %12, i32 %13, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %156 = extractvalue %dx.types.ResRet.f32 %155, 0
  %157 = extractvalue %dx.types.ResRet.f32 %155, 1
  %158 = extractvalue %dx.types.ResRet.f32 %155, 2
  %159 = extractvalue %dx.types.ResRet.f32 %155, 3
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = fmul fast float %161, 5.000000e-01
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %165 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %166 = extractvalue %dx.types.CBufRet.f32 %163, 2
  %167 = extractvalue %dx.types.CBufRet.f32 %163, 3
  %168 = call float @dx.op.unary.f32(i32 6, float %26)  ; FAbs(value)
  %169 = fmul fast float %168, %165
  %170 = fadd fast float %169, %164
  %171 = call float @dx.op.unary.f32(i32 21, float %167)  ; Exp(value)
  %172 = call float @dx.op.unary.f32(i32 7, float %171)  ; Saturate(value)
  %173 = fadd fast float %166, -1.000000e+00
  %174 = fmul fast float %172, %173
  %175 = fadd fast float %174, 1.000000e+00
  %176 = fmul fast float %170, %154
  %177 = fmul fast float %176, %175
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 3
  %180 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %181 = extractvalue %dx.types.CBufRet.f32 %180, 2
  %182 = call float @dx.op.unary.f32(i32 6, float %179)  ; FAbs(value)
  %183 = fsub fast float 1.000000e+00, %26
  %184 = fmul fast float %182, %183
  %185 = fadd fast float %184, %26
  %186 = fmul fast float %185, %181
  %187 = fdiv fast float %177, %186
  %188 = call float @dx.op.unary.f32(i32 7, float %187)  ; Saturate(value)
  %189 = fsub fast float 1.000000e+00, %188
  %190 = fmul fast float %189, %87
  %191 = fadd fast float %190, %188
  %192 = extractvalue %dx.types.CBufRet.f32 %180, 1
  %193 = fmul fast float %192, 0x3FE5555560000000
  %194 = fadd fast float %193, 0x3EB0C6F7A0000000
  %195 = fmul fast float %192, 0x3FF5555560000000
  %196 = fadd fast float %195, 0x3EC0C6F7A0000000
  %197 = fsub fast float %89, %194
  %198 = fsub fast float %196, %194
  %199 = fdiv fast float %197, %198
  %200 = call float @dx.op.unary.f32(i32 7, float %199)  ; Saturate(value)
  %201 = fsub fast float 1.000000e+00, %200
  %202 = fsub fast float 1.000000e+00, %125
  %203 = call float @dx.op.unary.f32(i32 7, float %202)  ; Saturate(value)
  %204 = call float @dx.op.unary.f32(i32 23, float %203)  ; Log(value)
  %205 = fmul fast float %204, 5.000000e+00
  %206 = call float @dx.op.unary.f32(i32 21, float %205)  ; Exp(value)
  %207 = fsub fast float 1.000000e+00, %206
  %208 = fmul fast float %207, %201
  %209 = fsub fast float 1.000000e+00, %208
  %210 = fmul fast float %209, %89
  %211 = fadd fast float %210, 1.000000e+00
  %212 = fdiv fast float 1.000000e+00, %211
  %213 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %214 = extractvalue %dx.types.CBufRet.f32 %213, 0
  %215 = fmul fast float %208, 2.000000e+00
  %216 = fadd fast float %215, 1.000000e+00
  %217 = fmul fast float %191, 0x3FD5555560000000
  %218 = fmul fast float %217, %214
  %219 = fmul fast float %218, %216
  %220 = fadd fast float %219, 1.000000e+00
  %221 = fcmp fast une float %214, 0.000000e+00
  %222 = uitofp i1 %221 to float
  %223 = fmul fast float %222, 2.000000e+00
  %224 = fmul fast float %223, %220
  %225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %226 = extractvalue %dx.types.CBufRet.f32 %225, 2
  %227 = fmul fast float %212, 7.500000e-01
  %228 = fsub fast float 1.000000e+00, %227
  %229 = fmul fast float %226, %186
  %230 = fdiv fast float %228, %229
  %231 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %105, float %106, float %26)  ; Dot3(ax,ay,az,bx,by,bz)
  %232 = call float @dx.op.unary.f32(i32 7, float %162)  ; Saturate(value)
  %233 = fsub fast float 1.000000e+00, %232
  %234 = fmul fast float %233, %212
  %235 = fadd fast float %234, %232
  %236 = fmul fast float %235, 0x3FF3FC1760000000
  %237 = call float @dx.op.binary.f32(i32 35, float %236, float 0x3F80101020000000)  ; FMax(a,b)
  %238 = call float @dx.op.binary.f32(i32 36, float %212, float 1.000000e+00)  ; FMin(a,b)
  %239 = fmul fast float %238, 0x3FEFFFFDE0000000
  %240 = fadd fast float %239, 0x3EB0C6F7A0000000
  %241 = fdiv fast float 1.000000e+00, %240
  %242 = fmul fast float %108, 0x3FEBB67AE0000000
  %243 = fmul fast float %110, 0x3FEBB67AE0000000
  %244 = fmul fast float %109, -5.000000e-01
  %245 = fmul fast float %111, -5.000000e-01
  %246 = fsub fast float %244, %242
  %247 = fsub fast float %245, %243
  %248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.f32 %248, 0
  %250 = extractvalue %dx.types.CBufRet.f32 %248, 1
  %251 = fmul fast float %224, %246
  %252 = fmul fast float %251, %249
  %253 = fmul fast float %224, %247
  %254 = fmul fast float %253, %250
  %255 = fadd fast float %252, %22
  %256 = fadd fast float %254, %23
  %257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %258 = extractvalue %dx.types.CBufRet.f32 %257, 2
  %259 = extractvalue %dx.types.CBufRet.f32 %257, 3
  %260 = fmul fast float %255, %258
  %261 = fmul fast float %256, %259
  %262 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %6, %dx.types.Handle %10, float %260, float %261, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %263 = extractvalue %dx.types.ResRet.f32 %262, 0
  %264 = fmul fast float %263, 8.000000e+00
  %265 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7, %dx.types.Handle %10, float %260, float %261, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %266 = extractvalue %dx.types.ResRet.f32 %265, 0
  %267 = extractvalue %dx.types.ResRet.f32 %265, 1
  %268 = extractvalue %dx.types.ResRet.f32 %265, 2
  %269 = extractvalue %dx.types.ResRet.f32 %265, 3
  %270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %271 = extractvalue %dx.types.CBufRet.f32 %270, 0
  %272 = extractvalue %dx.types.CBufRet.f32 %270, 1
  %273 = extractvalue %dx.types.CBufRet.f32 %270, 2
  %274 = extractvalue %dx.types.CBufRet.f32 %270, 3
  %275 = fmul fast float %273, %255
  %276 = fmul fast float %274, %256
  %277 = fadd fast float %275, %271
  %278 = fadd fast float %276, %272
  %279 = fsub fast float 1.000000e+00, %182
  %280 = fmul fast float %279, %264
  %281 = fadd fast float %280, %179
  %282 = fmul fast float %281, %277
  %283 = fmul fast float %281, %278
  %284 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %285 = extractvalue %dx.types.CBufRet.f32 %284, 0
  %286 = extractvalue %dx.types.CBufRet.f32 %284, 1
  %287 = fadd fast float %285, %260
  %288 = fadd fast float %286, %261
  %289 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %10, float %287, float %288, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %290 = extractvalue %dx.types.ResRet.f32 %289, 0
  %291 = extractvalue %dx.types.ResRet.f32 %289, 1
  %292 = extractvalue %dx.types.ResRet.f32 %289, 3
  %293 = fmul fast float %290, 2.000000e+00
  %294 = fmul fast float %291, 2.000000e+00
  %295 = fadd fast float %293, -1.000000e+00
  %296 = fadd fast float %294, -1.000000e+00
  %297 = call float @dx.op.unary.f32(i32 6, float %295)  ; FAbs(value)
  %298 = fsub fast float 1.000000e+00, %297
  %299 = call float @dx.op.unary.f32(i32 6, float %296)  ; FAbs(value)
  %300 = fsub fast float %298, %299
  %301 = fsub fast float -0.000000e+00, %300
  %302 = call float @dx.op.unary.f32(i32 7, float %301)  ; Saturate(value)
  %303 = fcmp fast olt float %295, 0.000000e+00
  %304 = fcmp fast olt float %296, 0.000000e+00
  %305 = select i1 %303, float -1.000000e+00, float 1.000000e+00
  %306 = select i1 %304, float -1.000000e+00, float 1.000000e+00
  %307 = fmul fast float %305, %302
  %308 = fmul fast float %306, %302
  %309 = fsub fast float %295, %307
  %310 = fsub fast float %296, %308
  %311 = call float @dx.op.dot3.f32(i32 55, float %309, float %310, float %300, float %309, float %310, float %300)  ; Dot3(ax,ay,az,bx,by,bz)
  %312 = call float @dx.op.unary.f32(i32 25, float %311)  ; Rsqrt(value)
  %313 = fmul fast float %309, %312
  %314 = fmul fast float %310, %312
  %315 = fmul fast float %312, %300
  %316 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.i32 %316, 1
  %318 = icmp eq i32 %317, 0
  %319 = fcmp fast oeq float %40, %292
  %320 = uitofp i1 %319 to float
  %321 = fmul fast float %320, 0x3FE08A0BC0000000
  %322 = select i1 %318, float 0x3FE08A0BC0000000, float %321
  %323 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %282, float %283, float %264)  ; Dot3(ax,ay,az,bx,by,bz)
  %324 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %313, float %314, float %315)  ; Dot3(ax,ay,az,bx,by,bz)
  %325 = call float @dx.op.unary.f32(i32 7, float %324)  ; Saturate(value)
  %326 = fsub fast float 1.000000e+00, %325
  %327 = call float @dx.op.unary.f32(i32 7, float %326)  ; Saturate(value)
  %328 = call float @dx.op.unary.f32(i32 24, float %327)  ; Sqrt(value)
  %329 = fdiv fast float 0x3FF6A09E60000000, %237
  %330 = fmul fast float %329, %328
  %331 = fsub fast float %323, %231
  %332 = fmul fast float %331, %230
  %333 = call float @dx.op.unary.f32(i32 6, float %332)  ; FAbs(value)
  %334 = call float @dx.op.unary.f32(i32 6, float %330)  ; FAbs(value)
  %335 = fadd fast float %333, 0xBFEFF7CEE0000000
  %336 = fadd fast float %334, 0xBFEFF7CEE0000000
  %337 = fmul fast float %335, 0xBFF0083560000000
  %338 = fmul fast float %336, 0xBFF0083560000000
  %339 = call float @dx.op.unary.f32(i32 7, float %337)  ; Saturate(value)
  %340 = call float @dx.op.unary.f32(i32 7, float %338)  ; Saturate(value)
  %341 = fmul fast float %339, 2.000000e+00
  %342 = fmul fast float %340, 2.000000e+00
  %343 = fsub fast float 3.000000e+00, %341
  %344 = fsub fast float 3.000000e+00, %342
  %345 = fsub fast float %269, %154
  %346 = fmul fast float %345, %241
  %347 = call float @dx.op.unary.f32(i32 6, float %346)  ; FAbs(value)
  %348 = fmul fast float %347, %347
  %349 = fmul fast float %348, 9.000000e+00
  %350 = fmul fast float %347, 3.000000e+00
  %351 = fadd fast float %350, 1.000000e+00
  %352 = fadd fast float %351, %349
  %353 = fdiv fast float 0x3FEE666660000000, %352
  %354 = fadd fast float %353, 0x3FA99999A0000000
  %355 = fmul float %339, %340
  %356 = fmul float %355, %355
  %357 = fmul fast float %343, %322
  %358 = fmul fast float %357, %344
  %359 = fmul fast float %358, %356
  %360 = fmul fast float %359, %354
  %361 = call float @dx.op.unary.f32(i32 7, float %255)  ; Saturate(value)
  %362 = call float @dx.op.unary.f32(i32 7, float %256)  ; Saturate(value)
  %363 = fcmp fast oeq float %361, %255
  %364 = fcmp fast oeq float %362, %256
  %365 = and i1 %363, %364
  %366 = select i1 %365, float %360, float 0.000000e+00
  %367 = fcmp fast une float %366, 0.000000e+00
  %368 = select i1 %367, float %266, float 0.000000e+00
  %369 = select i1 %367, float %267, float 0.000000e+00
  %370 = select i1 %367, float %268, float 0.000000e+00
  %371 = select i1 %367, float %269, float 0.000000e+00
  %372 = fadd fast float %366, 1.000000e+00
  %373 = fmul fast float %368, %366
  %374 = fmul fast float %369, %366
  %375 = fmul fast float %370, %366
  %376 = fmul fast float %371, %366
  %377 = fadd fast float %373, %151
  %378 = fadd fast float %374, %152
  %379 = fadd fast float %375, %153
  %380 = fadd fast float %376, %154
  %381 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %10, float %260, float %261, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %382 = extractvalue %dx.types.ResRet.f32 %381, 0
  %383 = extractvalue %dx.types.ResRet.f32 %381, 1
  %384 = extractvalue %dx.types.ResRet.f32 %381, 2
  %385 = extractvalue %dx.types.ResRet.f32 %381, 3
  %386 = fmul fast float %382, %366
  %387 = fmul fast float %383, %366
  %388 = fmul fast float %384, %366
  %389 = fmul fast float %385, %366
  %390 = fadd fast float %386, %156
  %391 = fadd fast float %387, %157
  %392 = fadd fast float %388, %158
  %393 = fadd fast float %389, %159
  %394 = fmul fast float %224, %109
  %395 = fmul fast float %394, %249
  %396 = fmul fast float %224, %111
  %397 = fmul fast float %396, %250
  %398 = fadd fast float %395, %22
  %399 = fadd fast float %397, %23
  %400 = fmul fast float %398, %258
  %401 = fmul fast float %399, %259
  %402 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %6, %dx.types.Handle %10, float %400, float %401, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %403 = extractvalue %dx.types.ResRet.f32 %402, 0
  %404 = fmul fast float %403, 8.000000e+00
  %405 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7, %dx.types.Handle %10, float %400, float %401, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %406 = extractvalue %dx.types.ResRet.f32 %405, 0
  %407 = extractvalue %dx.types.ResRet.f32 %405, 1
  %408 = extractvalue %dx.types.ResRet.f32 %405, 2
  %409 = extractvalue %dx.types.ResRet.f32 %405, 3
  %410 = fmul fast float %273, %398
  %411 = fmul fast float %274, %399
  %412 = fadd fast float %410, %271
  %413 = fadd fast float %411, %272
  %414 = fmul fast float %279, %404
  %415 = fadd fast float %414, %179
  %416 = fmul fast float %415, %412
  %417 = fmul fast float %415, %413
  %418 = fadd fast float %285, %400
  %419 = fadd fast float %286, %401
  %420 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %10, float %418, float %419, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %421 = extractvalue %dx.types.ResRet.f32 %420, 0
  %422 = extractvalue %dx.types.ResRet.f32 %420, 1
  %423 = extractvalue %dx.types.ResRet.f32 %420, 3
  %424 = fmul fast float %421, 2.000000e+00
  %425 = fmul fast float %422, 2.000000e+00
  %426 = fadd fast float %424, -1.000000e+00
  %427 = fadd fast float %425, -1.000000e+00
  %428 = call float @dx.op.unary.f32(i32 6, float %426)  ; FAbs(value)
  %429 = fsub fast float 1.000000e+00, %428
  %430 = call float @dx.op.unary.f32(i32 6, float %427)  ; FAbs(value)
  %431 = fsub fast float %429, %430
  %432 = fsub fast float -0.000000e+00, %431
  %433 = call float @dx.op.unary.f32(i32 7, float %432)  ; Saturate(value)
  %434 = fcmp fast olt float %426, 0.000000e+00
  %435 = fcmp fast olt float %427, 0.000000e+00
  %436 = select i1 %434, float -1.000000e+00, float 1.000000e+00
  %437 = select i1 %435, float -1.000000e+00, float 1.000000e+00
  %438 = fmul fast float %436, %433
  %439 = fmul fast float %437, %433
  %440 = fsub fast float %426, %438
  %441 = fsub fast float %427, %439
  %442 = call float @dx.op.dot3.f32(i32 55, float %440, float %441, float %431, float %440, float %441, float %431)  ; Dot3(ax,ay,az,bx,by,bz)
  %443 = call float @dx.op.unary.f32(i32 25, float %442)  ; Rsqrt(value)
  %444 = fmul fast float %440, %443
  %445 = fmul fast float %441, %443
  %446 = fmul fast float %443, %431
  %447 = fcmp fast oeq float %40, %423
  %448 = uitofp i1 %447 to float
  %449 = fmul fast float %448, 0x3FE08A0BC0000000
  %450 = select i1 %318, float 0x3FE08A0BC0000000, float %449
  %451 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %416, float %417, float %404)  ; Dot3(ax,ay,az,bx,by,bz)
  %452 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %444, float %445, float %446)  ; Dot3(ax,ay,az,bx,by,bz)
  %453 = call float @dx.op.unary.f32(i32 7, float %452)  ; Saturate(value)
  %454 = fsub fast float 1.000000e+00, %453
  %455 = call float @dx.op.unary.f32(i32 7, float %454)  ; Saturate(value)
  %456 = call float @dx.op.unary.f32(i32 24, float %455)  ; Sqrt(value)
  %457 = fmul fast float %329, %456
  %458 = fsub fast float %451, %231
  %459 = fmul fast float %458, %230
  %460 = call float @dx.op.unary.f32(i32 6, float %459)  ; FAbs(value)
  %461 = call float @dx.op.unary.f32(i32 6, float %457)  ; FAbs(value)
  %462 = fadd fast float %460, 0xBFEFF7CEE0000000
  %463 = fadd fast float %461, 0xBFEFF7CEE0000000
  %464 = fmul fast float %462, 0xBFF0083560000000
  %465 = fmul fast float %463, 0xBFF0083560000000
  %466 = call float @dx.op.unary.f32(i32 7, float %464)  ; Saturate(value)
  %467 = call float @dx.op.unary.f32(i32 7, float %465)  ; Saturate(value)
  %468 = fmul fast float %466, 2.000000e+00
  %469 = fmul fast float %467, 2.000000e+00
  %470 = fsub fast float 3.000000e+00, %468
  %471 = fsub fast float 3.000000e+00, %469
  %472 = fsub fast float %409, %154
  %473 = fmul fast float %472, %241
  %474 = call float @dx.op.unary.f32(i32 6, float %473)  ; FAbs(value)
  %475 = fmul fast float %474, %474
  %476 = fmul fast float %475, 9.000000e+00
  %477 = fmul fast float %474, 3.000000e+00
  %478 = fadd fast float %477, 1.000000e+00
  %479 = fadd fast float %478, %476
  %480 = fdiv fast float 0x3FEE666660000000, %479
  %481 = fadd fast float %480, 0x3FA99999A0000000
  %482 = fmul float %466, %467
  %483 = fmul float %482, %482
  %484 = fmul fast float %470, %450
  %485 = fmul fast float %484, %471
  %486 = fmul fast float %485, %483
  %487 = fmul fast float %486, %481
  %488 = call float @dx.op.unary.f32(i32 7, float %398)  ; Saturate(value)
  %489 = call float @dx.op.unary.f32(i32 7, float %399)  ; Saturate(value)
  %490 = fcmp fast oeq float %488, %398
  %491 = fcmp fast oeq float %489, %399
  %492 = and i1 %490, %491
  %493 = select i1 %492, float %487, float 0.000000e+00
  %494 = fcmp fast une float %493, 0.000000e+00
  %495 = select i1 %494, float %406, float 0.000000e+00
  %496 = select i1 %494, float %407, float 0.000000e+00
  %497 = select i1 %494, float %408, float 0.000000e+00
  %498 = select i1 %494, float %409, float 0.000000e+00
  %499 = fadd fast float %372, %493
  %500 = fmul fast float %495, %493
  %501 = fmul fast float %496, %493
  %502 = fmul fast float %497, %493
  %503 = fmul fast float %498, %493
  %504 = fadd fast float %377, %500
  %505 = fadd fast float %378, %501
  %506 = fadd fast float %379, %502
  %507 = fadd fast float %380, %503
  %508 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %10, float %400, float %401, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %509 = extractvalue %dx.types.ResRet.f32 %508, 0
  %510 = extractvalue %dx.types.ResRet.f32 %508, 1
  %511 = extractvalue %dx.types.ResRet.f32 %508, 2
  %512 = extractvalue %dx.types.ResRet.f32 %508, 3
  %513 = fmul fast float %509, %493
  %514 = fmul fast float %510, %493
  %515 = fmul fast float %511, %493
  %516 = fmul fast float %512, %493
  %517 = fadd fast float %390, %513
  %518 = fadd fast float %391, %514
  %519 = fadd fast float %392, %515
  %520 = fadd fast float %393, %516
  %521 = fmul fast float %109, 5.000000e-01
  %522 = fmul fast float %111, 5.000000e-01
  %523 = fsub fast float %242, %521
  %524 = fsub fast float %243, %522
  %525 = fmul fast float %224, %523
  %526 = fmul fast float %525, %249
  %527 = fmul fast float %224, %524
  %528 = fmul fast float %527, %250
  %529 = fadd fast float %526, %22
  %530 = fadd fast float %528, %23
  %531 = fmul fast float %529, %258
  %532 = fmul fast float %530, %259
  %533 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %6, %dx.types.Handle %10, float %531, float %532, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %534 = extractvalue %dx.types.ResRet.f32 %533, 0
  %535 = fmul fast float %534, 8.000000e+00
  %536 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7, %dx.types.Handle %10, float %531, float %532, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %537 = extractvalue %dx.types.ResRet.f32 %536, 0
  %538 = extractvalue %dx.types.ResRet.f32 %536, 1
  %539 = extractvalue %dx.types.ResRet.f32 %536, 2
  %540 = extractvalue %dx.types.ResRet.f32 %536, 3
  %541 = fmul fast float %273, %529
  %542 = fmul fast float %274, %530
  %543 = fadd fast float %541, %271
  %544 = fadd fast float %542, %272
  %545 = fmul fast float %279, %535
  %546 = fadd fast float %545, %179
  %547 = fmul fast float %546, %543
  %548 = fmul fast float %546, %544
  %549 = fadd fast float %285, %531
  %550 = fadd fast float %286, %532
  %551 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %10, float %549, float %550, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %552 = extractvalue %dx.types.ResRet.f32 %551, 0
  %553 = extractvalue %dx.types.ResRet.f32 %551, 1
  %554 = extractvalue %dx.types.ResRet.f32 %551, 3
  %555 = fmul fast float %552, 2.000000e+00
  %556 = fmul fast float %553, 2.000000e+00
  %557 = fadd fast float %555, -1.000000e+00
  %558 = fadd fast float %556, -1.000000e+00
  %559 = call float @dx.op.unary.f32(i32 6, float %557)  ; FAbs(value)
  %560 = fsub fast float 1.000000e+00, %559
  %561 = call float @dx.op.unary.f32(i32 6, float %558)  ; FAbs(value)
  %562 = fsub fast float %560, %561
  %563 = fsub fast float -0.000000e+00, %562
  %564 = call float @dx.op.unary.f32(i32 7, float %563)  ; Saturate(value)
  %565 = fcmp fast olt float %557, 0.000000e+00
  %566 = fcmp fast olt float %558, 0.000000e+00
  %567 = select i1 %565, float -1.000000e+00, float 1.000000e+00
  %568 = select i1 %566, float -1.000000e+00, float 1.000000e+00
  %569 = fmul fast float %567, %564
  %570 = fmul fast float %568, %564
  %571 = fsub fast float %557, %569
  %572 = fsub fast float %558, %570
  %573 = call float @dx.op.dot3.f32(i32 55, float %571, float %572, float %562, float %571, float %572, float %562)  ; Dot3(ax,ay,az,bx,by,bz)
  %574 = call float @dx.op.unary.f32(i32 25, float %573)  ; Rsqrt(value)
  %575 = fmul fast float %571, %574
  %576 = fmul fast float %572, %574
  %577 = fmul fast float %574, %562
  %578 = fcmp fast oeq float %40, %554
  %579 = uitofp i1 %578 to float
  %580 = fmul fast float %579, 0x3FE08A0BC0000000
  %581 = select i1 %318, float 0x3FE08A0BC0000000, float %580
  %582 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %547, float %548, float %535)  ; Dot3(ax,ay,az,bx,by,bz)
  %583 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %575, float %576, float %577)  ; Dot3(ax,ay,az,bx,by,bz)
  %584 = call float @dx.op.unary.f32(i32 7, float %583)  ; Saturate(value)
  %585 = fsub fast float 1.000000e+00, %584
  %586 = call float @dx.op.unary.f32(i32 7, float %585)  ; Saturate(value)
  %587 = call float @dx.op.unary.f32(i32 24, float %586)  ; Sqrt(value)
  %588 = fmul fast float %329, %587
  %589 = fsub fast float %582, %231
  %590 = fmul fast float %589, %230
  %591 = call float @dx.op.unary.f32(i32 6, float %590)  ; FAbs(value)
  %592 = call float @dx.op.unary.f32(i32 6, float %588)  ; FAbs(value)
  %593 = fadd fast float %591, 0xBFEFF7CEE0000000
  %594 = fadd fast float %592, 0xBFEFF7CEE0000000
  %595 = fmul fast float %593, 0xBFF0083560000000
  %596 = fmul fast float %594, 0xBFF0083560000000
  %597 = call float @dx.op.unary.f32(i32 7, float %595)  ; Saturate(value)
  %598 = call float @dx.op.unary.f32(i32 7, float %596)  ; Saturate(value)
  %599 = fmul fast float %597, 2.000000e+00
  %600 = fmul fast float %598, 2.000000e+00
  %601 = fsub fast float 3.000000e+00, %599
  %602 = fsub fast float 3.000000e+00, %600
  %603 = fsub fast float %540, %154
  %604 = fmul fast float %603, %241
  %605 = call float @dx.op.unary.f32(i32 6, float %604)  ; FAbs(value)
  %606 = fmul fast float %605, %605
  %607 = fmul fast float %606, 9.000000e+00
  %608 = fmul fast float %605, 3.000000e+00
  %609 = fadd fast float %608, 1.000000e+00
  %610 = fadd fast float %609, %607
  %611 = fdiv fast float 0x3FEE666660000000, %610
  %612 = fadd fast float %611, 0x3FA99999A0000000
  %613 = fmul float %597, %598
  %614 = fmul float %613, %613
  %615 = fmul fast float %601, %581
  %616 = fmul fast float %615, %602
  %617 = fmul fast float %616, %614
  %618 = fmul fast float %617, %612
  %619 = call float @dx.op.unary.f32(i32 7, float %529)  ; Saturate(value)
  %620 = call float @dx.op.unary.f32(i32 7, float %530)  ; Saturate(value)
  %621 = fcmp fast oeq float %619, %529
  %622 = fcmp fast oeq float %620, %530
  %623 = and i1 %621, %622
  %624 = select i1 %623, float %618, float 0.000000e+00
  %625 = fcmp fast une float %624, 0.000000e+00
  %626 = select i1 %625, float %537, float 0.000000e+00
  %627 = select i1 %625, float %538, float 0.000000e+00
  %628 = select i1 %625, float %539, float 0.000000e+00
  %629 = select i1 %625, float %540, float 0.000000e+00
  %630 = fadd fast float %499, %624
  %631 = fmul fast float %626, %624
  %632 = fmul fast float %627, %624
  %633 = fmul fast float %628, %624
  %634 = fmul fast float %629, %624
  %635 = fadd fast float %504, %631
  %636 = fadd fast float %505, %632
  %637 = fadd fast float %506, %633
  %638 = fadd fast float %507, %634
  %639 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %10, float %531, float %532, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %640 = extractvalue %dx.types.ResRet.f32 %639, 0
  %641 = extractvalue %dx.types.ResRet.f32 %639, 1
  %642 = extractvalue %dx.types.ResRet.f32 %639, 2
  %643 = extractvalue %dx.types.ResRet.f32 %639, 3
  %644 = fmul fast float %640, %624
  %645 = fmul fast float %641, %624
  %646 = fmul fast float %642, %624
  %647 = fmul fast float %643, %624
  %648 = fadd fast float %517, %644
  %649 = fadd fast float %518, %645
  %650 = fadd fast float %519, %646
  %651 = fadd fast float %520, %647
  %652 = fmul fast float %109, 0xBFD3333340000000
  %653 = fmul fast float %111, 0xBFD3333340000000
  %654 = fmul fast float %652, %224
  %655 = fmul fast float %654, %249
  %656 = fmul fast float %653, %224
  %657 = fmul fast float %656, %250
  %658 = fadd fast float %655, %22
  %659 = fadd fast float %657, %23
  %660 = fmul fast float %658, %258
  %661 = fmul fast float %659, %259
  %662 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %6, %dx.types.Handle %10, float %660, float %661, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %663 = extractvalue %dx.types.ResRet.f32 %662, 0
  %664 = fmul fast float %663, 8.000000e+00
  %665 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7, %dx.types.Handle %10, float %660, float %661, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %666 = extractvalue %dx.types.ResRet.f32 %665, 0
  %667 = extractvalue %dx.types.ResRet.f32 %665, 1
  %668 = extractvalue %dx.types.ResRet.f32 %665, 2
  %669 = extractvalue %dx.types.ResRet.f32 %665, 3
  %670 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %671 = extractvalue %dx.types.CBufRet.f32 %670, 3
  %672 = fmul fast float %273, %658
  %673 = fmul fast float %274, %659
  %674 = fadd fast float %672, %271
  %675 = fadd fast float %673, %272
  %676 = call float @dx.op.unary.f32(i32 6, float %671)  ; FAbs(value)
  %677 = fsub fast float 1.000000e+00, %676
  %678 = fmul fast float %677, %664
  %679 = fadd fast float %678, %671
  %680 = fmul fast float %679, %674
  %681 = fmul fast float %679, %675
  %682 = fadd fast float %285, %660
  %683 = fadd fast float %286, %661
  %684 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %10, float %682, float %683, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %685 = extractvalue %dx.types.ResRet.f32 %684, 0
  %686 = extractvalue %dx.types.ResRet.f32 %684, 1
  %687 = extractvalue %dx.types.ResRet.f32 %684, 3
  %688 = fmul fast float %685, 2.000000e+00
  %689 = fmul fast float %686, 2.000000e+00
  %690 = fadd fast float %688, -1.000000e+00
  %691 = fadd fast float %689, -1.000000e+00
  %692 = call float @dx.op.unary.f32(i32 6, float %690)  ; FAbs(value)
  %693 = fsub fast float 1.000000e+00, %692
  %694 = call float @dx.op.unary.f32(i32 6, float %691)  ; FAbs(value)
  %695 = fsub fast float %693, %694
  %696 = fsub fast float -0.000000e+00, %695
  %697 = call float @dx.op.unary.f32(i32 7, float %696)  ; Saturate(value)
  %698 = fcmp fast olt float %690, 0.000000e+00
  %699 = fcmp fast olt float %691, 0.000000e+00
  %700 = select i1 %698, float -1.000000e+00, float 1.000000e+00
  %701 = select i1 %699, float -1.000000e+00, float 1.000000e+00
  %702 = fmul fast float %700, %697
  %703 = fmul fast float %701, %697
  %704 = fsub fast float %690, %702
  %705 = fsub fast float %691, %703
  %706 = call float @dx.op.dot3.f32(i32 55, float %704, float %705, float %695, float %704, float %705, float %695)  ; Dot3(ax,ay,az,bx,by,bz)
  %707 = call float @dx.op.unary.f32(i32 25, float %706)  ; Rsqrt(value)
  %708 = fmul fast float %704, %707
  %709 = fmul fast float %705, %707
  %710 = fmul fast float %707, %695
  %711 = fcmp fast oeq float %40, %687
  %712 = uitofp i1 %711 to float
  %713 = fmul fast float %712, 0x3FEE2790C0000000
  %714 = select i1 %318, float 0x3FEE2790C0000000, float %713
  %715 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %680, float %681, float %664)  ; Dot3(ax,ay,az,bx,by,bz)
  %716 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %708, float %709, float %710)  ; Dot3(ax,ay,az,bx,by,bz)
  %717 = call float @dx.op.unary.f32(i32 7, float %716)  ; Saturate(value)
  %718 = fsub fast float 1.000000e+00, %717
  %719 = call float @dx.op.unary.f32(i32 7, float %718)  ; Saturate(value)
  %720 = call float @dx.op.unary.f32(i32 24, float %719)  ; Sqrt(value)
  %721 = fmul fast float %329, %720
  %722 = fsub fast float %715, %231
  %723 = fmul fast float %722, %230
  %724 = call float @dx.op.unary.f32(i32 6, float %723)  ; FAbs(value)
  %725 = call float @dx.op.unary.f32(i32 6, float %721)  ; FAbs(value)
  %726 = fadd fast float %724, 0xBFEFF7CEE0000000
  %727 = fadd fast float %725, 0xBFEFF7CEE0000000
  %728 = fmul fast float %726, 0xBFF0083560000000
  %729 = fmul fast float %727, 0xBFF0083560000000
  %730 = call float @dx.op.unary.f32(i32 7, float %728)  ; Saturate(value)
  %731 = call float @dx.op.unary.f32(i32 7, float %729)  ; Saturate(value)
  %732 = fmul fast float %730, 2.000000e+00
  %733 = fmul fast float %731, 2.000000e+00
  %734 = fsub fast float 3.000000e+00, %732
  %735 = fsub fast float 3.000000e+00, %733
  %736 = fsub fast float %669, %154
  %737 = fmul fast float %736, %241
  %738 = call float @dx.op.unary.f32(i32 6, float %737)  ; FAbs(value)
  %739 = fmul fast float %738, %738
  %740 = fmul fast float %739, 9.000000e+00
  %741 = fmul fast float %738, 3.000000e+00
  %742 = fadd fast float %741, 1.000000e+00
  %743 = fadd fast float %742, %740
  %744 = fdiv fast float 0x3FEE666660000000, %743
  %745 = fadd fast float %744, 0x3FA99999A0000000
  %746 = fmul float %730, %731
  %747 = fmul float %746, %746
  %748 = fmul fast float %734, %714
  %749 = fmul fast float %748, %735
  %750 = fmul fast float %749, %747
  %751 = fmul fast float %750, %745
  %752 = call float @dx.op.unary.f32(i32 7, float %658)  ; Saturate(value)
  %753 = call float @dx.op.unary.f32(i32 7, float %659)  ; Saturate(value)
  %754 = fcmp fast oeq float %752, %658
  %755 = fcmp fast oeq float %753, %659
  %756 = and i1 %754, %755
  %757 = select i1 %756, float %751, float 0.000000e+00
  %758 = fcmp fast une float %757, 0.000000e+00
  %759 = select i1 %758, float %666, float 0.000000e+00
  %760 = select i1 %758, float %667, float 0.000000e+00
  %761 = select i1 %758, float %668, float 0.000000e+00
  %762 = select i1 %758, float %669, float 0.000000e+00
  %763 = fadd fast float %630, %757
  %764 = fmul fast float %759, %757
  %765 = fmul fast float %760, %757
  %766 = fmul fast float %761, %757
  %767 = fmul fast float %762, %757
  %768 = fadd fast float %635, %764
  %769 = fadd fast float %636, %765
  %770 = fadd fast float %637, %766
  %771 = fadd fast float %638, %767
  %772 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %10, float %660, float %661, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %773 = extractvalue %dx.types.ResRet.f32 %772, 0
  %774 = extractvalue %dx.types.ResRet.f32 %772, 1
  %775 = extractvalue %dx.types.ResRet.f32 %772, 2
  %776 = extractvalue %dx.types.ResRet.f32 %772, 3
  %777 = fmul fast float %773, %757
  %778 = fmul fast float %774, %757
  %779 = fmul fast float %775, %757
  %780 = fmul fast float %776, %757
  %781 = fadd fast float %648, %777
  %782 = fadd fast float %649, %778
  %783 = fadd fast float %650, %779
  %784 = fadd fast float %651, %780
  %785 = fmul fast float %108, 0x3FD0A0B020000000
  %786 = fmul fast float %110, 0x3FD0A0B020000000
  %787 = fmul fast float %109, 0x3FC3333340000000
  %788 = fmul fast float %111, 0x3FC3333340000000
  %789 = fadd fast float %785, %787
  %790 = fadd fast float %786, %788
  %791 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %792 = extractvalue %dx.types.CBufRet.f32 %791, 0
  %793 = extractvalue %dx.types.CBufRet.f32 %791, 1
  %794 = fmul fast float %224, %789
  %795 = fmul fast float %794, %792
  %796 = fmul fast float %224, %790
  %797 = fmul fast float %796, %793
  %798 = fadd fast float %795, %22
  %799 = fadd fast float %797, %23
  %800 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %801 = extractvalue %dx.types.CBufRet.f32 %800, 2
  %802 = extractvalue %dx.types.CBufRet.f32 %800, 3
  %803 = fmul fast float %798, %801
  %804 = fmul fast float %799, %802
  %805 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %6, %dx.types.Handle %10, float %803, float %804, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %806 = extractvalue %dx.types.ResRet.f32 %805, 0
  %807 = fmul fast float %806, 8.000000e+00
  %808 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7, %dx.types.Handle %10, float %803, float %804, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %809 = extractvalue %dx.types.ResRet.f32 %808, 0
  %810 = extractvalue %dx.types.ResRet.f32 %808, 1
  %811 = extractvalue %dx.types.ResRet.f32 %808, 2
  %812 = extractvalue %dx.types.ResRet.f32 %808, 3
  %813 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %814 = extractvalue %dx.types.CBufRet.f32 %813, 0
  %815 = extractvalue %dx.types.CBufRet.f32 %813, 1
  %816 = extractvalue %dx.types.CBufRet.f32 %813, 2
  %817 = extractvalue %dx.types.CBufRet.f32 %813, 3
  %818 = fmul fast float %816, %798
  %819 = fmul fast float %817, %799
  %820 = fadd fast float %818, %814
  %821 = fadd fast float %819, %815
  %822 = fmul fast float %677, %807
  %823 = fadd fast float %822, %671
  %824 = fmul fast float %823, %820
  %825 = fmul fast float %823, %821
  %826 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %827 = extractvalue %dx.types.CBufRet.f32 %826, 0
  %828 = extractvalue %dx.types.CBufRet.f32 %826, 1
  %829 = fadd fast float %827, %803
  %830 = fadd fast float %828, %804
  %831 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %10, float %829, float %830, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %832 = extractvalue %dx.types.ResRet.f32 %831, 0
  %833 = extractvalue %dx.types.ResRet.f32 %831, 1
  %834 = extractvalue %dx.types.ResRet.f32 %831, 3
  %835 = fmul fast float %832, 2.000000e+00
  %836 = fmul fast float %833, 2.000000e+00
  %837 = fadd fast float %835, -1.000000e+00
  %838 = fadd fast float %836, -1.000000e+00
  %839 = call float @dx.op.unary.f32(i32 6, float %837)  ; FAbs(value)
  %840 = fsub fast float 1.000000e+00, %839
  %841 = call float @dx.op.unary.f32(i32 6, float %838)  ; FAbs(value)
  %842 = fsub fast float %840, %841
  %843 = fsub fast float -0.000000e+00, %842
  %844 = call float @dx.op.unary.f32(i32 7, float %843)  ; Saturate(value)
  %845 = fcmp fast olt float %837, 0.000000e+00
  %846 = fcmp fast olt float %838, 0.000000e+00
  %847 = select i1 %845, float -1.000000e+00, float 1.000000e+00
  %848 = select i1 %846, float -1.000000e+00, float 1.000000e+00
  %849 = fmul fast float %847, %844
  %850 = fmul fast float %848, %844
  %851 = fsub fast float %837, %849
  %852 = fsub fast float %838, %850
  %853 = call float @dx.op.dot3.f32(i32 55, float %851, float %852, float %842, float %851, float %852, float %842)  ; Dot3(ax,ay,az,bx,by,bz)
  %854 = call float @dx.op.unary.f32(i32 25, float %853)  ; Rsqrt(value)
  %855 = fmul fast float %851, %854
  %856 = fmul fast float %852, %854
  %857 = fmul fast float %854, %842
  %858 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %859 = extractvalue %dx.types.CBufRet.i32 %858, 1
  %860 = icmp eq i32 %859, 0
  %861 = fcmp fast oeq float %40, %834
  %862 = uitofp i1 %861 to float
  %863 = fmul fast float %862, 0x3FEE2790C0000000
  %864 = select i1 %860, float 0x3FEE2790C0000000, float %863
  %865 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %824, float %825, float %807)  ; Dot3(ax,ay,az,bx,by,bz)
  %866 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %855, float %856, float %857)  ; Dot3(ax,ay,az,bx,by,bz)
  %867 = call float @dx.op.unary.f32(i32 7, float %866)  ; Saturate(value)
  %868 = fsub fast float 1.000000e+00, %867
  %869 = call float @dx.op.unary.f32(i32 7, float %868)  ; Saturate(value)
  %870 = call float @dx.op.unary.f32(i32 24, float %869)  ; Sqrt(value)
  %871 = fmul fast float %329, %870
  %872 = fsub fast float %865, %231
  %873 = fmul fast float %872, %230
  %874 = call float @dx.op.unary.f32(i32 6, float %873)  ; FAbs(value)
  %875 = call float @dx.op.unary.f32(i32 6, float %871)  ; FAbs(value)
  %876 = fadd fast float %874, 0xBFEFF7CEE0000000
  %877 = fadd fast float %875, 0xBFEFF7CEE0000000
  %878 = fmul fast float %876, 0xBFF0083560000000
  %879 = fmul fast float %877, 0xBFF0083560000000
  %880 = call float @dx.op.unary.f32(i32 7, float %878)  ; Saturate(value)
  %881 = call float @dx.op.unary.f32(i32 7, float %879)  ; Saturate(value)
  %882 = fmul fast float %880, 2.000000e+00
  %883 = fmul fast float %881, 2.000000e+00
  %884 = fsub fast float 3.000000e+00, %882
  %885 = fsub fast float 3.000000e+00, %883
  %886 = fsub fast float %812, %154
  %887 = fmul fast float %886, %241
  %888 = call float @dx.op.unary.f32(i32 6, float %887)  ; FAbs(value)
  %889 = fmul fast float %888, %888
  %890 = fmul fast float %889, 9.000000e+00
  %891 = fmul fast float %888, 3.000000e+00
  %892 = fadd fast float %891, 1.000000e+00
  %893 = fadd fast float %892, %890
  %894 = fdiv fast float 0x3FEE666660000000, %893
  %895 = fadd fast float %894, 0x3FA99999A0000000
  %896 = fmul float %880, %881
  %897 = fmul float %896, %896
  %898 = fmul fast float %884, %864
  %899 = fmul fast float %898, %885
  %900 = fmul fast float %899, %897
  %901 = fmul fast float %900, %895
  %902 = call float @dx.op.unary.f32(i32 7, float %798)  ; Saturate(value)
  %903 = call float @dx.op.unary.f32(i32 7, float %799)  ; Saturate(value)
  %904 = fcmp fast oeq float %902, %798
  %905 = fcmp fast oeq float %903, %799
  %906 = and i1 %904, %905
  %907 = select i1 %906, float %901, float 0.000000e+00
  %908 = fcmp fast une float %907, 0.000000e+00
  %909 = select i1 %908, float %809, float 0.000000e+00
  %910 = select i1 %908, float %810, float 0.000000e+00
  %911 = select i1 %908, float %811, float 0.000000e+00
  %912 = select i1 %908, float %812, float 0.000000e+00
  %913 = fadd fast float %763, %907
  %914 = fmul fast float %909, %907
  %915 = fmul fast float %910, %907
  %916 = fmul fast float %911, %907
  %917 = fmul fast float %912, %907
  %918 = fadd fast float %768, %914
  %919 = fadd fast float %769, %915
  %920 = fadd fast float %770, %916
  %921 = fadd fast float %771, %917
  %922 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %10, float %803, float %804, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %923 = extractvalue %dx.types.ResRet.f32 %922, 0
  %924 = extractvalue %dx.types.ResRet.f32 %922, 1
  %925 = extractvalue %dx.types.ResRet.f32 %922, 2
  %926 = extractvalue %dx.types.ResRet.f32 %922, 3
  %927 = fmul fast float %923, %907
  %928 = fmul fast float %924, %907
  %929 = fmul fast float %925, %907
  %930 = fmul fast float %926, %907
  %931 = fadd fast float %781, %927
  %932 = fadd fast float %782, %928
  %933 = fadd fast float %783, %929
  %934 = fadd fast float %784, %930
  %935 = fsub fast float %787, %785
  %936 = fsub fast float %788, %786
  %937 = fmul fast float %224, %935
  %938 = fmul fast float %937, %792
  %939 = fmul fast float %224, %936
  %940 = fmul fast float %939, %793
  %941 = fadd fast float %938, %22
  %942 = fadd fast float %940, %23
  %943 = fmul fast float %941, %801
  %944 = fmul fast float %942, %802
  %945 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %6, %dx.types.Handle %10, float %943, float %944, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %946 = extractvalue %dx.types.ResRet.f32 %945, 0
  %947 = fmul fast float %946, 8.000000e+00
  %948 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7, %dx.types.Handle %10, float %943, float %944, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %949 = extractvalue %dx.types.ResRet.f32 %948, 0
  %950 = extractvalue %dx.types.ResRet.f32 %948, 1
  %951 = extractvalue %dx.types.ResRet.f32 %948, 2
  %952 = extractvalue %dx.types.ResRet.f32 %948, 3
  %953 = fmul fast float %816, %941
  %954 = fmul fast float %817, %942
  %955 = fadd fast float %953, %814
  %956 = fadd fast float %954, %815
  %957 = fmul fast float %677, %947
  %958 = fadd fast float %957, %671
  %959 = fmul fast float %958, %955
  %960 = fmul fast float %958, %956
  %961 = fadd fast float %827, %943
  %962 = fadd fast float %828, %944
  %963 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %10, float %961, float %962, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %964 = extractvalue %dx.types.ResRet.f32 %963, 0
  %965 = extractvalue %dx.types.ResRet.f32 %963, 1
  %966 = extractvalue %dx.types.ResRet.f32 %963, 3
  %967 = fmul fast float %964, 2.000000e+00
  %968 = fmul fast float %965, 2.000000e+00
  %969 = fadd fast float %967, -1.000000e+00
  %970 = fadd fast float %968, -1.000000e+00
  %971 = call float @dx.op.unary.f32(i32 6, float %969)  ; FAbs(value)
  %972 = fsub fast float 1.000000e+00, %971
  %973 = call float @dx.op.unary.f32(i32 6, float %970)  ; FAbs(value)
  %974 = fsub fast float %972, %973
  %975 = fsub fast float -0.000000e+00, %974
  %976 = call float @dx.op.unary.f32(i32 7, float %975)  ; Saturate(value)
  %977 = fcmp fast olt float %969, 0.000000e+00
  %978 = fcmp fast olt float %970, 0.000000e+00
  %979 = select i1 %977, float -1.000000e+00, float 1.000000e+00
  %980 = select i1 %978, float -1.000000e+00, float 1.000000e+00
  %981 = fmul fast float %979, %976
  %982 = fmul fast float %980, %976
  %983 = fsub fast float %969, %981
  %984 = fsub fast float %970, %982
  %985 = call float @dx.op.dot3.f32(i32 55, float %983, float %984, float %974, float %983, float %984, float %974)  ; Dot3(ax,ay,az,bx,by,bz)
  %986 = call float @dx.op.unary.f32(i32 25, float %985)  ; Rsqrt(value)
  %987 = fmul fast float %983, %986
  %988 = fmul fast float %984, %986
  %989 = fmul fast float %986, %974
  %990 = fcmp fast oeq float %40, %966
  %991 = uitofp i1 %990 to float
  %992 = fmul fast float %991, 0x3FEE2790C0000000
  %993 = select i1 %860, float 0x3FEE2790C0000000, float %992
  %994 = call float @dx.op.dot3.f32(i32 55, float %78, float %81, float %84, float %959, float %960, float %947)  ; Dot3(ax,ay,az,bx,by,bz)
  %995 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %987, float %988, float %989)  ; Dot3(ax,ay,az,bx,by,bz)
  %996 = call float @dx.op.unary.f32(i32 7, float %995)  ; Saturate(value)
  %997 = fsub fast float 1.000000e+00, %996
  %998 = call float @dx.op.unary.f32(i32 7, float %997)  ; Saturate(value)
  %999 = call float @dx.op.unary.f32(i32 24, float %998)  ; Sqrt(value)
  %1000 = fmul fast float %329, %999
  %1001 = fsub fast float %994, %231
  %1002 = fmul fast float %1001, %230
  %1003 = call float @dx.op.unary.f32(i32 6, float %1002)  ; FAbs(value)
  %1004 = call float @dx.op.unary.f32(i32 6, float %1000)  ; FAbs(value)
  %1005 = fadd fast float %1003, 0xBFEFF7CEE0000000
  %1006 = fadd fast float %1004, 0xBFEFF7CEE0000000
  %1007 = fmul fast float %1005, 0xBFF0083560000000
  %1008 = fmul fast float %1006, 0xBFF0083560000000
  %1009 = call float @dx.op.unary.f32(i32 7, float %1007)  ; Saturate(value)
  %1010 = call float @dx.op.unary.f32(i32 7, float %1008)  ; Saturate(value)
  %1011 = fmul fast float %1009, 2.000000e+00
  %1012 = fmul fast float %1010, 2.000000e+00
  %1013 = fsub fast float 3.000000e+00, %1011
  %1014 = fsub fast float 3.000000e+00, %1012
  %1015 = fsub fast float %952, %154
  %1016 = fmul fast float %1015, %241
  %1017 = call float @dx.op.unary.f32(i32 6, float %1016)  ; FAbs(value)
  %1018 = fmul fast float %1017, %1017
  %1019 = fmul fast float %1018, 9.000000e+00
  %1020 = fmul fast float %1017, 3.000000e+00
  %1021 = fadd fast float %1020, 1.000000e+00
  %1022 = fadd fast float %1021, %1019
  %1023 = fdiv fast float 0x3FEE666660000000, %1022
  %1024 = fadd fast float %1023, 0x3FA99999A0000000
  %1025 = fmul float %1009, %1010
  %1026 = fmul float %1025, %1025
  %1027 = fmul fast float %1013, %993
  %1028 = fmul fast float %1027, %1014
  %1029 = fmul fast float %1028, %1026
  %1030 = fmul fast float %1029, %1024
  %1031 = call float @dx.op.unary.f32(i32 7, float %941)  ; Saturate(value)
  %1032 = call float @dx.op.unary.f32(i32 7, float %942)  ; Saturate(value)
  %1033 = fcmp fast oeq float %1031, %941
  %1034 = fcmp fast oeq float %1032, %942
  %1035 = and i1 %1033, %1034
  %1036 = select i1 %1035, float %1030, float 0.000000e+00
  %1037 = fcmp fast une float %1036, 0.000000e+00
  %1038 = select i1 %1037, float %949, float 0.000000e+00
  %1039 = select i1 %1037, float %950, float 0.000000e+00
  %1040 = select i1 %1037, float %951, float 0.000000e+00
  %1041 = select i1 %1037, float %952, float 0.000000e+00
  %1042 = fadd fast float %913, %1036
  %1043 = fmul fast float %1038, %1036
  %1044 = fmul fast float %1039, %1036
  %1045 = fmul fast float %1040, %1036
  %1046 = fmul fast float %1041, %1036
  %1047 = fadd fast float %918, %1043
  %1048 = fadd fast float %919, %1044
  %1049 = fadd fast float %920, %1045
  %1050 = fadd fast float %921, %1046
  %1051 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %10, float %943, float %944, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1052 = extractvalue %dx.types.ResRet.f32 %1051, 0
  %1053 = extractvalue %dx.types.ResRet.f32 %1051, 1
  %1054 = extractvalue %dx.types.ResRet.f32 %1051, 2
  %1055 = extractvalue %dx.types.ResRet.f32 %1051, 3
  %1056 = fmul fast float %1052, %1036
  %1057 = fmul fast float %1053, %1036
  %1058 = fmul fast float %1054, %1036
  %1059 = fmul fast float %1055, %1036
  %1060 = fadd fast float %931, %1056
  %1061 = fadd fast float %932, %1057
  %1062 = fadd fast float %933, %1058
  %1063 = fadd fast float %934, %1059
  %1064 = call float @dx.op.binary.f32(i32 35, float %1042, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %1065 = fdiv fast float 1.000000e+00, %1064
  %1066 = fmul fast float %1047, %1065
  %1067 = fmul fast float %1048, %1065
  %1068 = fmul fast float %1049, %1065
  %1069 = fmul fast float %1050, %1065
  %1070 = fmul fast float %1060, %1065
  %1071 = fmul fast float %1061, %1065
  %1072 = fmul fast float %1062, %1065
  %1073 = fmul fast float %1063, %1065
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3, i32 %12, i32 %13, i32 undef, float %1066, float %1067, float %1068, float %1069, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1, i32 %12, i32 %13, i32 undef, float %1070, float %1071, float %1072, float %1073, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1074

; <label>:1074                                    ; preds = %31, %30
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!22}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{!5, !12, !18, !20}
!5 = !{!6, !8, !9, !10, !11}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<float>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{!13, !14, !15, !17}
!13 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!14 = !{i32 1, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!15 = !{i32 2, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !16}
!16 = !{i32 0, i32 5}
!17 = !{i32 3, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!18 = !{!19}
!19 = !{i32 0, %globalConstants* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!20 = !{!21}
!21 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!22 = !{void ()* @main, !"main", null, !4, !23}
!23 = !{i32 0, i64 8388864, i32 4, !24}
!24 = !{i32 8, i32 8, i32 1}
!25 = distinct !{!25, !"dx.controlflow.hints", i32 1}

#endif

const unsigned char g_REBLUR_Perf_DiffuseSh_PostBlur_NoTemporalStabilization_cs_dxil[] = {
  0x44, 0x58, 0x42, 0x43, 0xef, 0x8d, 0xd1, 0x0a, 0x73, 0xc5, 0xf7, 0x47,
  0x98, 0x29, 0x44, 0x67, 0xe7, 0x63, 0xed, 0x56, 0x01, 0x00, 0x00, 0x00,
  0x2c, 0x35, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00,
  0xc4, 0x01, 0x00, 0x00, 0x64, 0x11, 0x00, 0x00, 0x80, 0x11, 0x00, 0x00,
  0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x50, 0x01, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54,
  0x98, 0x0f, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00, 0xe6, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x80, 0x0f, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0xdd, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0xa5, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xe8, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0xc3, 0x30, 0x10,
  0x31, 0x03, 0x70, 0xd3, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0xbf, 0x12,
  0xd2, 0x4a, 0x4c, 0x7e, 0x71, 0xdb, 0xa8, 0x30, 0x0c, 0xc3, 0x18, 0xe6,
  0x08, 0x10, 0x42, 0xee, 0x19, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0x43,
  0xa0, 0x19, 0x16, 0x02, 0x05, 0x49, 0x51, 0x8e, 0x41, 0x19, 0x86, 0x61,
  0x18, 0x86, 0x81, 0x96, 0xb2, 0x00, 0x83, 0x32, 0x0c, 0x83, 0x61, 0x18,
  0x06, 0x42, 0x4d, 0x19, 0x8c, 0xc1, 0xa0, 0xa7, 0x20, 0xc6, 0x60, 0x18,
  0x86, 0x61, 0x18, 0x14, 0x95, 0x05, 0x18, 0x94, 0x61, 0x18, 0x86, 0x61,
  0x18, 0x10, 0x9a, 0x4a, 0x61, 0x0c, 0x86, 0x61, 0x50, 0x55, 0x98, 0x63,
  0x50, 0x14, 0xc3, 0x30, 0x8c, 0x61, 0x18, 0x0c, 0xba, 0x0a, 0x61, 0x0c,
  0x86, 0x41, 0xd9, 0x51, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x3e, 0xb7,
  0x51, 0xc5, 0x4a, 0x4c, 0x7e, 0x71, 0xdb, 0x88, 0x30, 0x0c, 0xc3, 0x28,
  0xc4, 0x36, 0x28, 0x03, 0x71, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x62, 0x18,
  0x86, 0xa1, 0x10, 0xde, 0xa0, 0x0c, 0xf4, 0xcd, 0x11, 0x04, 0xc5, 0x50,
  0x06, 0x64, 0x18, 0x42, 0x12, 0x07, 0x02, 0x86, 0x11, 0x08, 0x63, 0xa6,
  0x36, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0, 0x85,
  0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05,
  0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03,
  0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0xa0, 0x03,
  0x3f, 0x00, 0x03, 0x3f, 0xd0, 0x03, 0x3d, 0x68, 0x87, 0x74, 0x80, 0x87,
  0x79, 0xf8, 0x05, 0x7a, 0xc8, 0x07, 0x78, 0x28, 0x07, 0x14, 0x0c, 0x33,
  0x89, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d,
  0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29,
  0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f,
  0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d,
  0xf8, 0x01, 0x18, 0xf8, 0x01, 0x12, 0x4a, 0x93, 0xce, 0x99, 0xc2, 0x60,
  0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca, 0x01,
  0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8, 0xc0,
  0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xfc, 0x40, 0x0f, 0xf4, 0xa0,
  0x1d, 0xd2, 0x01, 0x1e, 0xe6, 0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1,
  0x1c, 0x50, 0x30, 0xcc, 0x64, 0x8d, 0x03, 0x3b, 0x84, 0xc3, 0x3c, 0xcc,
  0x83, 0x1b, 0xd0, 0x42, 0x39, 0xe0, 0x03, 0x3d, 0xd4, 0x83, 0x3c, 0x94,
  0x83, 0x1c, 0x90, 0x02, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0,
  0x83, 0x1f, 0x20, 0xc1, 0x48, 0x49, 0x9d, 0x89, 0x0c, 0xc6, 0x81, 0x1d,
  0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x64, 0xe1, 0x16, 0x68, 0xa1, 0x1c,
  0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f,
  0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c,
  0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f,
  0xc0, 0xc0, 0x0f, 0x50, 0x50, 0x12, 0x3b, 0xd3, 0x37, 0x0e, 0xec, 0x10,
  0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x20, 0x0b, 0xb7, 0x40, 0x0b, 0xe5, 0x80,
  0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x50,
  0x0f, 0xee, 0x30, 0x0f, 0xe9, 0x70, 0x0e, 0xee, 0x50, 0x0e, 0xe4, 0x00,
  0x06, 0xe9, 0xe0, 0x0e, 0xf4, 0xe0, 0x07, 0x28, 0x18, 0xc8, 0x4d, 0x82,
  0xf2, 0x2c, 0x61, 0x01, 0x24, 0xc9, 0x67, 0x80, 0x29, 0x42, 0x2e, 0xbf,
  0x58, 0x1c, 0x60, 0xf2, 0x71, 0x1f, 0x47, 0x01, 0x3c, 0x8c, 0x30, 0x18,
  0xc3, 0x08, 0x82, 0x31, 0x8c, 0x20, 0x0c, 0xf7, 0x18, 0x8b, 0x13, 0x00,
  0x0b, 0xe7, 0x34, 0xd2, 0x04, 0x34, 0x93, 0x84, 0xd0, 0x20, 0x8e, 0xcb,
  0xb2, 0x2c, 0x65, 0x63, 0x9e, 0xe7, 0x79, 0x9e, 0xe7, 0x99, 0x36, 0x0c,
  0xc3, 0x30, 0x0c, 0xc3, 0x30, 0x0c, 0xc3, 0x30, 0x0c, 0xc3, 0x30, 0x86,
  0x61, 0x18, 0x86, 0x92, 0xea, 0x9b, 0xa4, 0x29, 0xa2, 0x84, 0xc9, 0x67,
  0x01, 0xe6, 0x59, 0x88, 0x88, 0x9d, 0x80, 0x89, 0x40, 0xc1, 0x40, 0xf7,
  0x1c, 0x01, 0x28, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xae, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xd0,
  0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x6d, 0x90,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x43,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x67, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xb9, 0x80, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x01, 0x01, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x87, 0x03, 0x02,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xcf, 0x07,
  0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e,
  0x31, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x2c, 0x10, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x1c,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x1a,
  0x4a, 0xa0, 0x0c, 0x46, 0x00, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x10, 0x4a,
  0xa1, 0x00, 0x0d, 0xca, 0xa1, 0x00, 0x03, 0x0a, 0x50, 0xa0, 0x40, 0x05,
  0x0a, 0x58, 0xa0, 0xc0, 0x05, 0x0a, 0x70, 0xa0, 0x30, 0x07, 0x0a, 0x74,
  0xa0, 0x60, 0x07, 0x0a, 0x78, 0xa0, 0xa0, 0x07, 0x0a, 0x7c, 0xa0, 0xe0,
  0x07, 0x0a, 0x90, 0xa0, 0x20, 0x09, 0x0a, 0x94, 0xa0, 0x60, 0x09, 0x0a,
  0x97, 0xa0, 0x80, 0x09, 0x0a, 0x99, 0xa0, 0xa0, 0x09, 0x0a, 0x9b, 0xa0,
  0xc0, 0x09, 0x0a, 0x9d, 0xa0, 0xe0, 0x09, 0x0a, 0x9f, 0xa0, 0x00, 0x0b,
  0x0a, 0xb1, 0xa0, 0x20, 0x0b, 0x0a, 0xb3, 0xa0, 0x40, 0x0b, 0x0a, 0xb5,
  0xa0, 0x60, 0x0b, 0x0a, 0xb7, 0xa0, 0x80, 0x0b, 0x0a, 0xb9, 0xa0, 0xa0,
  0x0b, 0x0a, 0xbb, 0xa0, 0xc0, 0x0b, 0x0a, 0xa2, 0x48, 0x19, 0x0a, 0x1e,
  0xa2, 0x60, 0x8a, 0x82, 0xc2, 0x11, 0x80, 0x1a, 0xa0, 0xbc, 0x00, 0x09,
  0x01, 0x11, 0x68, 0x9d, 0x01, 0xa0, 0x76, 0x06, 0x80, 0xde, 0x19, 0x00,
  0xaa, 0x67, 0x00, 0xc8, 0x9e, 0x01, 0x20, 0x7c, 0x06, 0x80, 0xd0, 0x19,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b,
  0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99,
  0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62,
  0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73,
  0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x84, 0xa1, 0x99, 0x20, 0x0c,
  0xce, 0x06, 0x61, 0x20, 0x26, 0x08, 0xc3, 0xb3, 0x41, 0x30, 0x0c, 0x0a,
  0x63, 0x73, 0x13, 0x84, 0x01, 0xda, 0x30, 0x20, 0x09, 0x31, 0x41, 0x40,
  0x03, 0x56, 0x20, 0x75, 0x96, 0xe4, 0xf6, 0xe5, 0xf4, 0x26, 0xd7, 0x16,
  0xc6, 0xf6, 0x25, 0xf5, 0x56, 0x77, 0x86, 0xe6, 0x56, 0x36, 0x37, 0x37,
  0x41, 0x18, 0xa2, 0x09, 0xc2, 0x20, 0x6d, 0x10, 0x0c, 0x67, 0x43, 0x62,
  0x2c, 0x8c, 0x61, 0x0c, 0x8d, 0xf1, 0x30, 0x39, 0x4b, 0x72, 0xfb, 0x22,
  0x0a, 0xa3, 0x0b, 0x8b, 0xd9, 0x90, 0x0c, 0x4b, 0x64, 0x0c, 0x43, 0x63,
  0x3c, 0x44, 0xce, 0x92, 0xdc, 0xbe, 0x88, 0xd2, 0xcc, 0xcc, 0x36, 0x24,
  0xcd, 0x32, 0x19, 0xcd, 0xd0, 0x18, 0xcf, 0x04, 0x61, 0x0d, 0x4c, 0x81,
  0xc9, 0x59, 0x92, 0xdb, 0x97, 0x55, 0x5a, 0xd9, 0x9d, 0xd6, 0x86, 0x84,
  0xa8, 0x2c, 0x83, 0x18, 0x1a, 0xe3, 0x99, 0x20, 0x0c, 0x13, 0x95, 0xb3,
  0x24, 0xb7, 0x2f, 0xa2, 0x34, 0x33, 0xb3, 0x29, 0xb4, 0x0d, 0x09, 0xb6,
  0x64, 0x06, 0x36, 0x34, 0xc6, 0xb3, 0xa1, 0x80, 0x24, 0xea, 0xd2, 0x26,
  0x08, 0x6d, 0x70, 0x0a, 0xac, 0xce, 0x9e, 0xea, 0xe8, 0xbe, 0x9c, 0xde,
  0xe4, 0xda, 0xc2, 0xd8, 0xbe, 0xa4, 0xde, 0xea, 0xce, 0xd0, 0xdc, 0xca,
  0xe6, 0xe6, 0x26, 0x08, 0x61, 0x30, 0x0a, 0x1b, 0x16, 0x83, 0xeb, 0x0c,
  0x63, 0x68, 0x3c, 0xcf, 0x7b, 0x98, 0x9c, 0x3d, 0xd5, 0xd1, 0x7d, 0x11,
  0xa5, 0x99, 0x99, 0x6d, 0x58, 0x06, 0x0e, 0x0c, 0x8c, 0x61, 0x68, 0x3c,
  0xcf, 0x7b, 0x26, 0x08, 0x6f, 0x80, 0x0a, 0x8c, 0xce, 0x9e, 0xea, 0xe8,
  0xbe, 0x92, 0xdc, 0xe8, 0xca, 0xe4, 0xdc, 0xc2, 0xd8, 0x88, 0xc2, 0xe8,
  0xc2, 0x26, 0x08, 0x03, 0xb5, 0x41, 0x30, 0xc8, 0x60, 0xc3, 0xd2, 0x88,
  0xc1, 0x18, 0x18, 0xcd, 0xd0, 0x78, 0x9e, 0x57, 0x06, 0x5c, 0xce, 0x9e,
  0xea, 0xe8, 0xbe, 0x88, 0xd2, 0xcc, 0xcc, 0xa6, 0xd0, 0x36, 0x2c, 0x04,
  0x77, 0x06, 0x06, 0x31, 0x34, 0x9e, 0xe7, 0x3d, 0x1b, 0x88, 0x2f, 0x0c,
  0xcc, 0x00, 0x0d, 0x26, 0x08, 0x76, 0xa0, 0x0a, 0x7c, 0xce, 0xd8, 0xde,
  0xc4, 0xc2, 0xd8, 0x86, 0xde, 0xdc, 0xe6, 0xe8, 0xc2, 0xdc, 0xe8, 0xe6,
  0x26, 0x08, 0x43, 0xb5, 0x01, 0x31, 0xd4, 0x60, 0x0d, 0x0c, 0x63, 0x60,
  0x03, 0x60, 0x43, 0xd0, 0x06, 0x13, 0x04, 0x3c, 0x58, 0x05, 0x36, 0x67,
  0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x6d, 0x70,
  0x1b, 0x10, 0xe3, 0x0d, 0xe0, 0xc0, 0x30, 0x06, 0x03, 0xd8, 0x10, 0xc4,
  0xc1, 0x06, 0x62, 0x4b, 0x03, 0x37, 0x90, 0x83, 0x09, 0x42, 0x1d, 0xa4,
  0x02, 0x97, 0x33, 0xab, 0xb4, 0xb2, 0x3b, 0xaa, 0xb7, 0x21, 0xb6, 0x34,
  0xb8, 0x0d, 0x03, 0x86, 0x35, 0x13, 0x84, 0xc1, 0xda, 0x80, 0x24, 0x75,
  0xd0, 0xd8, 0x01, 0x61, 0xdc, 0x81, 0x43, 0xe6, 0xcc, 0x2a, 0xad, 0xec,
  0x8e, 0xea, 0xed, 0xea, 0x4d, 0x8e, 0x8d, 0x6c, 0x82, 0x30, 0x5c, 0x13,
  0x84, 0x30, 0x20, 0x85, 0x0d, 0x4a, 0x92, 0x07, 0x8d, 0x1d, 0x10, 0x7a,
  0x70, 0x07, 0x8e, 0xb3, 0x07, 0x44, 0xce, 0x8c, 0xe4, 0xea, 0xe6, 0xe8,
  0xea, 0xda, 0x26, 0x08, 0x03, 0xb6, 0x01, 0x49, 0xfa, 0x80, 0xf0, 0x83,
  0x3b, 0x70, 0x9c, 0x3d, 0xa0, 0x73, 0x86, 0x94, 0x46, 0x47, 0x94, 0x36,
  0x47, 0x07, 0x15, 0x26, 0x17, 0xd6, 0x36, 0x37, 0x41, 0x18, 0xb2, 0x0d,
  0x48, 0x02, 0x0a, 0x44, 0x28, 0xdc, 0x81, 0xe3, 0xec, 0x01, 0xa1, 0x33,
  0xab, 0xb4, 0xb2, 0x3b, 0xab, 0xb2, 0x31, 0xba, 0x37, 0xb9, 0xab, 0x37,
  0x39, 0x36, 0xb2, 0x09, 0xc2, 0xa0, 0x6d, 0x30, 0x92, 0x51, 0x20, 0x48,
  0xe1, 0x0e, 0x1c, 0x52, 0x67, 0x56, 0x69, 0x65, 0x77, 0x56, 0x65, 0x63,
  0x74, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x76,
  0x13, 0x84, 0x61, 0xdb, 0x60, 0x24, 0xa6, 0x40, 0x9c, 0xc2, 0x1d, 0x38,
  0x44, 0xce, 0x9a, 0xec, 0xa6, 0xc6, 0xc2, 0xd8, 0xca, 0x26, 0x08, 0x03,
  0xb7, 0xc1, 0x48, 0x52, 0x81, 0x50, 0x85, 0x3b, 0x70, 0x68, 0x9c, 0x11,
  0x95, 0x89, 0xd5, 0x9d, 0x4d, 0x10, 0x86, 0x6e, 0x83, 0x91, 0xb0, 0x02,
  0xd1, 0x0a, 0x77, 0xe0, 0xd0, 0x39, 0x4b, 0x72, 0xb3, 0x9b, 0x1a, 0x93,
  0x2b, 0x2b, 0x73, 0x9b, 0x4a, 0xd3, 0x2b, 0x9b, 0x20, 0x0c, 0xde, 0x06,
  0x24, 0x79, 0x05, 0x02, 0x16, 0xee, 0xc0, 0x71, 0xf6, 0x80, 0xcb, 0xd9,
  0xd4, 0x98, 0x5c, 0x59, 0x99, 0xdb, 0x54, 0x9a, 0x5e, 0xd9, 0x04, 0x61,
  0xf8, 0x36, 0x18, 0x89, 0x2c, 0x10, 0xb3, 0x70, 0x07, 0x0e, 0x99, 0xb3,
  0x24, 0x37, 0x3b, 0xa9, 0xb2, 0x31, 0xba, 0xa9, 0x34, 0xbd, 0xb2, 0x09,
  0xc2, 0x00, 0x06, 0x1b, 0x90, 0xa4, 0x16, 0x08, 0x5b, 0xb8, 0x03, 0xc7,
  0xd9, 0x03, 0x26, 0x67, 0x52, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65,
  0x13, 0x84, 0x21, 0x0c, 0x36, 0x18, 0x09, 0x2e, 0x10, 0xb9, 0x70, 0x07,
  0x0e, 0x9b, 0x33, 0xa9, 0xb2, 0x31, 0xba, 0xa9, 0x34, 0xbd, 0x32, 0x28,
  0xb9, 0x32, 0xbb, 0x09, 0xc2, 0x20, 0x06, 0x1b, 0x8c, 0x64, 0x17, 0x08,
  0x5e, 0xb8, 0x03, 0x87, 0xd0, 0x99, 0x54, 0xd9, 0xdc, 0x1b, 0x5b, 0x1d,
  0x5d, 0xda, 0x9b, 0xdb, 0xd4, 0x58, 0x18, 0x5b, 0xd9, 0x04, 0x61, 0x18,
  0x83, 0x0d, 0x48, 0xe2, 0x0b, 0xc4, 0x2f, 0xdc, 0x81, 0xe3, 0xec, 0x01,
  0x97, 0x33, 0xa9, 0xb2, 0x31, 0xba, 0x27, 0x33, 0xb3, 0xb9, 0x32, 0xba,
  0x09, 0xc2, 0x40, 0x06, 0x1b, 0x90, 0x24, 0x1c, 0x08, 0x71, 0xb8, 0x03,
  0xc7, 0xd9, 0x03, 0x5a, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
  0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x44, 0x61, 0x72, 0x6b, 0x6e, 0x65,
  0x73, 0x73, 0x13, 0x84, 0xa1, 0x0c, 0x36, 0x18, 0x09, 0x39, 0x10, 0xe5,
  0x70, 0x07, 0x0e, 0x97, 0x33, 0xa9, 0xb2, 0x31, 0xba, 0x27, 0xb9, 0xb4,
  0xb3, 0x34, 0xb7, 0x09, 0xc2, 0x60, 0x06, 0x1b, 0x90, 0xe4, 0x1c, 0x08,
  0x74, 0xb8, 0x03, 0x32, 0x70, 0xf6, 0x80, 0xd9, 0x99, 0xd3, 0x9b, 0x9b,
  0x54, 0x99, 0x59, 0x99, 0x5c, 0x99, 0xdb, 0x58, 0x59, 0xd0, 0xd8, 0x58,
  0x5d, 0x5b, 0x1d, 0x5b, 0x18, 0x5d, 0xda, 0x9b, 0xdb, 0x04, 0x61, 0x38,
  0x83, 0x0d, 0x46, 0xa2, 0x0e, 0xc4, 0x3a, 0xdc, 0x81, 0x43, 0xe5, 0xec,
  0x49, 0x8e, 0x0e, 0xed, 0xad, 0xe9, 0x8d, 0xac, 0x6c, 0x82, 0x30, 0xa0,
  0xc1, 0x06, 0x24, 0x69, 0x07, 0xc2, 0x1d, 0xee, 0xc0, 0x71, 0xf6, 0x80,
  0xca, 0x59, 0x95, 0x1b, 0x9c, 0xdc, 0x9b, 0x5a, 0xd9, 0x18, 0xdd, 0x04,
  0x61, 0x48, 0x83, 0x0d, 0x46, 0x02, 0x0f, 0x44, 0x3c, 0xdc, 0x81, 0xc3,
  0xe7, 0x8c, 0xa8, 0xcc, 0xed, 0x2d, 0x6d, 0x2e, 0xcd, 0xed, 0x4c, 0x2a,
  0xcc, 0xed, 0xac, 0x6c, 0x82, 0x30, 0xa8, 0xc1, 0x06, 0x24, 0x99, 0x07,
  0x82, 0x1e, 0xee, 0xc0, 0x71, 0xf6, 0x80, 0xd5, 0x19, 0x14, 0x5b, 0x98,
  0x5b, 0x19, 0x51, 0xda, 0x1c, 0xdd, 0x54, 0x99, 0xdb, 0x5c, 0x1a, 0x5d,
  0x9a, 0x5d, 0x1a, 0x5d, 0xde, 0x04, 0x61, 0x58, 0x83, 0x0d, 0x48, 0x62,
  0x0f, 0xc4, 0x3d, 0xdc, 0x81, 0xe3, 0xec, 0x01, 0x9f, 0x33, 0x23, 0xb9,
  0xb0, 0xb6, 0x32, 0xb9, 0x30, 0xba, 0xb2, 0xa9, 0xb1, 0x30, 0xb6, 0xb2,
  0x09, 0xc2, 0xc0, 0x06, 0x1b, 0x8c, 0x24, 0x1f, 0x08, 0x7d, 0xb8, 0x03,
  0x87, 0xcb, 0x99, 0x10, 0x5b, 0x9d, 0x9c, 0x54, 0x18, 0x59, 0x5a, 0xdd,
  0xdc, 0x04, 0x61, 0x68, 0x83, 0x0d, 0x48, 0xc2, 0x0f, 0x44, 0x3f, 0xdc,
  0x81, 0xe3, 0xec, 0x01, 0xaf, 0xb3, 0xa6, 0x30, 0xbc, 0xa0, 0xb1, 0xb1,
  0xba, 0xb6, 0x3a, 0xb6, 0x30, 0xba, 0x32, 0x32, 0x23, 0xb9, 0xb0, 0xb6,
  0x32, 0xa7, 0xba, 0xb6, 0x09, 0xc2, 0xe0, 0x06, 0x1b, 0x8c, 0xe4, 0x1f,
  0x08, 0x90, 0xb8, 0x03, 0x87, 0xdb, 0x59, 0x53, 0x18, 0x9e, 0x51, 0xd8,
  0x1c, 0x5d, 0xd0, 0xd8, 0x58, 0x5d, 0x5b, 0x1d, 0x5b, 0x18, 0x5d, 0x19,
  0x99, 0x91, 0x5c, 0x58, 0x5b, 0x99, 0x53, 0x5d, 0xdb, 0x04, 0x61, 0x78,
  0x83, 0x0d, 0x46, 0x22, 0x12, 0xc4, 0x48, 0xdc, 0x81, 0x43, 0xe6, 0x2c,
  0xc8, 0x8d, 0x2e, 0xcd, 0x28, 0x4d, 0xae, 0xcc, 0x8c, 0x2d, 0x6f, 0x82,
  0x30, 0xc0, 0xc1, 0x06, 0x23, 0x29, 0x09, 0xc2, 0x24, 0xee, 0xc0, 0xa1,
  0x74, 0xc6, 0xf4, 0x26, 0x56, 0x16, 0xe4, 0x76, 0xc6, 0x56, 0x66, 0x24,
  0x17, 0x36, 0x46, 0x97, 0xf6, 0xe6, 0x36, 0x41, 0x18, 0xe2, 0x60, 0x03,
  0x92, 0xa0, 0x04, 0x91, 0x12, 0x77, 0xe0, 0x38, 0x7b, 0x40, 0xe9, 0x4c,
  0xea, 0xad, 0xee, 0x0c, 0xcd, 0xad, 0x6c, 0x6e, 0xce, 0x48, 0x2e, 0x6c,
  0x8c, 0x2e, 0xed, 0xcd, 0x6d, 0x82, 0x30, 0xc8, 0xc1, 0x06, 0x23, 0x59,
  0x09, 0x82, 0x25, 0xee, 0xc0, 0x61, 0x1a, 0x9c, 0x49, 0x95, 0xcd, 0xc1,
  0xbd, 0xb9, 0xcd, 0xa5, 0xd9, 0x95, 0x05, 0x8d, 0x8d, 0xd5, 0xb5, 0xd5,
  0xb1, 0x85, 0xd1, 0xa5, 0xbd, 0xb9, 0x49, 0xbd, 0xd5, 0x9d, 0xa1, 0xb9,
  0x95, 0xcd, 0xcd, 0x51, 0xa1, 0xc9, 0x95, 0xcd, 0xa1, 0xbd, 0xb1, 0x91,
  0x4d, 0x10, 0x86, 0x39, 0xd8, 0x60, 0x24, 0x2e, 0x41, 0xbc, 0xc4, 0x1d,
  0x38, 0xb4, 0xce, 0x88, 0xd2, 0xcc, 0xcc, 0xa0, 0xe4, 0xca, 0xe0, 0xc2,
  0xe6, 0xe6, 0x84, 0xd8, 0xea, 0xe4, 0xa4, 0xc2, 0xc8, 0xd2, 0xea, 0xe6,
  0x26, 0x08, 0x03, 0x1d, 0x6c, 0x30, 0x92, 0x98, 0x20, 0x64, 0xe2, 0x0e,
  0x1c, 0x5a, 0x67, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x65, 0x70, 0x61,
  0x73, 0x73, 0x42, 0x6c, 0x75, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
  0x13, 0x84, 0xa1, 0x0e, 0x36, 0x18, 0x09, 0x4d, 0x10, 0x35, 0x71, 0x07,
  0x0e, 0xa7, 0x33, 0xa4, 0xb4, 0x39, 0xba, 0x37, 0xb9, 0x3c, 0xa3, 0x34,
  0x3c, 0x23, 0xb9, 0xb0, 0xb6, 0x32, 0xa7, 0xba, 0xb6, 0x09, 0xc2, 0x60,
  0x07, 0x1b, 0x90, 0xe4, 0x26, 0x08, 0x9c, 0xb8, 0x03, 0xc7, 0xd9, 0x03,
  0x5e, 0x67, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x74, 0x44, 0x69, 0x6d,
  0x4d, 0x75, 0x6c, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
  0x13, 0x84, 0xe1, 0x0e, 0x36, 0x20, 0x89, 0x4e, 0x10, 0x3b, 0x71, 0x07,
  0x8e, 0xb3, 0x07, 0xd4, 0xce, 0x92, 0xe6, 0xae, 0xde, 0xe4, 0xd8, 0xc8,
  0xa6, 0xe0, 0xc2, 0xc6, 0xca, 0x9a, 0xde, 0xe8, 0xd2, 0xde, 0xdc, 0x8a,
  0xdc, 0xc2, 0xc4, 0xd8, 0xca, 0xc8, 0x26, 0x08, 0x03, 0x1e, 0x6c, 0x30,
  0x92, 0x9e, 0x20, 0x7c, 0xe2, 0x0e, 0xc8, 0x80, 0xcb, 0x99, 0x91, 0x5c,
  0x58, 0x5b, 0x59, 0x92, 0x1b, 0x59, 0x19, 0xde, 0x04, 0x61, 0xc8, 0x83,
  0x0d, 0x46, 0x02, 0x16, 0x44, 0x58, 0xdc, 0x01, 0x19, 0x30, 0x3a, 0x23,
  0x4a, 0x33, 0x33, 0x6b, 0x0a, 0xa3, 0x2b, 0x93, 0x4b, 0x0b, 0x63, 0x6b,
  0x0a, 0x9b, 0x5b, 0x9b, 0x20, 0x0c, 0x7a, 0xb0, 0x01, 0x49, 0xc6, 0x82,
  0x20, 0x8b, 0x3b, 0x20, 0x03, 0x67, 0x0f, 0x18, 0x9d, 0x4d, 0xc1, 0x95,
  0x8d, 0x35, 0x85, 0xd1, 0x95, 0xc9, 0xa5, 0x85, 0xb1, 0x35, 0x85, 0xcd,
  0xad, 0x4d, 0x10, 0x86, 0x3d, 0xd8, 0x60, 0x24, 0x66, 0x41, 0x9c, 0xc5,
  0x1d, 0x90, 0x01, 0x9b, 0x33, 0xa9, 0xb2, 0xb9, 0x32, 0x3a, 0xa4, 0xb4,
  0x39, 0xba, 0x37, 0xb9, 0xbc, 0x09, 0xc2, 0xc0, 0x07, 0x1b, 0x8c, 0x24,
  0x2d, 0x08, 0xb5, 0xb8, 0x03, 0x32, 0x20, 0x72, 0x26, 0xf5, 0x46, 0x17,
  0x46, 0xf7, 0x26, 0x37, 0x41, 0x18, 0xfa, 0x60, 0x03, 0x92, 0xb0, 0x05,
  0xd1, 0x16, 0x77, 0xe0, 0x38, 0x7b, 0xb0, 0x21, 0x0d, 0xd8, 0x00, 0x0f,
  0xf8, 0xe0, 0x0f, 0x44, 0xa1, 0x14, 0x50, 0x61, 0x15, 0x5c, 0x21, 0x16,
  0x68, 0xe1, 0x16, 0x74, 0xa1, 0x17, 0xc0, 0x61, 0x1c, 0xcc, 0x21, 0x1d,
  0xd8, 0xe1, 0x1d, 0xe4, 0xa1, 0x1e, 0xf0, 0x61, 0x1f, 0xfc, 0x21, 0x24,
  0x48, 0xe2, 0x24, 0x54, 0xa2, 0x25, 0x60, 0x62, 0x26, 0x6c, 0x22, 0x27,
  0x78, 0xe2, 0x27, 0xc4, 0xa2, 0x2c, 0xd0, 0x62, 0x2d, 0xdc, 0x62, 0xc3,
  0x60, 0xd0, 0xc1, 0x5b, 0x4c, 0x10, 0x04, 0x60, 0x03, 0xb0, 0x61, 0x30,
  0xe4, 0x42, 0x2e, 0x36, 0x04, 0x73, 0xb1, 0x61, 0x18, 0xe2, 0x82, 0x2e,
  0x48, 0xb4, 0x85, 0xa5, 0xb9, 0x4d, 0x10, 0xf2, 0xa0, 0x14, 0x26, 0x08,
  0x83, 0x1f, 0x6c, 0x18, 0xf0, 0x02, 0x2f, 0x86, 0x0d, 0x84, 0x71, 0x17,
  0x58, 0x5e, 0x6c, 0x28, 0xe2, 0xc2, 0x2e, 0x80, 0x39, 0xd0, 0x0b, 0x22,
  0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x34, 0xcc, 0xd8, 0xde,
  0xc2, 0xe8, 0xe6, 0x26, 0x08, 0xc3, 0x1f, 0xb0, 0x48, 0x73, 0x9b, 0xa3,
  0x9b, 0x9b, 0x20, 0x0c, 0xa0, 0x40, 0x22, 0xcd, 0x8d, 0x6e, 0x8e, 0x08,
  0x5d, 0x19, 0xde, 0x17, 0xdb, 0x5b, 0x18, 0x19, 0x11, 0xba, 0x32, 0xbc,
  0x2f, 0xb7, 0x37, 0xb9, 0xb6, 0x09, 0xc2, 0x10, 0x0a, 0x4c, 0xe8, 0xca,
  0xf0, 0xbe, 0xe6, 0xe8, 0xde, 0xe4, 0xca, 0x58, 0xd4, 0xa5, 0xb9, 0xd1,
  0xcd, 0x4d, 0x10, 0x06, 0x51, 0xd8, 0x00, 0xf1, 0xc5, 0xd0, 0x17, 0x7e,
  0xf1, 0x17, 0xa0, 0x11, 0x1a, 0x98, 0x68, 0x90, 0xc1, 0x68, 0x90, 0x46,
  0x69, 0x90, 0x81, 0x69, 0x9c, 0x46, 0x15, 0x36, 0x36, 0xbb, 0x36, 0x97,
  0x34, 0xb2, 0x32, 0x37, 0xba, 0x29, 0x41, 0x50, 0x85, 0x0c, 0xcf, 0xc5,
  0xae, 0x4c, 0x6e, 0x2e, 0xed, 0xcd, 0x6d, 0x4a, 0x40, 0x34, 0x21, 0xc3,
  0x73, 0xb1, 0x0b, 0x63, 0xb3, 0x2b, 0x93, 0x9b, 0x12, 0x18, 0x75, 0xc8,
  0xf0, 0x5c, 0xe6, 0xd0, 0xc2, 0xc8, 0xca, 0xe4, 0x9a, 0xde, 0xc8, 0xca,
  0xd8, 0xa6, 0x04, 0x49, 0x19, 0x32, 0x3c, 0x17, 0xb9, 0xb2, 0xb9, 0xb7,
  0x3a, 0xb9, 0xb1, 0xb2, 0xb9, 0x29, 0x81, 0x1c, 0x54, 0x22, 0xc3, 0x73,
  0xa1, 0xcb, 0x83, 0x2b, 0x0b, 0x72, 0x73, 0x7b, 0xa3, 0x0b, 0xa3, 0x4b,
  0x7b, 0x73, 0x9b, 0x9b, 0x22, 0xbc, 0x05, 0x5d, 0xd4, 0x21, 0xc3, 0x73,
  0x29, 0x73, 0xa3, 0x93, 0xcb, 0x83, 0x7a, 0x4b, 0x73, 0xa3, 0x9b, 0x9b,
  0x12, 0xe8, 0x45, 0x17, 0x32, 0x3c, 0x97, 0xb1, 0xb7, 0x3a, 0x37, 0xba,
  0x32, 0xb9, 0xb9, 0x29, 0xc1, 0x69, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x5d, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd5, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe3, 0xf0,
  0x0e, 0xee, 0x40, 0x0f, 0xf2, 0xf0, 0x0e, 0xec, 0x60, 0x0e, 0xec, 0xf0,
  0x0e, 0xf7, 0xe0, 0x06, 0xe8, 0x90, 0x0e, 0xee, 0x40, 0x0f, 0xf3, 0x30,
  0x43, 0x81, 0xd8, 0x81, 0x1d, 0xec, 0xa1, 0x1d, 0xdc, 0x80, 0x1d, 0xde,
  0xe1, 0x1d, 0xe0, 0x61, 0x46, 0x14, 0x91, 0x03, 0x3e, 0xb8, 0x01, 0x39,
  0x88, 0xc3, 0x39, 0xb8, 0x81, 0x3d, 0x84, 0x83, 0x3c, 0xb0, 0x43, 0x38,
  0xe4, 0xc3, 0x3b, 0xd4, 0x03, 0x3d, 0xcc, 0x60, 0x24, 0x72, 0xc0, 0x07,
  0x37, 0x10, 0x07, 0x79, 0x28, 0x87, 0x70, 0x58, 0x07, 0x37, 0x10, 0x07,
  0x79, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
  0x96, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9,
  0xc5, 0x6d, 0x9b, 0xc2, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15,
  0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc,
  0xb6, 0x2d, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51, 0x10,
  0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc8, 0x6d, 0x1b,
  0x83, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02,
  0xcd, 0xb0, 0x10, 0x56, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0, 0x4c,
  0xb7, 0x5f, 0xdc, 0xb6, 0x21, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01,
  0xcc, 0xb3, 0x10, 0x25, 0x51, 0x11, 0x8b, 0x5f, 0xdc, 0xb6, 0x1d, 0x48,
  0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17,
  0xb7, 0x6d, 0x02, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0xc4, 0x35, 0x51,
  0x11, 0x51, 0x3a, 0xc0, 0xe0, 0x17, 0xb7, 0x6d, 0x03, 0xd6, 0x70, 0xf9,
  0xce, 0xe3, 0x4f, 0xc4, 0x35, 0x51, 0x11, 0xc1, 0x4e, 0x4e, 0x44, 0xf8,
  0xc5, 0x6d, 0x9b, 0x81, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x71, 0x4d,
  0x54, 0x44, 0xb0, 0x93, 0x13, 0x11, 0x3e, 0x72, 0xdb, 0x16, 0x20, 0x0d,
  0x97, 0xef, 0x3c, 0xfe, 0x74, 0x44, 0x04, 0x30, 0x88, 0x83, 0x8f, 0xdc,
  0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9,
  0xc5, 0x6d, 0x1b, 0x00, 0xc1, 0x00, 0x48, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7a, 0x54, 0x40, 0x3d, 0x7e, 0xc9, 0xd1, 0xa0, 0x15, 0xd2, 0x31, 0x3d,
  0x09, 0xb6, 0xb6, 0xaa, 0x44, 0x58, 0x49, 0x4c, 0xa4, 0x23, 0x00, 0x00,
  0x63, 0x00, 0x05, 0x00, 0xe9, 0x08, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x8c, 0x23, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xe0, 0x08, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62,
  0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xec, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a,
  0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0xc3, 0x30, 0x10, 0x31, 0x03, 0x70, 0xd3,
  0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0xbf, 0x12, 0xd2, 0x4a, 0x4c, 0x7e,
  0x71, 0xdb, 0xa8, 0x30, 0x0c, 0xc3, 0x18, 0xe6, 0x08, 0x10, 0x42, 0xee,
  0x19, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0x43, 0xa0, 0x19, 0x16, 0x02,
  0x05, 0x49, 0x51, 0x8e, 0x41, 0x19, 0x86, 0x61, 0x18, 0x86, 0x81, 0x96,
  0xb2, 0x00, 0x83, 0x32, 0x0c, 0x83, 0x61, 0x18, 0x06, 0x42, 0x4d, 0x19,
  0x8c, 0xc1, 0xa0, 0xa7, 0x20, 0xc6, 0x60, 0x18, 0x86, 0x61, 0x18, 0x14,
  0x95, 0x05, 0x18, 0x94, 0x61, 0x18, 0x86, 0x61, 0x18, 0x10, 0x9a, 0x4a,
  0x61, 0x0c, 0x86, 0x61, 0x50, 0x55, 0x98, 0x63, 0x50, 0x14, 0xc3, 0x30,
  0x8c, 0x61, 0x18, 0x0c, 0xba, 0x0a, 0x61, 0x0c, 0x86, 0x41, 0xd9, 0x51,
  0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x3e, 0xb7, 0x51, 0xc5, 0x4a, 0x4c,
  0x7e, 0x71, 0xdb, 0x88, 0x30, 0x0c, 0xc3, 0x28, 0xc4, 0x36, 0x28, 0x03,
  0x71, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15,
  0x2b, 0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x62, 0x18, 0x86, 0xa1, 0x10, 0xde,
  0xa0, 0x0c, 0xf4, 0xcd, 0x11, 0x04, 0xc5, 0x50, 0x06, 0x64, 0x18, 0x42,
  0x12, 0x07, 0x02, 0x86, 0x11, 0x08, 0x63, 0xa6, 0x36, 0x18, 0x07, 0x76,
  0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a,
  0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72,
  0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77,
  0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f,
  0xd0, 0x03, 0x3d, 0x68, 0x87, 0x74, 0x80, 0x87, 0x79, 0xf8, 0x05, 0x7a,
  0xc8, 0x07, 0x78, 0x28, 0x07, 0x14, 0x0c, 0x33, 0x89, 0xc1, 0x38, 0xb0,
  0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0,
  0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94,
  0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc,
  0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01, 0x18, 0xf8,
  0x01, 0x12, 0x4a, 0x93, 0xce, 0x99, 0xc2, 0x60, 0x1c, 0xd8, 0x21, 0x1c,
  0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca, 0x01, 0x1f, 0xe8, 0xa1, 0x1e,
  0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d,
  0xc2, 0x81, 0x1e, 0xfc, 0x40, 0x0f, 0xf4, 0xa0, 0x1d, 0xd2, 0x01, 0x1e,
  0xe6, 0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1, 0x1c, 0x50, 0x30, 0xcc,
  0x64, 0x8d, 0x03, 0x3b, 0x84, 0xc3, 0x3c, 0xcc, 0x83, 0x1b, 0xd0, 0x42,
  0x39, 0xe0, 0x03, 0x3d, 0xd4, 0x83, 0x3c, 0x94, 0x83, 0x1c, 0x90, 0x02,
  0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x83, 0x1f, 0x20, 0xc1,
  0x48, 0x49, 0x9d, 0x89, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6,
  0xc1, 0x0d, 0x64, 0xe1, 0x16, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea,
  0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6,
  0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2,
  0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x50,
  0x50, 0x12, 0x3b, 0xd3, 0x37, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f,
  0x6e, 0x20, 0x0b, 0xb7, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f,
  0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x50, 0x0f, 0xee, 0x30, 0x0f,
  0xe9, 0x70, 0x0e, 0xee, 0x50, 0x0e, 0xe4, 0x00, 0x06, 0xe9, 0xe0, 0x0e,
  0xf4, 0xe0, 0x07, 0x28, 0x18, 0xc8, 0x4d, 0x82, 0xf2, 0x2c, 0x61, 0x01,
  0x24, 0xc9, 0x67, 0x80, 0x29, 0x42, 0x2e, 0xbf, 0x58, 0x1c, 0x60, 0xf2,
  0x71, 0x1f, 0x47, 0x01, 0x3c, 0x8c, 0x30, 0x18, 0xc3, 0x08, 0x82, 0x31,
  0x8c, 0x20, 0x0c, 0xf7, 0x18, 0x8b, 0x13, 0x00, 0x0b, 0xe7, 0x34, 0xd2,
  0x04, 0x34, 0x93, 0x84, 0xd0, 0x20, 0x8e, 0xcb, 0xb2, 0x2c, 0x65, 0x63,
  0x9e, 0xe7, 0x79, 0x9e, 0xe7, 0x99, 0x36, 0x0c, 0xc3, 0x30, 0x0c, 0xc3,
  0x30, 0x0c, 0xc3, 0x30, 0x0c, 0xc3, 0x30, 0x86, 0x61, 0x18, 0x86, 0x92,
  0xea, 0x9b, 0xa4, 0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01, 0xe6, 0x59, 0x88,
  0x88, 0x9d, 0x80, 0x89, 0x40, 0xc1, 0x40, 0xf7, 0x1c, 0x01, 0x28, 0x4c,
  0x01, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xae, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xd0,
  0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x6d, 0x90,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x43,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x67, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xb9, 0x80, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x01, 0x01, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x87, 0x03, 0x02,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xcf, 0x07,
  0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e,
  0x31, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x2c, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x1a,
  0x4a, 0xa0, 0x0c, 0x8a, 0x61, 0x04, 0xa0, 0x08, 0x4a, 0xa2, 0x10, 0x4a,
  0xa1, 0x00, 0x0d, 0x0a, 0x82, 0xc2, 0x11, 0x00, 0xca, 0x0b, 0x90, 0x10,
  0x10, 0x81, 0xd6, 0x19, 0x00, 0x6a, 0x67, 0x00, 0xe8, 0x9d, 0x01, 0x20,
  0x7b, 0x06, 0x80, 0xf0, 0x19, 0x00, 0x42, 0x67, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1,
  0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41,
  0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a,
  0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9,
  0x10, 0x04, 0x13, 0x84, 0xa1, 0x99, 0x20, 0x0c, 0xce, 0x06, 0x61, 0x20,
  0x26, 0x08, 0xc3, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x63, 0x73, 0x1b, 0x06,
  0xc4, 0x20, 0x26, 0x08, 0x03, 0x34, 0x41, 0x40, 0x03, 0x8f, 0xc0, 0x04,
  0x61, 0x88, 0x26, 0x08, 0x83, 0xb4, 0x41, 0x50, 0x9c, 0x0d, 0x89, 0xb2,
  0x30, 0x8a, 0x32, 0x34, 0xca, 0xb3, 0x21, 0x19, 0x16, 0x46, 0x19, 0x86,
  0x46, 0x79, 0x36, 0x24, 0xcd, 0xc2, 0x28, 0xcd, 0xd0, 0x28, 0xcf, 0x04,
  0x61, 0x0d, 0xb2, 0x0d, 0x09, 0x31, 0x31, 0x0a, 0x31, 0x34, 0xca, 0x33,
  0x41, 0x18, 0xa6, 0x0d, 0x49, 0xb5, 0x30, 0x4a, 0x35, 0x34, 0xca, 0xb3,
  0xa1, 0x80, 0x22, 0x89, 0xb2, 0x26, 0x08, 0x6d, 0xa0, 0x4d, 0x10, 0xc2,
  0xe0, 0xda, 0xb0, 0x28, 0x18, 0xa3, 0x28, 0x43, 0x93, 0x65, 0xd9, 0xb3,
  0x61, 0x19, 0x30, 0x46, 0x19, 0x86, 0x26, 0xcb, 0xb2, 0x67, 0x82, 0xf0,
  0x06, 0xdb, 0x04, 0x61, 0xa0, 0x36, 0x08, 0x4a, 0xb7, 0x61, 0x69, 0x38,
  0x46, 0x69, 0x86, 0x26, 0xcb, 0x32, 0x6f, 0xc3, 0x42, 0x60, 0x8c, 0x42,
  0x0c, 0x4d, 0x96, 0x65, 0xcf, 0x06, 0x42, 0xdb, 0x3e, 0x30, 0x98, 0x20,
  0xd8, 0x01, 0x37, 0x41, 0x18, 0xaa, 0x0d, 0x88, 0x22, 0x06, 0x8c, 0xa2,
  0x0c, 0x63, 0x00, 0x6c, 0x08, 0xc8, 0x60, 0x82, 0x80, 0x07, 0xdd, 0x06,
  0x44, 0x31, 0x03, 0x46, 0x51, 0x06, 0x05, 0xd8, 0x10, 0x9c, 0xc1, 0x06,
  0xe2, 0x0a, 0x83, 0x32, 0x40, 0x83, 0x09, 0x82, 0x00, 0x90, 0x68, 0x0b,
  0x4b, 0x73, 0x9b, 0x20, 0xe4, 0x01, 0x36, 0x41, 0x18, 0xac, 0x0d, 0x43,
  0x1b, 0xb4, 0xc1, 0xb0, 0x81, 0x50, 0xd8, 0xa0, 0x72, 0x83, 0x0d, 0x85,
  0x1a, 0xac, 0x01, 0x90, 0x06, 0x6f, 0x40, 0x8a, 0x0c, 0xcf, 0x65, 0xec,
  0xcd, 0x8d, 0x4e, 0xee, 0x8d, 0xcd, 0x8c, 0xed, 0xed, 0xce, 0x05, 0x2d,
  0xcd, 0x8d, 0x6e, 0x6e, 0xc5, 0x20, 0x07, 0x71, 0x30, 0x54, 0x61, 0x63,
  0xb3, 0x6b, 0x73, 0x49, 0x23, 0x2b, 0x73, 0xa3, 0x9b, 0x12, 0x04, 0x55,
  0xc8, 0xf0, 0x5c, 0xec, 0xca, 0xe4, 0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04,
  0x44, 0x13, 0x32, 0x3c, 0x17, 0xbb, 0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29,
  0x81, 0x51, 0x87, 0x0c, 0xcf, 0x65, 0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae,
  0xe9, 0x8d, 0xac, 0x8c, 0x6d, 0x4a, 0x80, 0x94, 0x21, 0xc3, 0x73, 0x91,
  0x2b, 0x9b, 0x7b, 0xab, 0x93, 0x1b, 0x2b, 0x9b, 0x9b, 0x12, 0xa0, 0x41,
  0x1d, 0x32, 0x3c, 0x97, 0x32, 0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34,
  0x37, 0xba, 0xb9, 0x29, 0xc1, 0x1b, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x5d, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd5, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe3, 0xf0,
  0x0e, 0xee, 0x40, 0x0f, 0xf2, 0xf0, 0x0e, 0xec, 0x60, 0x0e, 0xec, 0xf0,
  0x0e, 0xf7, 0xe0, 0x06, 0xe8, 0x90, 0x0e, 0xee, 0x40, 0x0f, 0xf3, 0x30,
  0x43, 0x81, 0xd8, 0x81, 0x1d, 0xec, 0xa1, 0x1d, 0xdc, 0x80, 0x1d, 0xde,
  0xe1, 0x1d, 0xe0, 0x61, 0x46, 0x14, 0x91, 0x03, 0x3e, 0xb8, 0x01, 0x39,
  0x88, 0xc3, 0x39, 0xb8, 0x81, 0x3d, 0x84, 0x83, 0x3c, 0xb0, 0x43, 0x38,
  0xe4, 0xc3, 0x3b, 0xd4, 0x03, 0x3d, 0xcc, 0x60, 0x24, 0x72, 0xc0, 0x07,
  0x37, 0x10, 0x07, 0x79, 0x28, 0x87, 0x70, 0x58, 0x07, 0x37, 0x10, 0x07,
  0x79, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
  0x96, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9,
  0xc5, 0x6d, 0x9b, 0xc2, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15,
  0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc,
  0xb6, 0x2d, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51, 0x10,
  0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc8, 0x6d, 0x1b,
  0x83, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02,
  0xcd, 0xb0, 0x10, 0x56, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0, 0x4c,
  0xb7, 0x5f, 0xdc, 0xb6, 0x21, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01,
  0xcc, 0xb3, 0x10, 0x25, 0x51, 0x11, 0x8b, 0x5f, 0xdc, 0xb6, 0x1d, 0x48,
  0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17,
  0xb7, 0x6d, 0x02, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0xc4, 0x35, 0x51,
  0x11, 0x51, 0x3a, 0xc0, 0xe0, 0x17, 0xb7, 0x6d, 0x03, 0xd6, 0x70, 0xf9,
  0xce, 0xe3, 0x4f, 0xc4, 0x35, 0x51, 0x11, 0xc1, 0x4e, 0x4e, 0x44, 0xf8,
  0xc5, 0x6d, 0x9b, 0x81, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x71, 0x4d,
  0x54, 0x44, 0xb0, 0x93, 0x13, 0x11, 0x3e, 0x72, 0xdb, 0x16, 0x20, 0x0d,
  0x97, 0xef, 0x3c, 0xfe, 0x74, 0x44, 0x04, 0x30, 0x88, 0x83, 0x8f, 0xdc,
  0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9,
  0xc5, 0x6d, 0x1b, 0x00, 0xc1, 0x00, 0x48, 0x03, 0x61, 0x20, 0x00, 0x00,
  0xb0, 0x06, 0x00, 0x00, 0x13, 0x04, 0x44, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x34, 0x94, 0xc3, 0x0c, 0x40, 0xd9, 0x15, 0x5f,
  0xb9, 0x95, 0x5c, 0xc9, 0x14, 0x57, 0xc1, 0x14, 0x61, 0x40, 0x19, 0x06,
  0x94, 0x48, 0xa9, 0x94, 0x6e, 0x40, 0x71, 0x14, 0x49, 0xb9, 0x94, 0x51,
  0x69, 0x94, 0x47, 0x81, 0x14, 0x4b, 0xa1, 0x94, 0x49, 0x21, 0x11, 0x52,
  0x04, 0x65, 0x50, 0x02, 0xe5, 0x31, 0x02, 0x40, 0xc6, 0x18, 0x01, 0x08,
  0x82, 0x20, 0x09, 0x06, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf0, 0x37, 0x46,
  0x70, 0xcf, 0xef, 0x7f, 0xff, 0xc2, 0x18, 0xc1, 0xda, 0xc2, 0x20, 0xfe,
  0x0b, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x8c, 0x11, 0x80, 0x20,
  0x08, 0xc2, 0x60, 0x30, 0x46, 0xe0, 0x8b, 0x34, 0x0a, 0x7f, 0x63, 0x04,
  0x20, 0x08, 0x82, 0x31, 0x18, 0x8c, 0x11, 0xcc, 0x39, 0x6b, 0xde, 0xdf,
  0x18, 0x41, 0x6b, 0xce, 0x39, 0xed, 0x8d, 0x11, 0x98, 0xe4, 0x2b, 0xde,
  0xdf, 0x18, 0x41, 0x48, 0x82, 0x21, 0xfc, 0x8d, 0x11, 0x84, 0xa1, 0x48,
  0xa2, 0xde, 0x18, 0x01, 0x08, 0x82, 0xfc, 0x1b, 0x06, 0x63, 0x04, 0x7d,
  0xdf, 0xb2, 0xb8, 0x36, 0x46, 0x70, 0xfb, 0xec, 0x5e, 0x7f, 0x63, 0x04,
  0x20, 0x08, 0x82, 0xf0, 0x2f, 0x8c, 0x11, 0xe8, 0xac, 0x39, 0xa7, 0xbf,
  0x30, 0x46, 0x10, 0xb2, 0xa1, 0x8a, 0x7e, 0x63, 0x04, 0x3a, 0x6b, 0xce,
  0xe1, 0x37, 0x46, 0x10, 0x92, 0x60, 0x88, 0x77, 0x63, 0x04, 0x20, 0x08,
  0xe2, 0x67, 0x18, 0x8c, 0x11, 0xac, 0xb5, 0x5a, 0xcb, 0xdf, 0x18, 0xc1,
  0x5a, 0xab, 0xb5, 0xfe, 0x8d, 0x11, 0xf4, 0x7d, 0xcb, 0x82, 0xdb, 0x18,
  0x01, 0x08, 0x82, 0xa0, 0x0a, 0x06, 0x63, 0x04, 0x6b, 0xad, 0xd6, 0xea,
  0x37, 0x46, 0x00, 0x82, 0x20, 0x48, 0x7f, 0x63, 0x04, 0x7b, 0x89, 0xff,
  0xf9, 0x37, 0x46, 0x10, 0x92, 0x60, 0x08, 0x7a, 0x63, 0x04, 0xef, 0xff,
  0xff, 0xf7, 0x37, 0x46, 0x30, 0x9f, 0xa1, 0xba, 0x7f, 0x63, 0x04, 0xfd,
  0x7a, 0x82, 0xe9, 0x34, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xc1, 0x18,
  0x01, 0x08, 0x82, 0x20, 0xfe, 0x0b, 0x33, 0x00, 0x63, 0x04, 0x20, 0x08,
  0x82, 0xf8, 0x37, 0x02, 0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x20, 0x06, 0xb7, 0xf0, 0x07, 0x69, 0x50, 0x0b, 0xb5, 0xc0,
  0x0a, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x20, 0x06, 0xb8, 0x00, 0x0a,
  0x6a, 0x30, 0x0b, 0xb3, 0xd0, 0x0a, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x20, 0x06, 0xb9, 0x10, 0x0a, 0x6b, 0x80, 0x0b, 0xb8, 0xe0, 0x0a, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x20, 0x06, 0xba, 0x20, 0x0a, 0x6c, 0x60,
  0x0b, 0xb6, 0xf0, 0x0a, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x20, 0x06,
  0xbb, 0x30, 0x0a, 0x6b, 0x40, 0x0b, 0xb4, 0x00, 0x0b, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x20, 0x06, 0xbc, 0x40, 0x0a, 0x6c, 0xa0, 0x0b, 0xba,
  0x10, 0x0b, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x20, 0x06, 0xbd, 0x50,
  0x0a, 0x6d, 0x80, 0x0b, 0xb8, 0x20, 0x0b, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x20, 0x06, 0xbe, 0x60, 0x0a, 0x6e, 0xd0, 0x0b, 0xbd, 0x30, 0x0b,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x20, 0x06, 0xbf, 0x70, 0x0a, 0x6f,
  0xb0, 0x0b, 0xbb, 0x40, 0x0b, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x20,
  0x06, 0xe0, 0x80, 0x0a, 0x73, 0xc0, 0x0b, 0xbc, 0x50, 0x0b, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x20, 0x06, 0xe1, 0x90, 0x0a, 0x75, 0xd0, 0x0b,
  0xbd, 0x60, 0x0b, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x40, 0xb4, 0x83,
  0x28, 0xf8, 0xc2, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x10, 0xee, 0x30,
  0x0a, 0xe2, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x5f, 0x39, 0xbc,
  0xc2, 0x60, 0x0a, 0x37, 0x18, 0x76, 0x83, 0x61, 0x26, 0xd4, 0x01, 0x7c,
  0x4c, 0xb0, 0x03, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xb7,
  0x0e, 0xb4, 0x80, 0xa0, 0xc2, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0x81,
  0x09, 0x85, 0x7c, 0x4c, 0x28, 0xe4, 0x33, 0x62, 0xd0, 0x00, 0x20, 0x08,
  0x06, 0x0b, 0x3e, 0xc8, 0x82, 0xa4, 0x0e, 0xcc, 0xa2, 0x0b, 0xba, 0xa0,
  0x0b, 0xba, 0x30, 0x9a, 0x10, 0x00, 0x16, 0xe8, 0x81, 0x7c, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0x80, 0x9b, 0x07, 0x5e, 0x80, 0x5e, 0x61, 0x34,
  0x21, 0x08, 0x86, 0x23, 0x86, 0x40, 0xf8, 0x66, 0x19, 0x02, 0x21, 0x18,
  0x31, 0x70, 0x00, 0x10, 0x04, 0x83, 0xa6, 0x1f, 0x6e, 0x41, 0x93, 0x22,
  0x70, 0xc0, 0x03, 0x3c, 0xc0, 0x83, 0x37, 0x28, 0x85, 0x59, 0x82, 0x61,
  0x34, 0x01, 0x0a, 0x2a, 0x90, 0x60, 0x34, 0x41, 0x02, 0x2a, 0xa8, 0x60,
  0xc4, 0xa0, 0x01, 0x40, 0x10, 0x0c, 0x16, 0x91, 0xe0, 0x85, 0x8c, 0x1e,
  0x82, 0x81, 0x1c, 0xc8, 0x81, 0x1c, 0xc8, 0x61, 0x34, 0x21, 0x00, 0x46,
  0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0xc1, 0x88, 0x35,
  0x90, 0x8f, 0x11, 0x6c, 0x20, 0x1f, 0x13, 0xd8, 0x00, 0x3e, 0x26, 0xb4,
  0x01, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x49, 0x09, 0x7f,
  0x10, 0xac, 0x0d, 0x82, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1,
  0xb3, 0x12, 0x20, 0x31, 0x98, 0x10, 0xc4, 0xc7, 0x60, 0x21, 0x88, 0xcf,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x2e, 0x31, 0x0f, 0xc1, 0x70,
  0x04, 0x12, 0x07, 0xc4, 0x37, 0x1c, 0x81, 0xc8, 0x01, 0xf1, 0x4d, 0x37,
  0xd8, 0x01, 0x1d, 0x08, 0xd3, 0x0d, 0x77, 0x50, 0x07, 0x82, 0x09, 0x85,
  0x7c, 0x4c, 0x30, 0xe4, 0x63, 0x8e, 0x10, 0x1f, 0x73, 0x84, 0xf8, 0x8c,
  0x18, 0x2c, 0x00, 0x08, 0x82, 0x41, 0x64, 0x13, 0xf8, 0x20, 0x04, 0x8b,
  0x10, 0x2c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xe0, 0xc4, 0x3d,
  0x04, 0x46, 0x04, 0xf2, 0x31, 0x42, 0x90, 0x8f, 0x0d, 0x8f, 0x7c, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x80, 0xb3, 0x89, 0x7f, 0x98, 0x83, 0x96,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xe0, 0x74, 0x62, 0x24, 0xee, 0x00, 0x26,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x38, 0x9f, 0x38, 0x89, 0x3d, 0xc8, 0x89,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x67,
  0x91, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0x66, 0x71, 0x12,
  0xcb, 0x13, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x75, 0x16, 0x28,
  0xb1, 0x3c, 0x81, 0x29, 0x92, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xa0, 0x4a, 0x0b, 0x95, 0x50, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x2a, 0xb5, 0x58, 0x09, 0x45, 0x0a, 0x2c, 0xa9, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x15, 0x5b, 0xb4, 0x44, 0x52, 0x05, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xb5, 0x85, 0x4b, 0x24, 0x55, 0x30,
  0x62, 0xd0, 0x00, 0x20, 0x08, 0x06, 0xcb, 0x5c, 0xb4, 0xc4, 0x2a, 0x94,
  0xc5, 0x29, 0x98, 0x42, 0x4d, 0xd4, 0x44, 0x4d, 0xd4, 0xc4, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0x70, 0x0e, 0xf2,
  0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x0e, 0x2e, 0x72, 0xa2, 0x15,
  0x60, 0x62, 0x34, 0x21, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x80,
  0x93, 0x8b, 0x9d, 0x78, 0x05, 0xb3, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x30, 0x21, 0x15, 0xe4,
  0x63, 0x42, 0x2a, 0xc8, 0xc7, 0x04, 0x03, 0x3e, 0x26, 0x18, 0xf0, 0x19,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x27, 0x34, 0xec, 0x42, 0xb1, 0x72,
  0x08, 0xe2, 0x63, 0xc1, 0x2a, 0xc8, 0xc7, 0x82, 0x06, 0x3e, 0x16, 0x18,
  0xf2, 0x31, 0xc1, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x70,
  0xa1, 0xa1, 0x16, 0xbe, 0xc0, 0x13, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0xc3, 0x11, 0x95, 0x3b,
  0x04, 0x9f, 0xc1, 0x04, 0x12, 0x1f, 0x8b, 0x09, 0x24, 0x3e, 0x26, 0x13,
  0xb7, 0x10, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x88, 0x5e, 0x23,
  0x2e, 0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x9e, 0xd8, 0x80, 0x8b, 0xc0, 0x82, 0x42, 0x3e, 0x26, 0x14, 0xf2, 0xb1,
  0xa1, 0x90, 0xcf, 0x74, 0xc3, 0x70, 0x0f, 0xc9, 0x74, 0xc3, 0x80, 0x0f,
  0xca, 0x74, 0xc3, 0xc0, 0x0f, 0xcb, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x44, 0xb7, 0x91, 0x17, 0x6e, 0xb0, 0x06, 0x68, 0x30, 0x08, 0xc1, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xb9, 0xe1, 0x1a, 0x81, 0x85, 0x02,
  0x58, 0xc8, 0xc7, 0x42, 0x21, 0x2c, 0xe4, 0x63, 0xa1, 0x20, 0x16, 0xf2,
  0xb1, 0x61, 0x2c, 0xe0, 0x63, 0x03, 0x59, 0xc0, 0xc7, 0x86, 0xb2, 0x80,
  0xcf, 0x88, 0x81, 0x03, 0x80, 0x20, 0x18, 0x34, 0xe1, 0xb1, 0x17, 0xfe,
  0x60, 0x0f, 0xf5, 0x40, 0x1a, 0x83, 0x10, 0xf4, 0x42, 0x5a, 0x98, 0x1b,
  0xec, 0x04, 0x7c, 0xac, 0x0d, 0x78, 0x02, 0x3e, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xf0, 0x88, 0xc7, 0x69, 0x08, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0xf0, 0x8c, 0x07, 0x6a, 0x08, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xf0, 0x90, 0x47, 0x6a, 0x80, 0x83, 0x0d, 0x3f, 0x21, 0x1f, 0x1b, 0xc0,
  0x42, 0x3e, 0x36, 0xb8, 0x85, 0x7c, 0x6c, 0x70, 0x0b, 0xf8, 0xd8, 0xf0,
  0x16, 0xf0, 0xb1, 0x01, 0x2e, 0xe0, 0x73, 0xc3, 0x30, 0x37, 0x0c, 0x73,
  0xc3, 0x30, 0x25, 0xcc, 0xc6, 0x95, 0x60, 0x1a, 0x57, 0x42, 0xb1, 0x15,
  0x08, 0x3b, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06, 0x13, 0x7c, 0xb4, 0x86,
  0x4c, 0xa0, 0xc4, 0x49, 0xd8, 0x46, 0x10, 0x04, 0xc1, 0x5e, 0x8c, 0x18,
  0x34, 0x00, 0x08, 0x82, 0xc1, 0x42, 0x1f, 0xae, 0xd1, 0x12, 0xe6, 0x81,
  0x12, 0x27, 0x61, 0x1b, 0xb6, 0x61, 0x1b, 0xb6, 0x31, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62,
  0xd0, 0x00, 0x20, 0x08, 0x06, 0x4b, 0x7e, 0xcc, 0x06, 0x4d, 0xac, 0x47,
  0x4b, 0xb0, 0xc4, 0x6e, 0xec, 0xc6, 0x6e, 0xec, 0xc6, 0x68, 0x42, 0x00,
  0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0x70, 0xf6, 0xf1, 0x1b, 0x33, 0xb1, 0x1a,
  0xa3, 0x09, 0x01, 0x60, 0x01, 0x69, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xb8, 0xfc, 0x10, 0x0f, 0x9b, 0x88, 0x8f, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0x48, 0x24, 0x3f, 0x58, 0xc2, 0x02,
  0x42, 0x3e, 0x16, 0x18, 0xf0, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83,
  0xe7, 0x44, 0xc0, 0x83, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x07,
  0x45, 0xda, 0x23, 0xb0, 0xc3, 0x2d, 0xe0, 0x63, 0x42, 0x20, 0x1f, 0x0b,
  0xdc, 0x02, 0x3e, 0x66, 0x58, 0xf2, 0xb1, 0x40, 0x90, 0xcf, 0x88, 0xc1,
  0x01, 0x80, 0x20, 0x18, 0x70, 0x28, 0x12, 0x1f, 0x65, 0x81, 0x1e, 0xa3,
  0x09, 0xc1, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x9c, 0x8a, 0xcc,
  0xc7, 0x59, 0xa4, 0xc7, 0x68, 0x42, 0x20, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0xc1, 0x23, 0x23, 0x27, 0x32, 0x98, 0x5d, 0xec, 0x44, 0x7c, 0x4c,
  0x08, 0xe4, 0x63, 0x41, 0x4f, 0xc0, 0xc7, 0x82, 0x42, 0x3e, 0xa6, 0x04,
  0xf4, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x07, 0x47, 0xfa, 0x23,
  0x30, 0xbe, 0x08, 0xe2, 0x63, 0xc1, 0x39, 0xc8, 0xc7, 0x82, 0x01, 0x3e,
  0xa3, 0x09, 0x4c, 0x60, 0x81, 0x6b, 0xc8, 0xc7, 0x82, 0xdb, 0x80, 0x8f,
  0x0d, 0xaf, 0x21, 0x1f, 0x0b, 0x5e, 0x03, 0x3e, 0xc6, 0x0e, 0x43, 0x7c,
  0x4c, 0x20, 0xe2, 0x63, 0x42, 0x40, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x78, 0xc8, 0x24, 0x45, 0x02, 0x43, 0x8d, 0x20, 0x3e, 0x96, 0x1a,
  0xad, 0x10, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xce, 0x84,
  0x45, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xd0, 0xa4, 0x3f,
  0x02, 0x0b, 0x6e, 0x43, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0,
  0xa8, 0xc9, 0x88, 0x04, 0xe6, 0x1a, 0x41, 0x7c, 0x2c, 0x38, 0xe4, 0x63,
  0xb0, 0x11, 0xc4, 0xc7, 0x82, 0x7c, 0x90, 0x8f, 0x05, 0xb2, 0x01, 0x1f,
  0x9b, 0x8d, 0x80, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xc0, 0xad,
  0x09, 0x8d, 0xa0, 0xc6, 0x7f, 0x8c, 0x26, 0x04, 0x80, 0x1d, 0xb9, 0x21,
  0x1f, 0x0b, 0x6e, 0x03, 0x3e, 0xa6, 0x89, 0x87, 0x7c, 0x2c, 0x20, 0xe4,
  0x63, 0xc1, 0x20, 0x1f, 0x0b, 0x76, 0x03, 0x3e, 0xc3, 0x11, 0xc7, 0x6e,
  0x38, 0xdf, 0x05, 0x46, 0x59, 0x10, 0x1e, 0xf2, 0xb1, 0x80, 0x90, 0xcf,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x70, 0x77, 0x02, 0x26, 0xb4, 0x31,
  0x23, 0xa3, 0x09, 0x81, 0x60, 0xcf, 0x7a, 0xc8, 0xc7, 0xc6, 0x23, 0x88,
  0x8f, 0x0d, 0x6b, 0x20, 0x1f, 0x13, 0x02, 0xfa, 0x8c, 0x18, 0x2c, 0x00,
  0x08, 0x82, 0x41, 0x24, 0x2a, 0x64, 0x92, 0x13, 0x36, 0x31, 0x13, 0xfe,
  0xd0, 0x0f, 0xab, 0x31, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0f, 0xa9,
  0xa4, 0x89, 0x29, 0x18, 0x7a, 0x04, 0xf1, 0xb1, 0xc0, 0x92, 0x8f, 0x05,
  0x03, 0x7c, 0x2c, 0x98, 0x0f, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x41, 0x46, 0x2a, 0x3d, 0x12, 0xcc, 0xc7, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x64, 0xa5, 0x72, 0x23, 0x5a, 0x7b, 0x58, 0x40, 0x1f, 0xf2, 0xb1,
  0xa0, 0x44, 0xe0, 0x63, 0xf0, 0x11, 0xd0, 0xc7, 0x4c, 0xc2, 0x44, 0xe4,
  0x63, 0x25, 0x71, 0x22, 0xf2, 0xb1, 0x93, 0x38, 0x11, 0xf9, 0x98, 0x49,
  0xa0, 0x88, 0x7c, 0x4c, 0x20, 0xe2, 0x63, 0x02, 0x11, 0x9f, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xe0, 0x5c, 0xe5, 0x4e, 0xd6, 0xe3, 0x4c, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x6c, 0x2b, 0xe4, 0x63, 0xc1, 0x20,
  0x1f, 0xeb, 0x0c, 0xf9, 0x58, 0x40, 0xc8, 0xc7, 0x86, 0xf3, 0x80, 0x8f,
  0x09, 0xe7, 0x01, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xe0, 0x6e,
  0x05, 0x54, 0xe8, 0xe3, 0x4d, 0x46, 0x13, 0x02, 0x61, 0x34, 0x41, 0x18,
  0xac, 0x10, 0xe4, 0x63, 0x85, 0x20, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41,
  0x30, 0xb8, 0x7c, 0x85, 0x54, 0xfc, 0x43, 0x3f, 0x84, 0xc0, 0x44, 0x4c,
  0xc4, 0x56, 0x6c, 0xc5, 0x54, 0x48, 0x64, 0x34, 0x21, 0x00, 0x2c, 0x30,
  0x13, 0xf9, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0xc1, 0x15, 0x2e, 0xa7,
  0x02, 0x22, 0xfd, 0x51, 0x10, 0x29, 0x92, 0x22, 0xb9, 0x92, 0x2b, 0xa9,
  0x72, 0x22, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83,
  0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xc0, 0x91,
  0x4b, 0xab, 0x84, 0x08, 0xae, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x98, 0x40, 0xc9, 0xc7, 0x04,
  0x4a, 0x3e, 0x26, 0x18, 0xf0, 0x31, 0xc1, 0x80, 0x8f, 0xd9, 0x48, 0x38,
  0xc4, 0xc7, 0x02, 0x48, 0x3e, 0x16, 0x98, 0x03, 0x7c, 0x2c, 0x28, 0xe4,
  0x63, 0x42, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xe0, 0xe4,
  0x65, 0x57, 0x5e, 0x24, 0x55, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x4c, 0xd8, 0xe0, 0x63, 0xc2, 0x06, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41,
  0x30, 0xb8, 0xf2, 0xe5, 0x57, 0x6c, 0xa4, 0x46, 0x84, 0x20, 0x4c, 0xc2,
  0x24, 0x5e, 0xe2, 0x25, 0x5c, 0x7e, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x18, 0x6c, 0x38, 0x13, 0xf9, 0xd8, 0x80, 0x26,
  0xf2, 0x31, 0x01, 0x4d, 0xe0, 0x63, 0x42, 0x9a, 0xc0, 0x67, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x9e, 0x92, 0xd1, 0x17, 0xc1, 0xd2, 0x24, 0x88,
  0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x27, 0xc3, 0x2f, 0x83,
  0x09, 0x41, 0x7c, 0x8c, 0x55, 0x82, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0xc1, 0xa3, 0x32, 0xef, 0x12, 0x0c, 0x47, 0x20, 0x6d, 0x42, 0x7c,
  0xc3, 0x11, 0x88, 0x9b, 0x10, 0xdf, 0x74, 0x83, 0x9c, 0xc0, 0x89, 0x30,
  0xdd, 0x30, 0x27, 0x71, 0x22, 0x98, 0x50, 0xc8, 0xc7, 0x04, 0x43, 0x3e,
  0xe6, 0x08, 0xf1, 0x31, 0x47, 0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20,
  0x18, 0x44, 0x32, 0x43, 0x2f, 0x42, 0xb0, 0x08, 0xc1, 0x32, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x0f, 0xcd, 0xcc, 0x4b, 0x60, 0x44, 0x20, 0x1f,
  0x23, 0x04, 0xf9, 0xd8, 0xf0, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10,
  0x0c, 0xbe, 0x98, 0xd9, 0x97, 0x37, 0x41, 0x97, 0xd1, 0x84, 0x20, 0x18,
  0x6e, 0x08, 0x5c, 0x06, 0x0c, 0x86, 0x23, 0x6e, 0x64, 0x0b, 0xbe, 0x0b,
  0x8c, 0xb2, 0xc0, 0x57, 0xe4, 0x33, 0xdd, 0xf0, 0x2b, 0x01, 0x31, 0x62,
  0xb0, 0x00, 0x20, 0x08, 0x06, 0x91, 0xcf, 0x80, 0x4c, 0x7d, 0xc8, 0xc7,
  0x7b, 0xa4, 0x01, 0x1a, 0xec, 0xc1, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x44, 0x3f, 0x13, 0x32, 0x27, 0x62, 0x22, 0x25, 0xb2, 0x28, 0xc9, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x61, 0x63, 0x32, 0x81, 0x95, 0x4a,
  0x10, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xc6, 0x06, 0x65,
  0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xc8, 0x26, 0x64, 0x02,
  0x6b, 0x15, 0x5e, 0xa0, 0x8f, 0x05, 0x82, 0x7c, 0x0c, 0x21, 0x87, 0xf8,
  0x58, 0x60, 0x0e, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x27,
  0x6d, 0x7c, 0x26, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x47, 0x6d,
  0x7e, 0x86, 0x30, 0x01, 0x5e, 0xe0, 0x63, 0x42, 0xbc, 0xc0, 0xc7, 0x84,
  0x78, 0x91, 0x8f, 0x09, 0xf2, 0x22, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x78, 0xde, 0x86, 0x66, 0x84, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30,
  0x78, 0xe0, 0xa6, 0x66, 0x04, 0x13, 0x6e, 0x45, 0x3e, 0x26, 0xe0, 0x8a,
  0x7c, 0x4c, 0x5f, 0x84, 0xf8, 0xd8, 0xbe, 0x08, 0xf1, 0x31, 0x56, 0xf8,
  0x8b, 0xf8, 0x58, 0x90, 0x0e, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x83, 0xe7, 0x6e, 0xd8, 0x26, 0xb0, 0x20, 0x90, 0x8f, 0x05, 0xf9, 0x22,
  0x1f, 0x1b, 0x42, 0x46, 0x3e, 0x16, 0xf8, 0x0a, 0x7c, 0x2c, 0x18, 0xe0,
  0x63, 0xfc, 0x12, 0xd0, 0xc7, 0x02, 0x7e, 0x81, 0x4f, 0x41, 0x8f, 0x54,
  0x10, 0x88, 0x39, 0x63, 0x20, 0x1f, 0x0b, 0x1c, 0xf9, 0x58, 0x30, 0xc8,
  0xc7, 0x02, 0x43, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0x94,
  0x8e, 0xda, 0xa8, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xa6,
  0xb3, 0x36, 0xea, 0x30, 0x1c, 0x21, 0xb0, 0x43, 0xf0, 0x0d, 0x47, 0x08,
  0xec, 0x10, 0x7c, 0x25, 0x04, 0x3a, 0xdd, 0x60, 0xb0, 0x4b, 0x30, 0x1c,
  0x11, 0xb4, 0x8b, 0xf3, 0x4d, 0x37, 0x98, 0x83, 0xbb, 0x04, 0xd3, 0x0d,
  0xe6, 0xf0, 0x2e, 0xc2, 0x74, 0x83, 0x39, 0xc0, 0xcb, 0x30, 0xdd, 0x60,
  0x0e, 0xf1, 0x42, 0x98, 0x31, 0x2f, 0xf0, 0xb1, 0xe2, 0x90, 0x8f, 0x15,
  0x88, 0x7c, 0xac, 0x48, 0xe4, 0x63, 0x85, 0x22, 0x1f, 0x23, 0xc4, 0x03,
  0x3e, 0x46, 0x88, 0x07, 0x7c, 0x8c, 0x10, 0x0f, 0xf8, 0x18, 0x21, 0x1e,
  0xf0, 0x19, 0x31, 0x78, 0x00, 0x10, 0x04, 0x83, 0xab, 0x76, 0xf6, 0xc6,
  0x5e, 0xe2, 0x25, 0x1f, 0xf0, 0xa1, 0x5f, 0xfa, 0xa5, 0x75, 0x5a, 0xa7,
  0x6f, 0xf6, 0x65, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x46, 0x13, 0x88, 0xc1, 0x08, 0x4a, 0x3e, 0x46, 0x54, 0xf2, 0x31,
  0xc2, 0x92, 0x8f, 0x11, 0x97, 0x7c, 0x8c, 0x50, 0x0f, 0xf8, 0x18, 0xa1,
  0x1e, 0xf0, 0x31, 0x42, 0x3d, 0xe0, 0x63, 0x84, 0x7a, 0xc0, 0xc7, 0xd4,
  0xa2, 0x47, 0xe4, 0x63, 0x81, 0x4c, 0xc8, 0xc7, 0xd8, 0xa2, 0x47, 0xe4,
  0x63, 0xc1, 0x4c, 0xc8, 0xc7, 0x06, 0x7b, 0x81, 0x8f, 0x09, 0xf6, 0x02,
  0x1f, 0x13, 0x5c, 0x42, 0x3e, 0x26, 0xb8, 0x84, 0x7c, 0x46, 0x0c, 0x1e,
  0x00, 0x04, 0xc1, 0xe0, 0x52, 0x1f, 0xd8, 0x51, 0x19, 0x93, 0x11, 0x02,
  0x99, 0x91, 0x19, 0xf1, 0x11, 0x1f, 0xd9, 0x81, 0x99, 0xd1, 0x84, 0x00,
  0xb0, 0x40, 0x6e, 0xe4, 0x33, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0x57,
  0xfb, 0xcc, 0x0e, 0xcb, 0xa4, 0x4c, 0x41, 0xd4, 0x4c, 0xcd, 0x94, 0x4f,
  0xf9, 0xd4, 0xce, 0xcc, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c,
  0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x58, 0x4a, 0x30, 0xf2, 0xb1, 0x94,
  0x60, 0xe4, 0x63, 0x42, 0x4b, 0xc0, 0xc7, 0x84, 0x96, 0x80, 0x8f, 0x9d,
  0x84, 0x22, 0x1f, 0x0b, 0xd8, 0x03, 0x3e, 0x16, 0x10, 0xf2, 0x31, 0x81,
  0x90, 0x8f, 0x95, 0x84, 0x04, 0x1f, 0x2b, 0x09, 0x09, 0x3e, 0x23, 0x06,
  0x0f, 0x00, 0x82, 0x60, 0x70, 0xf1, 0x8f, 0xf8, 0xe4, 0x0c, 0xce, 0x08,
  0x01, 0xd9, 0x90, 0x0d, 0xfd, 0xd0, 0x0f, 0xf9, 0x88, 0xcd, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x30, 0xd8, 0xa0, 0x36, 0xf2,
  0xb1, 0x61, 0x6d, 0xe4, 0x63, 0xc2, 0xda, 0xc0, 0xc7, 0x04, 0xb6, 0x81,
  0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x28, 0xd4, 0x3f, 0x82,
  0xb1, 0x4d, 0x10, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0x54,
  0xe8, 0x7f, 0x06, 0x13, 0x82, 0xf8, 0xd8, 0xeb, 0x04, 0xf1, 0x19, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x83, 0xa7, 0x85, 0xe4, 0x27, 0x18, 0x8e, 0x40,
  0xe0, 0x86, 0xf8, 0x86, 0x23, 0x90, 0xb8, 0x21, 0xbe, 0xe9, 0x86, 0xba,
  0x99, 0x1b, 0x61, 0xba, 0xc1, 0x6e, 0xe8, 0x46, 0x30, 0xa1, 0x90, 0x8f,
  0x09, 0x86, 0x7c, 0xcc, 0x11, 0xe2, 0x63, 0x8e, 0x10, 0x9f, 0x11, 0x83,
  0x05, 0x00, 0x41, 0x30, 0x88, 0x6a, 0xe8, 0x7e, 0x84, 0x60, 0x11, 0x82,
  0x65, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9e, 0x1b, 0xb2, 0x9f, 0xc0,
  0x88, 0x40, 0x3e, 0x46, 0x08, 0xf2, 0xb1, 0xe1, 0x91, 0xcf, 0x70, 0xc4,
  0xcd, 0x60, 0xc1, 0x77, 0x81, 0x51, 0x16, 0xf8, 0x8e, 0x7c, 0xa6, 0x1b,
  0x7e, 0x27, 0x20, 0x89, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x88, 0x7c,
  0x08, 0x84, 0xea, 0x45, 0x5e, 0xde, 0x65, 0x0c, 0xc4, 0xe0, 0x0d, 0x46,
  0x0c, 0x16, 0x00, 0x04, 0xc1, 0x20, 0xfa, 0xa1, 0x10, 0x3a, 0x19, 0x93,
  0x29, 0x19, 0xe4, 0x30, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x09,
  0x23, 0x13, 0x0a, 0xac, 0x74, 0x82, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0xc1, 0x33, 0x46, 0x28, 0x14, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0xc1, 0x43, 0x46, 0x21, 0x14, 0x18, 0x48, 0x04, 0xf2, 0xb1, 0x63, 0x3c,
  0xe2, 0x63, 0x41, 0x79, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x1e, 0x34, 0xea, 0xa1, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9e,
  0x34, 0xf2, 0x21, 0xc2, 0x84, 0xf7, 0x81, 0x8f, 0x09, 0xf0, 0x03, 0x1f,
  0x13, 0xe0, 0x47, 0x3e, 0x26, 0xc4, 0x8f, 0x7c, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0xe0, 0x71, 0xa3, 0x19, 0x12, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0xe0, 0x79, 0x23, 0x1a, 0x12, 0x4c, 0xb0, 0x1d, 0xf9, 0x98, 0x70,
  0x3b, 0xf2, 0xb1, 0xfc, 0x11, 0xe2, 0x63, 0xfa, 0x23, 0xc4, 0xc7, 0xfe,
  0xc0, 0x4f, 0xe2, 0x63, 0x01, 0x7a, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x1e, 0x3b, 0x5a, 0xa3, 0xc0, 0x82, 0x40, 0x3e, 0x16, 0xe0,
  0x8f, 0x7c, 0x6c, 0x00, 0x21, 0xf9, 0x58, 0xd0, 0x3b, 0xf0, 0xb1, 0x60,
  0x80, 0x8f, 0xed, 0x4f, 0x40, 0x1f, 0x0b, 0xf6, 0x07, 0x3e, 0x05, 0x3d,
  0x52, 0x41, 0x20, 0xe6, 0x88, 0x81, 0x7c, 0x2c, 0x70, 0xe4, 0x63, 0xc1,
  0x20, 0x1f, 0x0b, 0x0c, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1,
  0x43, 0x4a, 0x69, 0xa4, 0x0b, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0,
  0x94, 0x92, 0x1a, 0xe9, 0xc2, 0x70, 0x84, 0xc0, 0x0b, 0xc1, 0x37, 0x1c,
  0x21, 0xf0, 0x42, 0xf0, 0x95, 0x10, 0xe8, 0x74, 0x83, 0xb1, 0x3e, 0xc1,
  0x70, 0x44, 0xc0, 0x3e, 0xce, 0x37, 0xdd, 0x90, 0x0b, 0xed, 0x13, 0x4c,
  0x37, 0xe4, 0x82, 0xfb, 0x08, 0xd3, 0x0d, 0xb9, 0xf0, 0x3e, 0xc3, 0x74,
  0x43, 0x2e, 0xc0, 0x0f, 0x61, 0xff, 0x60, 0xc0, 0xc7, 0x8a, 0x43, 0x3e,
  0x56, 0x20, 0xf2, 0xb1, 0x22, 0x91, 0x8f, 0x15, 0x8a, 0x7c, 0xec, 0x1f,
  0x08, 0xf8, 0xd8, 0x3f, 0x10, 0xf0, 0xb1, 0x7f, 0x20, 0xe0, 0x63, 0xff,
  0x40, 0xc0, 0x67, 0xc4, 0xe0, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x5a, 0xd2,
  0xa3, 0xfa, 0x81, 0x1f, 0x76, 0x58, 0x07, 0xfe, 0xe1, 0x1f, 0x56, 0x62,
  0x25, 0x3e, 0xd2, 0x9f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0x18, 0x4d, 0x20, 0x06, 0x23, 0x28, 0xf9, 0x18, 0x51, 0xc9,
  0xc7, 0x08, 0x4b, 0x3e, 0x46, 0x5c, 0xf2, 0xb1, 0x7f, 0x20, 0xe0, 0x63,
  0xff, 0x40, 0xc0, 0xc7, 0xfe, 0x81, 0x80, 0x8f, 0xfd, 0x03, 0x01, 0x1f,
  0xe3, 0x99, 0x35, 0x92, 0x8f, 0xed, 0x0c, 0x1b, 0xc9, 0xc7, 0x72, 0x44,
  0x88, 0x8f, 0xe5, 0x88, 0x10, 0x1f, 0x6b, 0x13, 0x41, 0x3e, 0x16, 0xd4,
  0x88, 0x7c, 0xec, 0x4d, 0x06, 0xf9, 0x58, 0x60, 0x23, 0xf2, 0xb1, 0x21,
  0x7f, 0xe0, 0x63, 0x42, 0xfe, 0xc0, 0xc7, 0x84, 0x18, 0x91, 0x8f, 0x09,
  0x31, 0x22, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30, 0xb8, 0xda, 0x69,
  0x96, 0x5a, 0x28, 0x85, 0x84, 0xa0, 0x86, 0x6a, 0xa8, 0x9c, 0xca, 0xa9,
  0x96, 0x66, 0x68, 0x34, 0x21, 0x00, 0x2c, 0xa8, 0x23, 0xf9, 0x8c, 0x18,
  0x3c, 0x00, 0x08, 0x82, 0xc1, 0x05, 0x4f, 0xb6, 0xf4, 0x42, 0x2c, 0x54,
  0x10, 0x38, 0x84, 0x43, 0xe8, 0x84, 0x4e, 0xb8, 0x64, 0x43, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c,
  0xc6, 0x22, 0x8c, 0x7c, 0x8c, 0x45, 0x18, 0xf9, 0x98, 0x00, 0x23, 0xf0,
  0x31, 0x01, 0x46, 0xe0, 0x63, 0x2a, 0xa2, 0xc8, 0xc7, 0x82, 0x77, 0x81,
  0x8f, 0x05, 0x84, 0x7c, 0x4c, 0x20, 0xe4, 0x63, 0x28, 0x22, 0xc1, 0xc7,
  0x50, 0x44, 0x82, 0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x5c, 0xff,
  0x54, 0x4e, 0x3c, 0xb4, 0x43, 0x42, 0x70, 0x46, 0x67, 0x74, 0x4f, 0xf7,
  0x74, 0x4e, 0x65, 0x34, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x0c, 0x36, 0xb4, 0x91, 0x7c, 0x6c, 0x70, 0x23, 0xf9, 0x98, 0xe0,
  0x46, 0xf0, 0x31, 0xe1, 0x8d, 0xe0, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0xcf, 0x4a, 0x81, 0x94, 0x60, 0x6f, 0x14, 0xc4, 0x67, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x9e, 0x96, 0x12, 0xa9, 0xc1, 0x84, 0x20, 0x3e,
  0x26, 0x4b, 0x41, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x81,
  0xa9, 0x7a, 0x0a, 0x86, 0x23, 0x90, 0x39, 0x22, 0xbe, 0xe1, 0x08, 0x84,
  0x8e, 0x88, 0x6f, 0xba, 0x01, 0x8f, 0xec, 0x48, 0x98, 0x6e, 0xc8, 0xa3,
  0x3b, 0x12, 0x4c, 0x28, 0xe4, 0x63, 0x82, 0x21, 0x1f, 0x73, 0x84, 0xf8,
  0x98, 0x23, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x22, 0x9c,
  0xd2, 0x27, 0x21, 0x58, 0x84, 0x60, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x83, 0x47, 0xa7, 0xf2, 0x29, 0x30, 0x22, 0x90, 0x8f, 0x11, 0x82, 0x7c,
  0x6c, 0x78, 0xe4, 0x33, 0x1c, 0xa1, 0x43, 0x58, 0xf0, 0x5d, 0x60, 0x94,
  0x05, 0xe1, 0x24, 0x9f, 0xe9, 0x06, 0x71, 0x0a, 0x4e, 0x64, 0xc4, 0x60,
  0x01, 0x40, 0x10, 0x0c, 0xa2, 0xb0, 0x1a, 0x29, 0xfc, 0xa9, 0x1f, 0xf9,
  0x19, 0x03, 0x31, 0x78, 0x83, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x88,
  0xc4, 0x8a, 0xa4, 0x54, 0x28, 0x85, 0x50, 0x08, 0x39, 0x8c, 0x11, 0x03,
  0x03, 0x00, 0x41, 0x30, 0x78, 0xc8, 0x2a, 0xa5, 0x02, 0x43, 0xa5, 0x20,
  0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0x98, 0xd5, 0x4a, 0x05,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0x9c, 0x15, 0x49, 0x05, 0x36,
  0x22, 0x81, 0x7c, 0xec, 0x30, 0x97, 0xf8, 0x58, 0x80, 0x2e, 0xf2, 0x19,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x67, 0xad, 0xc0, 0x2a, 0x18, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x83, 0x87, 0xad, 0xc2, 0x8a, 0x30, 0x41, 0x9e,
  0xe0, 0x63, 0xc2, 0x3c, 0xc1, 0xc7, 0x84, 0x79, 0x92, 0x8f, 0x09, 0xf4,
  0x24, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xe2, 0xca, 0xa6,
  0x84, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xe4, 0xea, 0xa6, 0x04,
  0x13, 0x72, 0x49, 0x3e, 0x26, 0xe8, 0x92, 0x7c, 0x8c, 0x9f, 0x84, 0xf8,
  0x58, 0x3f, 0x09, 0xf1, 0xb1, 0x3f, 0x08, 0x9d, 0xf8, 0x58, 0xb0, 0x2e,
  0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x27, 0xaf, 0xdc, 0x2a,
  0xb0, 0x20, 0x90, 0x8f, 0x05, 0xfb, 0x24, 0x1f, 0x1b, 0x46, 0x4a, 0x3e,
  0x16, 0x80, 0x13, 0x7c, 0x2c, 0x18, 0xe0, 0x63, 0xfe, 0x14, 0xd0, 0xc7,
  0x02, 0x7f, 0x82, 0x4f, 0x41, 0x8f, 0x54, 0x10, 0x88, 0x39, 0x62, 0x20,
  0x1f, 0x0b, 0x1c, 0xf9, 0x58, 0x30, 0xc8, 0xc7, 0x02, 0x43, 0x3e, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0x9c, 0x16, 0x5b, 0xe9, 0xc2, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xa8, 0xd5, 0x56, 0xba, 0x30, 0x1c,
  0x21, 0xf0, 0x42, 0xf0, 0x0d, 0x47, 0x08, 0xbc, 0x10, 0x7c, 0x25, 0x04,
  0x3a, 0xdd, 0x60, 0xb8, 0x53, 0x30, 0x1c, 0x11, 0xbc, 0x93, 0xf3, 0x4d,
  0x37, 0xe4, 0x02, 0x3c, 0x05, 0xd3, 0x0d, 0xb9, 0x10, 0x4f, 0xc2, 0x74,
  0x43, 0x2e, 0xc8, 0xd3, 0x30, 0xdd, 0x90, 0x0b, 0xf3, 0x44, 0xd8, 0x48,
  0x18, 0xf0, 0xb1, 0xe2, 0x90, 0x8f, 0x15, 0x88, 0x7c, 0xac, 0x48, 0xe4,
  0x63, 0x85, 0x22, 0x1f, 0x1b, 0x09, 0x02, 0x3e, 0x36, 0x12, 0x04, 0x7c,
  0x6c, 0x24, 0x08, 0xf8, 0xd8, 0x48, 0x10, 0xf0, 0x19, 0x31, 0x78, 0x00,
  0x10, 0x04, 0x83, 0xeb, 0xb6, 0xfa, 0x0a, 0x9f, 0xe6, 0x89, 0x1d, 0xd6,
  0xe1, 0x9f, 0xfe, 0xe9, 0xb5, 0x5e, 0xeb, 0xaf, 0xfa, 0x69, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0xc1,
  0x08, 0x4a, 0x3e, 0x46, 0x54, 0xf2, 0x31, 0xc2, 0x92, 0x8f, 0x11, 0x97,
  0x7c, 0x6c, 0x24, 0x08, 0xf8, 0xd8, 0x48, 0x10, 0xf0, 0xb1, 0x91, 0x20,
  0xe0, 0x63, 0x23, 0x41, 0xc0, 0xc7, 0x7e, 0xc8, 0xa7, 0xe4, 0x63, 0x3e,
  0xf4, 0x53, 0xf2, 0x31, 0xc1, 0x6d, 0xe4, 0x63, 0x81, 0xcd, 0xc8, 0xc7,
  0x06, 0xb8, 0x91, 0x8f, 0x05, 0x37, 0x23, 0x1f, 0x1b, 0xf4, 0x09, 0x3e,
  0x26, 0xe8, 0x13, 0x7c, 0x4c, 0x90, 0x19, 0xf9, 0x98, 0x20, 0x33, 0xf2,
  0x19, 0x31, 0x78, 0x00, 0x10, 0x04, 0x83, 0xcb, 0xbd, 0x68, 0xcb, 0xa5,
  0x54, 0x4a, 0x08, 0x6c, 0xca, 0xa6, 0xcc, 0xcb, 0xbc, 0x6c, 0x8b, 0xa6,
  0x46, 0x13, 0x02, 0xc0, 0x02, 0xbb, 0x92, 0xcf, 0x88, 0xc1, 0x03, 0x80,
  0x20, 0x18, 0x5c, 0xf1, 0x75, 0x5b, 0x30, 0xd5, 0x52, 0x05, 0x91, 0x53,
  0x39, 0x95, 0x5e, 0xe9, 0x95, 0x5b, 0x37, 0x35, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70,
  0x00, 0x20, 0x08, 0x06, 0x1c, 0x7d, 0xf5, 0x56, 0x4c, 0xd1, 0xd6, 0x68,
  0x42, 0x30, 0xd8, 0xcb, 0x38, 0xf2, 0xb1, 0x97, 0x71, 0xe4, 0x63, 0xc2,
  0xcc, 0xc0, 0xc7, 0x84, 0x99, 0x81, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x3c, 0x20, 0x56, 0x5f, 0x85, 0x91, 0x55, 0x10, 0x1f, 0x0b, 0x1c,
  0xf9, 0x58, 0x80, 0xc0, 0xc7, 0x02, 0x43, 0x3e, 0x26, 0x18, 0xf2, 0xb1,
  0x96, 0xb1, 0xe0, 0x63, 0x2d, 0x63, 0xc1, 0x67, 0xc4, 0xe0, 0x01, 0x40,
  0x10, 0x0c, 0x2e, 0x12, 0x53, 0xaf, 0xb0, 0x02, 0x2b, 0x21, 0x60, 0x2b,
  0xb6, 0xe2, 0x2f, 0xfe, 0x62, 0x2f, 0xb5, 0x1a, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x06, 0x1b, 0xe4, 0x4a, 0x3e, 0x36, 0xcc,
  0x95, 0x7c, 0x4c, 0x98, 0x2b, 0xf8, 0x98, 0x40, 0x57, 0xf0, 0x19, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x83, 0x07, 0xc6, 0x4a, 0x4c, 0x30, 0xba, 0x0a,
  0xe2, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x8f, 0x8c, 0x9d, 0xd8,
  0x60, 0x42, 0x10, 0x1f, 0xbb, 0xad, 0x20, 0x3e, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xf0, 0xd4, 0x98, 0x7e, 0x05, 0xc3, 0x11, 0x08, 0x5e, 0x11,
  0xdf, 0x70, 0x04, 0x92, 0x57, 0xc4, 0x37, 0xdd, 0xd0, 0x57, 0x7b, 0x25,
  0x4c, 0x37, 0xf8, 0x15, 0x5f, 0x09, 0x26, 0x14, 0xf2, 0x31, 0xc1, 0x90,
  0x8f, 0x39, 0x42, 0x7c, 0xcc, 0x11, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0x51, 0x8f, 0xfd, 0x97, 0x10, 0x2c, 0x42, 0xb0, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0xc1, 0xf3, 0x63, 0xfe, 0x15, 0x18, 0x11, 0xc8,
  0xc7, 0x08, 0x41, 0x3e, 0x36, 0x3c, 0xf2, 0x19, 0x8e, 0xf8, 0x29, 0x2c,
  0xf8, 0x2e, 0x30, 0xca, 0x02, 0xf1, 0x92, 0xcf, 0x74, 0xc3, 0x78, 0x05,
  0x2c, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x91, 0x99, 0xa1, 0x58,
  0x3f, 0xe9, 0xd3, 0x3d, 0x8d, 0x81, 0x18, 0xcc, 0xc1, 0x88, 0xc1, 0x02,
  0x80, 0x20, 0x18, 0x44, 0x67, 0x96, 0x62, 0x2f, 0xe5, 0x52, 0x2d, 0x85,
  0x1c, 0xc6, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x69, 0xe6, 0x62,
  0x81, 0xb5, 0x56, 0x10, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78,
  0xd6, 0x0c, 0xc6, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xd8,
  0x2c, 0xc5, 0x02, 0x43, 0x99, 0x40, 0x3e, 0x76, 0xac, 0x4f, 0x7c, 0x2c,
  0x68, 0x1f, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x03, 0x67,
  0x65, 0x16, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x13, 0x67, 0x66,
  0x46, 0x98, 0x70, 0x5f, 0xf0, 0x31, 0x01, 0xbf, 0xe0, 0x63, 0x02, 0x7e,
  0xc9, 0xc7, 0x84, 0xfc, 0x92, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x3c, 0x76, 0xb6, 0x63, 0xc2, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c,
  0x77, 0xc6, 0x63, 0x82, 0x09, 0xbe, 0x25, 0x1f, 0x13, 0x7e, 0x4b, 0x3e,
  0x16, 0x62, 0x42, 0x7c, 0x4c, 0xc4, 0x84, 0xf8, 0xd8, 0x28, 0x98, 0x52,
  0x7c, 0x2c, 0x80, 0x1f, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1,
  0xe3, 0x67, 0x73, 0x16, 0x58, 0x10, 0xc8, 0xc7, 0x02, 0x10, 0x93, 0x8f,
  0x0d, 0x28, 0x26, 0x1f, 0x0b, 0xca, 0x0b, 0x3e, 0x16, 0x0c, 0xf0, 0xb1,
  0x11, 0x0b, 0xe8, 0x63, 0xc1, 0x88, 0xc1, 0xa7, 0xa0, 0x47, 0x2a, 0x08,
  0xc4, 0x1c, 0x31, 0x90, 0x8f, 0x05, 0x8e, 0x7c, 0x2c, 0x18, 0xe4, 0x63,
  0x81, 0x21, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0x58, 0x2d,
  0xce, 0x7c, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9e, 0x56, 0x93,
  0x33, 0x5f, 0x18, 0x8e, 0x10, 0xc0, 0x21, 0xf8, 0x86, 0x23, 0x04, 0x70,
  0x08, 0xbe, 0x12, 0x02, 0x9d, 0x6e, 0x30, 0xe6, 0x2b, 0x18, 0x8e, 0x08,
  0xe8, 0xcb, 0xf9, 0xa6, 0x1b, 0x7a, 0xa1, 0xbe, 0x82, 0xe9, 0x86, 0x5e,
  0xb0, 0x2f, 0x61, 0xba, 0xa1, 0x17, 0xee, 0x6b, 0x98, 0x6e, 0xe8, 0x05,
  0xfc, 0x22, 0xac, 0x24, 0x0c, 0xf8, 0x58, 0x71, 0xc8, 0xc7, 0x0a, 0x44,
  0x3e, 0x56, 0x24, 0xf2, 0xb1, 0x42, 0x91, 0x8f, 0x95, 0x04, 0x01, 0x1f,
  0x2b, 0x09, 0x02, 0x3e, 0x56, 0x12, 0x04, 0x7c, 0xac, 0x24, 0x08, 0xf8,
  0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0xc1, 0xc5, 0x6b, 0xa2, 0xd6, 0x5f,
  0xf8, 0x05, 0x0f, 0xef, 0x40, 0x62, 0x24, 0x46, 0x6b, 0xb4, 0x46, 0x6a,
  0x22, 0x36, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x60, 0x04, 0x25, 0x1f, 0x23, 0x2a, 0xf9, 0x18, 0x61,
  0xc9, 0xc7, 0x88, 0x4b, 0x3e, 0x56, 0x12, 0x04, 0x7c, 0xac, 0x24, 0x08,
  0xf8, 0x58, 0x49, 0x10, 0xf0, 0xb1, 0x92, 0x20, 0xe0, 0x63, 0x65, 0x25,
  0x66, 0xf2, 0x31, 0xb2, 0x1a, 0x33, 0xf9, 0x98, 0x59, 0x8d, 0x99, 0x7c,
  0xac, 0xac, 0xc8, 0x4c, 0x3e, 0x46, 0x08, 0xf0, 0x31, 0x42, 0x80, 0xcf,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x70, 0xed, 0x66, 0x6b, 0x2a, 0x66,
  0x6a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa6, 0x47, 0x85, 0x7c,
  0x2c, 0x18, 0xe4, 0x63, 0x7c, 0x64, 0xc8, 0xc7, 0x02, 0x42, 0x3e, 0x36,
  0x98, 0x18, 0x7c, 0x4c, 0x30, 0x31, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x01, 0x67, 0x6f, 0xbf, 0x36, 0x63, 0xae, 0x36, 0x9a, 0x10, 0x08,
  0xa3, 0x09, 0xc2, 0x60, 0x85, 0x20, 0x1f, 0x2b, 0x04, 0xf9, 0x8c, 0x18,
  0x3c, 0x00, 0x08, 0x82, 0xc1, 0xd5, 0x6f, 0xe3, 0xd6, 0x63, 0x39, 0x26,
  0x04, 0x65, 0x56, 0x66, 0xf5, 0x56, 0x6f, 0xe5, 0x36, 0x66, 0xa3, 0x09,
  0x01, 0x60, 0x41, 0xa9, 0xc9, 0x67, 0xc4, 0xe0, 0x01, 0x40, 0x10, 0x0c,
  0x2e, 0x90, 0x33, 0xb7, 0x1f, 0xe3, 0xb1, 0x82, 0x40, 0x33, 0x34, 0xc3,
  0x37, 0x7c, 0x43, 0x37, 0x33, 0x1b, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0x6e, 0xe4, 0xd8, 0x0d, 0xcc, 0xee, 0x6d, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0xc1, 0x04,
  0x4a, 0x3e, 0x26, 0x50, 0xf2, 0x31, 0xc1, 0x80, 0x8f, 0x09, 0x06, 0x7c,
  0x2c, 0x26, 0x1e, 0xf9, 0x58, 0x80, 0x13, 0xf0, 0xb1, 0x80, 0x90, 0x8f,
  0x09, 0x84, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x80, 0x83, 0xb9,
  0x7c, 0x6b, 0xb3, 0x73, 0x1b, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x30,
  0x41, 0x83, 0x8f, 0x09, 0x1a, 0x7c, 0x46, 0x0c, 0x1e, 0x00, 0x04, 0xc1,
  0xe0, 0xba, 0xb9, 0x7e, 0xa3, 0xb3, 0x39, 0x13, 0x82, 0x3f, 0xfb, 0xb3,
  0x97, 0x7b, 0xb9, 0x7f, 0xeb, 0xb3, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x61, 0xb0, 0xa1, 0xd4, 0xe4, 0x63, 0x83, 0xa9, 0xc9,
  0xc7, 0x04, 0x53, 0x83, 0x8f, 0x09, 0xa7, 0x06, 0x9f, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x78, 0xc6, 0x0e, 0xe7, 0x04, 0x3b, 0xb5, 0x20, 0x3e,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0x94, 0x9d, 0xce, 0x0d, 0x26,
  0x04, 0xf1, 0x31, 0x75, 0x0b, 0xe2, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x0f, 0xda, 0xb5, 0x5c, 0x30, 0x1c, 0x81, 0xac, 0x1a, 0xf1, 0x0d,
  0x47, 0x20, 0xac, 0x46, 0x7c, 0xd3, 0x0d, 0xb0, 0xe6, 0x6a, 0xc2, 0x74,
  0x43, 0xac, 0xbd, 0x9a, 0x60, 0x42, 0x21, 0x1f, 0x13, 0x0c, 0xf9, 0x98,
  0x23, 0xc4, 0xc7, 0x1c, 0x21, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60,
  0x10, 0xc1, 0x9d, 0xcc, 0x09, 0xc1, 0x22, 0x04, 0xcb, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x3c, 0x72, 0x17, 0x73, 0x81, 0x11, 0x81, 0x7c, 0x8c,
  0x10, 0xe4, 0x63, 0xc3, 0x23, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0xf8, 0xde, 0x2e, 0xe7, 0x5a, 0xcd, 0xe4, 0x46, 0x13, 0x82, 0x60, 0xb8,
  0x21, 0x60, 0x3b, 0x30, 0x18, 0x8e, 0xa8, 0xb3, 0x2d, 0xf8, 0x2e, 0x30,
  0xca, 0x02, 0x7c, 0x93, 0xcf, 0x74, 0x43, 0xbe, 0x05, 0xc4, 0x88, 0xc1,
  0x02, 0x80, 0x20, 0x18, 0x44, 0x7c, 0xe7, 0x73, 0x33, 0x06, 0x63, 0x2d,
  0x96, 0x06, 0x68, 0xa0, 0x07, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10,
  0xf5, 0xdd, 0xcf, 0x95, 0x19, 0x99, 0x8d, 0xd9, 0xa2, 0x24, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0xf0, 0xfc, 0x1d, 0xd9, 0x05, 0x36, 0x6e, 0x41,
  0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x09, 0x3d, 0xb3, 0x0b,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x11, 0xbd, 0x9f, 0x0b, 0xcc,
  0x87, 0x02, 0xf9, 0xd8, 0x11, 0x52, 0xf1, 0xb1, 0x60, 0xa4, 0xe4, 0x33,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x8f, 0xe9, 0xed, 0x5d, 0x30, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0xcf, 0xe9, 0xf1, 0x1d, 0x61, 0x42, 0xcb,
  0xc1, 0xc7, 0x04, 0x97, 0x83, 0x8f, 0x09, 0x2e, 0x27, 0x1f, 0x13, 0x5e,
  0x4e, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xb0, 0x5e, 0xdc,
  0x09, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xb4, 0x9e, 0xdc, 0x09,
  0x26, 0xd0, 0x9b, 0x7c, 0x4c, 0xa8, 0x37, 0xf9, 0xd8, 0xcd, 0x09, 0xf1,
  0x31, 0x9c, 0x13, 0xe2, 0x63, 0xaa, 0xc0, 0x5b, 0xf1, 0xb1, 0xc0, 0xa4,
  0xe4, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0f, 0xed, 0xa5, 0x5e,
  0x60, 0x41, 0x20, 0x1f, 0x0b, 0x6c, 0x4e, 0x3e, 0x36, 0xf8, 0x9c, 0x7c,
  0x2c, 0xd8, 0x37, 0xf8, 0x58, 0x30, 0xc0, 0xc7, 0x72, 0x2e, 0xa0, 0x8f,
  0x05, 0x39, 0x07, 0x9f, 0x82, 0x1e, 0xa9, 0x20, 0x10, 0x73, 0xc4, 0x40,
  0x3e, 0x16, 0x38, 0xf2, 0xb1, 0x60, 0x90, 0x8f, 0x05, 0x86, 0x7c, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x11, 0xbf, 0xd3, 0x43, 0x87, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xc6, 0x0f, 0xf5, 0xd0, 0x61, 0x38,
  0x42, 0x50, 0x87, 0xe0, 0x1b, 0x8e, 0x10, 0xd4, 0x21, 0xf8, 0x4a, 0x08,
  0x74, 0xba, 0xc1, 0x48, 0xb9, 0x60, 0x38, 0x22, 0x50, 0x39, 0xe7, 0x9b,
  0x6e, 0x20, 0x87, 0x95, 0x0b, 0xa6, 0x1b, 0xc8, 0x81, 0xe5, 0x84, 0xe9,
  0x06, 0x72, 0x68, 0xb9, 0x61, 0xba, 0x81, 0x1c, 0x5c, 0x8e, 0x30, 0x9b,
  0x30, 0xe0, 0x63, 0xc5, 0x21, 0x1f, 0x2b, 0x10, 0xf9, 0x58, 0x91, 0xc8,
  0xc7, 0x0a, 0x45, 0x3e, 0x66, 0x13, 0x04, 0x7c, 0xcc, 0x26, 0x08, 0xf8,
  0x98, 0x4d, 0x10, 0xf0, 0x31, 0x9b, 0x20, 0xe0, 0x33, 0x62, 0xf0, 0x00,
  0x20, 0x08, 0x06, 0x97, 0xfc, 0xe1, 0xde, 0xcc, 0xb9, 0xdc, 0x3d, 0xd8,
  0x83, 0xce, 0xe9, 0x9c, 0xfa, 0xa9, 0x9f, 0xee, 0xe1, 0xdc, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83,
  0x11, 0x94, 0x7c, 0x8c, 0xa8, 0xe4, 0x63, 0x84, 0x25, 0x1f, 0x23, 0x2e,
  0xf9, 0x98, 0x4d, 0x10, 0xf0, 0x31, 0x9b, 0x20, 0xe0, 0x63, 0x36, 0x41,
  0xc0, 0xc7, 0x6c, 0x82, 0x80, 0x8f, 0xd1, 0x84, 0x4d, 0xc4, 0xc7, 0x68,
  0xc2, 0x26, 0xe2, 0x63, 0xa9, 0x25, 0xc8, 0xc7, 0x02, 0x99, 0x90, 0x8f,
  0xad, 0xd6, 0x20, 0x1f, 0x0b, 0x66, 0x42, 0x3e, 0x36, 0xd4, 0x1c, 0x7c,
  0x4c, 0xa8, 0x39, 0xf8, 0x98, 0xe0, 0x12, 0xf2, 0x31, 0xc1, 0x25, 0xe4,
  0x33, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0x57, 0x0a, 0x06, 0xef, 0x97,
  0x76, 0x65, 0x27, 0x04, 0x71, 0x17, 0x77, 0x21, 0x18, 0x84, 0x60, 0x10,
  0x7f, 0x6f, 0x37, 0x9a, 0x10, 0x00, 0x16, 0xc4, 0x9e, 0x7c, 0x46, 0x0c,
  0x1e, 0x00, 0x04, 0xc1, 0xe0, 0x62, 0xc1, 0x40, 0xfe, 0xd6, 0x0e, 0xed,
  0x0a, 0x82, 0xee, 0xe8, 0x8e, 0x04, 0x03, 0x12, 0x0c, 0xe8, 0x4f, 0xee,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34,
  0x81, 0x18, 0x2c, 0x25, 0x18, 0xf9, 0x58, 0x4a, 0x30, 0xf2, 0x31, 0xa1,
  0x25, 0xe0, 0x63, 0x42, 0x4b, 0xc0, 0xc7, 0x70, 0x44, 0x91, 0x8f, 0x05,
  0x3f, 0x02, 0x1f, 0x0b, 0x08, 0xf9, 0x98, 0x40, 0xc8, 0xc7, 0x4c, 0x42,
  0x82, 0x8f, 0x99, 0x84, 0x04, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30,
  0xb8, 0x76, 0x30, 0x08, 0xc1, 0x00, 0xef, 0xee, 0x4e, 0x08, 0x46, 0x6f,
  0xf4, 0x66, 0x30, 0x98, 0xc1, 0x60, 0x04, 0x83, 0xd0, 0x1b, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x06, 0x1b, 0x52, 0x4f, 0x3e,
  0x36, 0xa8, 0x9e, 0x7c, 0x4c, 0x50, 0x3d, 0xf8, 0x98, 0xb0, 0x7a, 0xf0,
  0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xe7, 0x0c, 0x03, 0x1e, 0x0c,
  0x04, 0x5b, 0xbd, 0x20, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0,
  0xa4, 0x61, 0xe0, 0x83, 0xc1, 0x60, 0x42, 0x10, 0x1f, 0x73, 0xbf, 0x20,
  0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xb0, 0x61, 0x10, 0x83,
  0x41, 0x30, 0x1c, 0x81, 0xbc, 0x1e, 0xf1, 0x0d, 0x47, 0x20, 0xb0, 0x47,
  0x7c, 0xd3, 0x0d, 0xb4, 0x27, 0x7b, 0xc2, 0x74, 0x43, 0xed, 0xcd, 0x9e,
  0x60, 0x42, 0x21, 0x1f, 0x13, 0x0c, 0xf9, 0x98, 0x23, 0xc4, 0xc7, 0x1c,
  0x21, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0xd1, 0x61, 0x60,
  0x83, 0x81, 0x10, 0x2c, 0x42, 0xb0, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0xc1, 0x63, 0x87, 0x41, 0x0d, 0x06, 0x81, 0x11, 0x81, 0x7c, 0x8c, 0x10,
  0xe4, 0x63, 0xc3, 0x23, 0x9f, 0xe1, 0x08, 0xbb, 0xc3, 0x82, 0xef, 0x02,
  0xa3, 0x2c, 0xc8, 0x3f, 0xf9, 0x4c, 0x37, 0xe8, 0x5f, 0x50, 0x12, 0x23,
  0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0xf5, 0x61, 0xf0, 0x83, 0x01, 0xcd,
  0xc5, 0x9c, 0xcb, 0x8d, 0x81, 0x18, 0xbc, 0xc1, 0x88, 0xc1, 0x02, 0x80,
  0x20, 0x18, 0x44, 0x7e, 0x18, 0x80, 0x61, 0x60, 0x76, 0x65, 0x47, 0x76,
  0xc8, 0x61, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x03, 0x8a, 0x41,
  0x19, 0x06, 0x81, 0x91, 0x5f, 0x10, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x78, 0x44, 0x31, 0x38, 0xc3, 0x20, 0x18, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x83, 0x67, 0x14, 0x03, 0x30, 0x0c, 0x02, 0xfb, 0xa9, 0x40, 0x3e,
  0x76, 0x88, 0x58, 0x7c, 0x2c, 0x20, 0x31, 0xf9, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0xc1, 0x73, 0x8a, 0x01, 0x1f, 0x06, 0xc1, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x3c, 0xa8, 0x18, 0xf4, 0x61, 0x40, 0x98, 0xe0, 0x82,
  0x01, 0x7c, 0x4c, 0x78, 0xc1, 0x00, 0x3e, 0x26, 0xbc, 0x60, 0x20, 0x1f,
  0x13, 0x60, 0x30, 0x90, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c,
  0xad, 0x18, 0xc8, 0x61, 0x20, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1,
  0xe3, 0x8a, 0xc1, 0x1c, 0x06, 0x82, 0x09, 0xf5, 0x27, 0x1f, 0x13, 0xec,
  0x4f, 0x3e, 0x86, 0x83, 0x81, 0x10, 0x1f, 0xcb, 0xc1, 0x40, 0x88, 0x8f,
  0xfd, 0x41, 0xaf, 0xc5, 0xc7, 0x82, 0x13, 0x93, 0xcf, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x3c, 0xb5, 0x18, 0xa8, 0x62, 0x10, 0x58, 0x10, 0xc8,
  0xc7, 0x82, 0x1b, 0x0c, 0xe4, 0x63, 0xc3, 0x0f, 0x06, 0xf2, 0xb1, 0x80,
  0xff, 0xe0, 0x63, 0xc1, 0x00, 0x1f, 0xd3, 0xc1, 0x20, 0xa0, 0x8f, 0x05,
  0x3a, 0x18, 0xc0, 0xa7, 0xa0, 0x47, 0x2a, 0x08, 0xc4, 0x1c, 0x31, 0x90,
  0x8f, 0x05, 0x8e, 0x7c, 0x2c, 0x18, 0xe4, 0x63, 0x81, 0x21, 0x9f, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0xc6, 0x31, 0x40, 0xc5, 0x40, 0x17,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x21, 0xc7, 0x20, 0x15, 0x03,
  0x5d, 0x18, 0x8e, 0x10, 0x78, 0x21, 0xf8, 0x86, 0x23, 0x04, 0x5e, 0x08,
  0xbe, 0x12, 0x02, 0x9d, 0x6e, 0x30, 0x54, 0x30, 0x08, 0x86, 0x23, 0x82,
  0x15, 0x0c, 0x9c, 0x6f, 0xba, 0x21, 0x17, 0x58, 0x30, 0x08, 0xa6, 0x1b,
  0x72, 0xa1, 0x05, 0x03, 0x61, 0xba, 0x21, 0x17, 0x5c, 0x30, 0x18, 0xa6,
  0x1b, 0x72, 0xe1, 0x05, 0x03, 0xc2, 0x42, 0xc2, 0x80, 0x8f, 0x15, 0x87,
  0x7c, 0xac, 0x40, 0xe4, 0x63, 0x45, 0x22, 0x1f, 0x2b, 0x14, 0xf9, 0x58,
  0x48, 0x10, 0xf0, 0xb1, 0x90, 0x20, 0xe0, 0x63, 0x21, 0x41, 0xc0, 0xc7,
  0x42, 0x82, 0x80, 0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x5c, 0xf3,
  0x18, 0xe4, 0x62, 0x40, 0x83, 0xc1, 0x0b, 0x06, 0xec, 0xb0, 0x0e, 0x3b,
  0x18, 0xec, 0x60, 0xb0, 0x8e, 0xc1, 0x3a, 0x06, 0xbb, 0x18, 0xe4, 0x60,
  0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3,
  0x09, 0xc4, 0x60, 0x04, 0x25, 0x1f, 0x23, 0x2a, 0xf9, 0x18, 0x61, 0xc9,
  0xc7, 0x88, 0x4b, 0x3e, 0x16, 0x12, 0x04, 0x7c, 0x2c, 0x24, 0x08, 0xf8,
  0x58, 0x48, 0x10, 0xf0, 0xb1, 0x90, 0x20, 0xe0, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xd9, 0x3f, 0x06, 0xb8, 0x18, 0x58, 0x6b, 0x18, 0x18,
  0x1a, 0x06, 0x01, 0x7d, 0x6c, 0x0a, 0xe4, 0x63, 0x93, 0x20, 0x1f, 0x9b,
  0x06, 0xf9, 0xd8, 0x44, 0xc8, 0xc7, 0x94, 0x42, 0x3e, 0xa6, 0x18, 0xf2,
  0x31, 0xe5, 0x90, 0x8f, 0x29, 0x88, 0x7c, 0x46, 0x0c, 0x1c, 0x00, 0x04,
  0xc1, 0xa0, 0x79, 0xc9, 0x20, 0x1d, 0x83, 0x36, 0x0c, 0xc8, 0x30, 0x18,
  0xc3, 0x40, 0x1e, 0x03, 0xe4, 0x30, 0x8a, 0x5b, 0x0c, 0x46, 0x0c, 0x1c,
  0x00, 0x04, 0xc1, 0xa0, 0x79, 0xc9, 0x20, 0x1d, 0x83, 0x37, 0x0c, 0xc8,
  0x30, 0x18, 0xc3, 0x40, 0x1e, 0x03, 0x62, 0x10, 0x82, 0x5b, 0x0c, 0x66,
  0x09, 0x06, 0x0c, 0x88, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x5b, 0x86, 0xee, 0x89, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
