#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: dcfba6d6537c3b9b857add196344d4d1
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer globalConstants
; {
;
;   struct globalConstants
;   {
;
;       column_major float4x4 gViewToClip;            ; Offset:    0
;       float4 gFrustum;                              ; Offset:   64
;       float3 gMvScale;                              ; Offset:   80
;       float gDebug;                                 ; Offset:   92
;       float2 gInvScreenSize;                        ; Offset:   96
;       float2 gScreenSize;                           ; Offset:  104
;       float2 gInvRectSize;                          ; Offset:  112
;       float2 gRectSize;                             ; Offset:  120
;       float2 gRectSizePrev;                         ; Offset:  128
;       float2 gResolutionScale;                      ; Offset:  136
;       float2 gRectOffset;                           ; Offset:  144
;       uint2 gRectOrigin;                            ; Offset:  152
;       float gOrthoMode;                             ; Offset:  160
;       float gUnproject;                             ; Offset:  164
;       float gDenoisingRange;                        ; Offset:  168
;       float gPlaneDistSensitivity;                  ; Offset:  172
;       float gBlurRadiusScale;                       ; Offset:  176
;       float gContinueAccumulation;                  ; Offset:  180
;       uint gIsWorldSpaceMotionEnabled;              ; Offset:  184
;       uint gFrameIndex;                             ; Offset:  188
;   
;   } globalConstants;                                ; Offset:    0 Size:   192
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; globalConstants                   cbuffer      NA          NA     CB0            cb0     1
; gIn_Hit_ViewZ                     texture     f32          2d      T0             t0     1
; gIn_Shadow_Translucency           texture     f32          2d      T1             t1     1
; gOut_Tiles                            UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 2> >" = type { <2 x float>, %"class.Texture2D<vector<float, 2> >::mips_type" }
%"class.Texture2D<vector<float, 2> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 2> >" = type { <2 x float> }
%globalConstants = type { %class.matrix.float.4.4, <4 x float>, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, float, float, float, float, float, float, i32, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }

@"\01?s_Mask@@3IA" = external addrspace(3) global i32, align 4
@"\01?s_Radius@@3IA" = external addrspace(3) global i32, align 4

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %6 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)  ; ThreadIdInGroup(component)
  %7 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %8 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %9 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %0
  store i32 0, i32 addrspace(3)* @"\01?s_Mask@@3IA", align 4, !tbaa !16
  store i32 0, i32 addrspace(3)* @"\01?s_Radius@@3IA", align 4, !tbaa !16
  br label %12

; <label>:12                                      ; preds = %11, %0
  call void @dx.op.barrier(i32 80, i32 8)  ; Barrier(barrierMode)
  %13 = shl i32 %7, 4
  %14 = shl i32 %8, 4
  %15 = shl i32 %5, 1
  %16 = shl i32 %6, 2
  %17 = add i32 %13, %15
  %18 = add i32 %14, %16
  %19 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %17, i32 %18, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %20 = extractvalue %dx.types.ResRet.f32 %19, 0
  %21 = extractvalue %dx.types.ResRet.f32 %19, 1
  %22 = call float @dx.op.unary.f32(i32 6, float %21)  ; FAbs(value)
  %23 = fmul fast float %22, 8.000000e+00
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 2
  %26 = fcmp fast ogt float %23, %25
  %27 = fcmp fast oeq float %20, 0.000000e+00
  %28 = or i1 %27, %26
  %29 = fcmp fast oeq float %20, 6.550400e+04
  %30 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %17, i32 %18, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %31 = extractvalue %dx.types.ResRet.f32 %30, 1
  %32 = extractvalue %dx.types.ResRet.f32 %30, 2
  %33 = extractvalue %dx.types.ResRet.f32 %30, 3
  %34 = call float @dx.op.dot3.f32(i32 55, float %31, float %32, float %33, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %35 = fcmp fast olt float %34, 0x3F689374C0000000
  %36 = or i1 %29, %28
  %37 = zext i1 %36 to i32
  %38 = xor i1 %29, true
  %39 = and i1 %35, %38
  %40 = or i1 %28, %39
  %41 = zext i1 %40 to i32
  %42 = shl nuw nsw i32 %41, 16
  %43 = or i32 %42, %37
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = fmul fast float %45, %20
  %47 = select i1 %36, float 0.000000e+00, float %46
  %48 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %49 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %50 = call float @dx.op.unary.f32(i32 6, float %48)  ; FAbs(value)
  %51 = fsub fast float 1.000000e+00, %23
  %52 = fmul fast float %50, %51
  %53 = fadd fast float %52, %23
  %54 = fmul fast float %53, %49
  %55 = call float @dx.op.binary.f32(i32 35, float %54, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %56 = fdiv fast float 1.000000e+00, %55
  %57 = fmul fast float %56, %47
  %58 = call float @dx.op.binary.f32(i32 36, float %57, float 3.200000e+01)  ; FMin(a,b)
  %59 = call float @dx.op.binary.f32(i32 35, float %58, float 0.000000e+00)  ; FMax(a,b)
  %60 = or i32 %18, 1
  %61 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %17, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %62 = extractvalue %dx.types.ResRet.f32 %61, 0
  %63 = extractvalue %dx.types.ResRet.f32 %61, 1
  %64 = call float @dx.op.unary.f32(i32 6, float %63)  ; FAbs(value)
  %65 = fmul fast float %64, 8.000000e+00
  %66 = fcmp fast ogt float %65, %25
  %67 = fcmp fast oeq float %62, 0.000000e+00
  %68 = or i1 %67, %66
  %69 = fcmp fast oeq float %62, 6.550400e+04
  %70 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %17, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %71 = extractvalue %dx.types.ResRet.f32 %70, 1
  %72 = extractvalue %dx.types.ResRet.f32 %70, 2
  %73 = extractvalue %dx.types.ResRet.f32 %70, 3
  %74 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %75 = fcmp fast olt float %74, 0x3F689374C0000000
  %76 = or i1 %69, %68
  %77 = zext i1 %76 to i32
  %78 = xor i1 %69, true
  %79 = and i1 %75, %78
  %80 = or i1 %68, %79
  %81 = zext i1 %80 to i32
  %82 = fmul fast float %45, %62
  %83 = select i1 %76, float 0.000000e+00, float %82
  %84 = fsub fast float 1.000000e+00, %65
  %85 = fmul fast float %50, %84
  %86 = fadd fast float %85, %65
  %87 = fmul fast float %86, %49
  %88 = call float @dx.op.binary.f32(i32 35, float %87, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %89 = fdiv fast float 1.000000e+00, %88
  %90 = fmul fast float %89, %83
  %91 = call float @dx.op.binary.f32(i32 36, float %90, float 3.200000e+01)  ; FMin(a,b)
  %92 = call float @dx.op.binary.f32(i32 35, float %91, float %59)  ; FMax(a,b)
  %93 = or i32 %18, 2
  %94 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %17, i32 %93, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %95 = extractvalue %dx.types.ResRet.f32 %94, 0
  %96 = extractvalue %dx.types.ResRet.f32 %94, 1
  %97 = call float @dx.op.unary.f32(i32 6, float %96)  ; FAbs(value)
  %98 = fmul fast float %97, 8.000000e+00
  %99 = fcmp fast ogt float %98, %25
  %100 = fcmp fast oeq float %95, 0.000000e+00
  %101 = or i1 %100, %99
  %102 = fcmp fast oeq float %95, 6.550400e+04
  %103 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %17, i32 %93, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %104 = extractvalue %dx.types.ResRet.f32 %103, 1
  %105 = extractvalue %dx.types.ResRet.f32 %103, 2
  %106 = extractvalue %dx.types.ResRet.f32 %103, 3
  %107 = call float @dx.op.dot3.f32(i32 55, float %104, float %105, float %106, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %108 = fcmp fast olt float %107, 0x3F689374C0000000
  %109 = or i1 %102, %101
  %110 = zext i1 %109 to i32
  %111 = xor i1 %102, true
  %112 = and i1 %108, %111
  %113 = or i1 %101, %112
  %114 = zext i1 %113 to i32
  %115 = fmul fast float %45, %95
  %116 = select i1 %109, float 0.000000e+00, float %115
  %117 = fsub fast float 1.000000e+00, %98
  %118 = fmul fast float %50, %117
  %119 = fadd fast float %118, %98
  %120 = fmul fast float %119, %49
  %121 = call float @dx.op.binary.f32(i32 35, float %120, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %122 = fdiv fast float 1.000000e+00, %121
  %123 = fmul fast float %122, %116
  %124 = call float @dx.op.binary.f32(i32 36, float %123, float 3.200000e+01)  ; FMin(a,b)
  %125 = call float @dx.op.binary.f32(i32 35, float %124, float %92)  ; FMax(a,b)
  %126 = or i32 %18, 3
  %127 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %17, i32 %126, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %128 = extractvalue %dx.types.ResRet.f32 %127, 0
  %129 = extractvalue %dx.types.ResRet.f32 %127, 1
  %130 = call float @dx.op.unary.f32(i32 6, float %129)  ; FAbs(value)
  %131 = fmul fast float %130, 8.000000e+00
  %132 = fcmp fast ogt float %131, %25
  %133 = fcmp fast oeq float %128, 0.000000e+00
  %134 = or i1 %133, %132
  %135 = fcmp fast oeq float %128, 6.550400e+04
  %136 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %17, i32 %126, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %137 = extractvalue %dx.types.ResRet.f32 %136, 1
  %138 = extractvalue %dx.types.ResRet.f32 %136, 2
  %139 = extractvalue %dx.types.ResRet.f32 %136, 3
  %140 = call float @dx.op.dot3.f32(i32 55, float %137, float %138, float %139, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %141 = fcmp fast olt float %140, 0x3F689374C0000000
  %142 = or i1 %135, %134
  %143 = zext i1 %142 to i32
  %144 = xor i1 %135, true
  %145 = and i1 %141, %144
  %146 = or i1 %134, %145
  %147 = zext i1 %146 to i32
  %148 = fmul fast float %45, %128
  %149 = select i1 %142, float 0.000000e+00, float %148
  %150 = fsub fast float 1.000000e+00, %131
  %151 = fmul fast float %50, %150
  %152 = fadd fast float %151, %131
  %153 = fmul fast float %152, %49
  %154 = call float @dx.op.binary.f32(i32 35, float %153, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %155 = fdiv fast float 1.000000e+00, %154
  %156 = fmul fast float %155, %149
  %157 = call float @dx.op.binary.f32(i32 36, float %156, float 3.200000e+01)  ; FMin(a,b)
  %158 = call float @dx.op.binary.f32(i32 35, float %157, float %125)  ; FMax(a,b)
  %159 = or i32 %17, 1
  %160 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %159, i32 %18, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %161 = extractvalue %dx.types.ResRet.f32 %160, 0
  %162 = extractvalue %dx.types.ResRet.f32 %160, 1
  %163 = call float @dx.op.unary.f32(i32 6, float %162)  ; FAbs(value)
  %164 = fmul fast float %163, 8.000000e+00
  %165 = fcmp fast ogt float %164, %25
  %166 = fcmp fast oeq float %161, 0.000000e+00
  %167 = or i1 %166, %165
  %168 = fcmp fast oeq float %161, 6.550400e+04
  %169 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %159, i32 %18, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %170 = extractvalue %dx.types.ResRet.f32 %169, 1
  %171 = extractvalue %dx.types.ResRet.f32 %169, 2
  %172 = extractvalue %dx.types.ResRet.f32 %169, 3
  %173 = call float @dx.op.dot3.f32(i32 55, float %170, float %171, float %172, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %174 = fcmp fast olt float %173, 0x3F689374C0000000
  %175 = or i1 %168, %167
  %176 = zext i1 %175 to i32
  %177 = xor i1 %168, true
  %178 = and i1 %174, %177
  %179 = or i1 %167, %178
  %180 = zext i1 %179 to i32
  %181 = fmul fast float %45, %161
  %182 = select i1 %175, float 0.000000e+00, float %181
  %183 = fsub fast float 1.000000e+00, %164
  %184 = fmul fast float %50, %183
  %185 = fadd fast float %184, %164
  %186 = fmul fast float %185, %49
  %187 = call float @dx.op.binary.f32(i32 35, float %186, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %188 = fdiv fast float 1.000000e+00, %187
  %189 = fmul fast float %188, %182
  %190 = call float @dx.op.binary.f32(i32 36, float %189, float 3.200000e+01)  ; FMin(a,b)
  %191 = call float @dx.op.binary.f32(i32 35, float %190, float %158)  ; FMax(a,b)
  %192 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %159, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %193 = extractvalue %dx.types.ResRet.f32 %192, 0
  %194 = extractvalue %dx.types.ResRet.f32 %192, 1
  %195 = call float @dx.op.unary.f32(i32 6, float %194)  ; FAbs(value)
  %196 = fmul fast float %195, 8.000000e+00
  %197 = fcmp fast ogt float %196, %25
  %198 = fcmp fast oeq float %193, 0.000000e+00
  %199 = or i1 %198, %197
  %200 = fcmp fast oeq float %193, 6.550400e+04
  %201 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %159, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %202 = extractvalue %dx.types.ResRet.f32 %201, 1
  %203 = extractvalue %dx.types.ResRet.f32 %201, 2
  %204 = extractvalue %dx.types.ResRet.f32 %201, 3
  %205 = call float @dx.op.dot3.f32(i32 55, float %202, float %203, float %204, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %206 = fcmp fast olt float %205, 0x3F689374C0000000
  %207 = or i1 %200, %199
  %208 = zext i1 %207 to i32
  %209 = xor i1 %200, true
  %210 = and i1 %206, %209
  %211 = or i1 %199, %210
  %212 = zext i1 %211 to i32
  %213 = fmul fast float %45, %193
  %214 = select i1 %207, float 0.000000e+00, float %213
  %215 = fsub fast float 1.000000e+00, %196
  %216 = fmul fast float %50, %215
  %217 = fadd fast float %216, %196
  %218 = fmul fast float %217, %49
  %219 = call float @dx.op.binary.f32(i32 35, float %218, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %220 = fdiv fast float 1.000000e+00, %219
  %221 = fmul fast float %220, %214
  %222 = call float @dx.op.binary.f32(i32 36, float %221, float 3.200000e+01)  ; FMin(a,b)
  %223 = call float @dx.op.binary.f32(i32 35, float %222, float %191)  ; FMax(a,b)
  %224 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %159, i32 %93, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %225 = extractvalue %dx.types.ResRet.f32 %224, 0
  %226 = extractvalue %dx.types.ResRet.f32 %224, 1
  %227 = call float @dx.op.unary.f32(i32 6, float %226)  ; FAbs(value)
  %228 = fmul fast float %227, 8.000000e+00
  %229 = fcmp fast ogt float %228, %25
  %230 = fcmp fast oeq float %225, 0.000000e+00
  %231 = or i1 %230, %229
  %232 = fcmp fast oeq float %225, 6.550400e+04
  %233 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %159, i32 %93, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %234 = extractvalue %dx.types.ResRet.f32 %233, 1
  %235 = extractvalue %dx.types.ResRet.f32 %233, 2
  %236 = extractvalue %dx.types.ResRet.f32 %233, 3
  %237 = call float @dx.op.dot3.f32(i32 55, float %234, float %235, float %236, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %238 = fcmp fast olt float %237, 0x3F689374C0000000
  %239 = or i1 %232, %231
  %240 = zext i1 %239 to i32
  %241 = xor i1 %232, true
  %242 = and i1 %238, %241
  %243 = or i1 %231, %242
  %244 = zext i1 %243 to i32
  %245 = fmul fast float %45, %225
  %246 = select i1 %239, float 0.000000e+00, float %245
  %247 = fsub fast float 1.000000e+00, %228
  %248 = fmul fast float %50, %247
  %249 = fadd fast float %248, %228
  %250 = fmul fast float %249, %49
  %251 = call float @dx.op.binary.f32(i32 35, float %250, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %252 = fdiv fast float 1.000000e+00, %251
  %253 = fmul fast float %252, %246
  %254 = call float @dx.op.binary.f32(i32 36, float %253, float 3.200000e+01)  ; FMin(a,b)
  %255 = call float @dx.op.binary.f32(i32 35, float %254, float %223)  ; FMax(a,b)
  %256 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3, i32 0, i32 %159, i32 %126, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %257 = extractvalue %dx.types.ResRet.f32 %256, 0
  %258 = extractvalue %dx.types.ResRet.f32 %256, 1
  %259 = call float @dx.op.unary.f32(i32 6, float %258)  ; FAbs(value)
  %260 = fmul fast float %259, 8.000000e+00
  %261 = fcmp fast ogt float %260, %25
  %262 = fcmp fast oeq float %257, 0.000000e+00
  %263 = or i1 %262, %261
  %264 = fcmp fast oeq float %257, 6.550400e+04
  %265 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2, i32 0, i32 %159, i32 %126, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %266 = extractvalue %dx.types.ResRet.f32 %265, 1
  %267 = extractvalue %dx.types.ResRet.f32 %265, 2
  %268 = extractvalue %dx.types.ResRet.f32 %265, 3
  %269 = call float @dx.op.dot3.f32(i32 55, float %266, float %267, float %268, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %270 = fcmp fast olt float %269, 0x3F689374C0000000
  %271 = or i1 %264, %263
  %272 = zext i1 %271 to i32
  %273 = xor i1 %264, true
  %274 = and i1 %270, %273
  %275 = or i1 %263, %274
  %276 = zext i1 %275 to i32
  %277 = add nuw nsw i32 %114, %81
  %278 = add nuw nsw i32 %277, %147
  %279 = add nuw nsw i32 %278, %180
  %280 = add nuw nsw i32 %279, %212
  %281 = add nuw nsw i32 %280, %244
  %282 = add nuw nsw i32 %281, %276
  %283 = shl i32 %282, 16
  %284 = add nuw nsw i32 %77, %43
  %285 = add nuw nsw i32 %284, %110
  %286 = add nuw nsw i32 %285, %143
  %287 = add nuw nsw i32 %286, %176
  %288 = add nsw i32 %287, %208
  %289 = add i32 %288, %240
  %290 = add i32 %289, %272
  %291 = add i32 %290, %283
  %292 = fmul fast float %45, %257
  %293 = select i1 %271, float 0.000000e+00, float %292
  %294 = fsub fast float 1.000000e+00, %260
  %295 = fmul fast float %50, %294
  %296 = fadd fast float %295, %260
  %297 = fmul fast float %296, %49
  %298 = call float @dx.op.binary.f32(i32 35, float %297, float 0x3CD203AFA0000000)  ; FMax(a,b)
  %299 = fdiv fast float 1.000000e+00, %298
  %300 = fmul fast float %299, %293
  %301 = call float @dx.op.binary.f32(i32 36, float %300, float 3.200000e+01)  ; FMin(a,b)
  %302 = call float @dx.op.binary.f32(i32 35, float %301, float %255)  ; FMax(a,b)
  %303 = atomicrmw add i32 addrspace(3)* @"\01?s_Mask@@3IA", i32 %291 seq_cst
  %304 = bitcast float %302 to i32
  %305 = atomicrmw umax i32 addrspace(3)* @"\01?s_Radius@@3IA", i32 %304 seq_cst
  call void @dx.op.barrier(i32 80, i32 8)  ; Barrier(barrierMode)
  br i1 %10, label %306, label %318

; <label>:306                                     ; preds = %12
  %307 = load i32, i32 addrspace(3)* @"\01?s_Mask@@3IA", align 4, !tbaa !16
  %308 = and i32 %307, 65535
  %309 = icmp eq i32 %308, 256
  %310 = and i32 %307, -65536
  %311 = icmp eq i32 %310, 16777216
  %312 = or i1 %309, %311
  %313 = select i1 %312, float 0.000000e+00, float 1.000000e+00
  %314 = load i32, i32 addrspace(3)* @"\01?s_Radius@@3IA", align 4, !tbaa !16
  %315 = bitcast i32 %314 to float
  %316 = fmul fast float %315, 6.250000e-02
  %317 = call float @dx.op.unary.f32(i32 7, float %316)  ; Saturate(value)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1, i32 %7, i32 %8, i32 undef, float %313, float %317, float %313, float %313, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %318

; <label>:318                                     ; preds = %306, %12
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #3

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #3

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate nounwind }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!13}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{!5, !9, !11, null}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.Texture2D<vector<float, 2> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{!10}
!10 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!11 = !{!12}
!12 = !{i32 0, %globalConstants* undef, !"", i32 0, i32 0, i32 1, i32 192, null}
!13 = !{void ()* @main, !"main", null, !4, !14}
!14 = !{i32 0, i64 8388864, i32 4, !15}
!15 = !{i32 8, i32 4, i32 1}
!16 = !{!17, !17, i64 0}
!17 = !{!"int", !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_SIGMA_ShadowTranslucency_ClassifyTiles_cs_dxil[] = {
  0x44, 0x58, 0x42, 0x43, 0x7e, 0x16, 0x67, 0xcf, 0xff, 0x97, 0x01, 0x6e,
  0x2c, 0x76, 0xfe, 0x3f, 0x21, 0x46, 0xd0, 0x0e, 0x01, 0x00, 0x00, 0x00,
  0xb8, 0x1d, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00,
  0x1c, 0x01, 0x00, 0x00, 0xa4, 0x0c, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x00,
  0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xa8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54,
  0x80, 0x0b, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00, 0xe0, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x68, 0x0b, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0xd7, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0xc0,
  0x00, 0xd2, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x36,
  0x18, 0xc4, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x80, 0x04, 0x54, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x86, 0x09, 0x01, 0x01, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x8e, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xc8, 0xc1, 0x1c,
  0x01, 0x18, 0x0c, 0x22, 0x00, 0xc3, 0x08, 0x40, 0x09, 0x04, 0x1a, 0xca,
  0x00, 0x00, 0x00, 0x15, 0x45, 0x00, 0x00, 0x3a, 0xca, 0x20, 0x00, 0x00,
  0x25, 0x73, 0x04, 0x08, 0x2d, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x02, 0x66, 0x06, 0xa0, 0x2c, 0x02,
  0xd0, 0x00, 0x00, 0xe0, 0x38, 0x8e, 0xb3, 0xd0, 0x73, 0xd3, 0x70, 0xf9,
  0x13, 0xf6, 0x10, 0x92, 0xbf, 0x12, 0xd2, 0x4a, 0x4c, 0x7e, 0x71, 0xdb,
  0xa8, 0x70, 0x1c, 0xc7, 0x01, 0x8a, 0x12, 0x01, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x24, 0x95, 0xc1, 0x01, 0x1c, 0xa2, 0x0a, 0xe1, 0x00, 0x8e,
  0x43, 0x56, 0x41, 0x1c, 0xc0, 0x71, 0x1c, 0xc7, 0x71, 0x08, 0x3b, 0x6a,
  0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89, 0xc9,
  0x2f, 0x6e, 0x1b, 0x11, 0x8e, 0xe3, 0x38, 0x85, 0xd0, 0x80, 0x06, 0xa0,
  0x6d, 0x8e, 0x20, 0x28, 0x46, 0x03, 0x2c, 0x00, 0xd0, 0x91, 0x37, 0x10,
  0x30, 0x8c, 0x20, 0x38, 0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc,
  0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8,
  0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0,
  0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0,
  0x03, 0x1b, 0x80, 0x81, 0x1c, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8,
  0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0,
  0x43, 0x39, 0xa0, 0x00, 0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61,
  0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41,
  0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81,
  0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81,
  0x1e, 0xd8, 0x00, 0x0c, 0xe4, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x10,
  0x8a, 0x34, 0x0e, 0x23, 0x10, 0xce, 0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10,
  0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50,
  0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30,
  0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10,
  0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x40, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0xa0,
  0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4, 0x90,
  0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x00, 0x66, 0x12, 0x83, 0x71, 0x60, 0x87,
  0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87,
  0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87,
  0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87,
  0x70, 0xa0, 0x07, 0x36, 0x00, 0x03, 0x3a, 0xf0, 0x03, 0x30, 0xf0, 0x03,
  0x24, 0x94, 0x26, 0x9d, 0x33, 0x91, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc,
  0xc3, 0x3c, 0xb8, 0x81, 0x2c, 0xdc, 0x02, 0x2d, 0x94, 0x03, 0x3e, 0xd0,
  0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94,
  0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc,
  0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x81, 0x1c, 0xf8, 0x01, 0x18, 0xf8,
  0x01, 0x0a, 0x42, 0x4a, 0x93, 0xa0, 0x3c, 0x4b, 0x58, 0x00, 0x49, 0xf2,
  0x19, 0x60, 0x8a, 0x90, 0xcb, 0x2f, 0x16, 0x07, 0x98, 0x7c, 0xdc, 0xc7,
  0x51, 0xb0, 0x0e, 0x23, 0x0c, 0xce, 0x30, 0x82, 0x00, 0xdc, 0x63, 0x2c,
  0x4e, 0x00, 0x2c, 0x9c, 0xd3, 0x48, 0x13, 0xd0, 0x4c, 0x12, 0xa2, 0xd8,
  0xb2, 0x75, 0xc2, 0x30, 0x0c, 0xc3, 0x30, 0x74, 0x1d, 0xc7, 0x71, 0x1c,
  0x07, 0x00, 0xe8, 0x9d, 0x23, 0x00, 0x05, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xae, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x78, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71,
  0x60, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d,
  0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76,
  0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a,
  0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xa0, 0xf3, 0x40, 0x00, 0x19, 0x32, 0x52, 0x44, 0x04, 0xa0, 0x03, 0x80,
  0xe9, 0x00, 0xe0, 0x21, 0xcf, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x02, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x05, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x0e, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x24, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x79, 0x80,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x23,
  0x01, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x87, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x8f, 0x05, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x1e, 0x0c, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x1b, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x3c, 0x20, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x02, 0x4a, 0xa0, 0x0c, 0x46, 0x00, 0x8a, 0xa1, 0x08,
  0x4a, 0xa2, 0x00, 0x07, 0x0a, 0xa1, 0x1c, 0x0a, 0x30, 0xa0, 0x40, 0x03,
  0x0a, 0x37, 0xa0, 0x80, 0x03, 0x0a, 0x3a, 0xa0, 0xc0, 0x03, 0x0a, 0x3e,
  0xa0, 0x00, 0x05, 0x0a, 0x52, 0xa0, 0x40, 0x05, 0x0a, 0x56, 0xa0, 0x14,
  0x0a, 0x58, 0xa0, 0x90, 0x05, 0x0a, 0x5a, 0xa0, 0xb0, 0x05, 0x0a, 0x5c,
  0xa0, 0xd0, 0x05, 0x0a, 0x5e, 0xa0, 0xf0, 0x05, 0x0a, 0xa2, 0x2c, 0x05,
  0x0a, 0xb1, 0xa0, 0x4c, 0x0a, 0xa4, 0x18, 0x03, 0xa8, 0x1b, 0x01, 0xa8,
  0x01, 0x8a, 0x0b, 0x90, 0x10, 0x10, 0x81, 0xd0, 0x19, 0x00, 0x52, 0x67,
  0x00, 0xe8, 0x9d, 0x01, 0x20, 0x78, 0x06, 0x80, 0xc8, 0x19, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1,
  0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41,
  0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a,
  0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9,
  0x10, 0x04, 0x13, 0x04, 0xc0, 0x99, 0x20, 0x00, 0xcf, 0x06, 0x61, 0x20,
  0x26, 0x08, 0x00, 0xb4, 0x41, 0x30, 0x0c, 0x0a, 0x63, 0x73, 0x13, 0x04,
  0x20, 0xda, 0x30, 0x20, 0x09, 0x31, 0x41, 0x20, 0x03, 0x3c, 0x60, 0x73,
  0x96, 0xe4, 0xf6, 0x85, 0x94, 0x46, 0xf7, 0x65, 0x95, 0x56, 0x76, 0xa7,
  0x35, 0x41, 0x00, 0xa4, 0x09, 0x02, 0x30, 0x6d, 0x10, 0x0c, 0x67, 0x43,
  0x62, 0x2c, 0x8c, 0x61, 0x0c, 0x8d, 0xf1, 0x4c, 0x10, 0xd0, 0x80, 0x0e,
  0x78, 0x9d, 0x25, 0xb9, 0x7d, 0x4d, 0xa1, 0x85, 0x91, 0xbd, 0xdd, 0x7d,
  0x51, 0xc9, 0x85, 0xb9, 0xcd, 0xb1, 0xd5, 0x8d, 0x95, 0xb9, 0x8d, 0xe5,
  0x6d, 0x48, 0x86, 0x48, 0x32, 0x86, 0xa1, 0x31, 0x9e, 0x0d, 0x02, 0x34,
  0x4d, 0x10, 0xd4, 0xa0, 0x0e, 0xa8, 0x9c, 0x3d, 0xd5, 0xd1, 0x7d, 0x51,
  0xa5, 0xb1, 0x95, 0xcd, 0x4d, 0x10, 0xba, 0x38, 0xd8, 0xb0, 0x18, 0x95,
  0x65, 0x18, 0x43, 0x73, 0x5d, 0xd7, 0xb3, 0x21, 0xc0, 0x26, 0x08, 0x70,
  0x70, 0x07, 0x7c, 0xce, 0xd8, 0xde, 0xc4, 0xc2, 0xd8, 0x86, 0xde, 0xdc,
  0xe6, 0xe8, 0xc2, 0xdc, 0xe8, 0xe6, 0x26, 0x08, 0x00, 0xb5, 0x01, 0x31,
  0xb4, 0xcd, 0x30, 0x06, 0x0e, 0xd8, 0x10, 0x74, 0x1b, 0x08, 0x2a, 0xf3,
  0x80, 0x09, 0xc2, 0x1b, 0xd8, 0x01, 0x97, 0x33, 0xab, 0xb4, 0xb2, 0x3b,
  0xaa, 0xb7, 0x21, 0xb6, 0x34, 0xb8, 0x09, 0x02, 0x50, 0x6d, 0x18, 0xc4,
  0x40, 0x0c, 0x9a, 0x09, 0x02, 0x60, 0x6d, 0x40, 0x92, 0x30, 0x68, 0xc6,
  0x80, 0x30, 0xc8, 0xc0, 0x21, 0x72, 0x66, 0x24, 0x57, 0x37, 0x47, 0x57,
  0xd7, 0x36, 0x41, 0x00, 0xae, 0x0d, 0x46, 0x62, 0x06, 0xc4, 0x19, 0x90,
  0x81, 0x43, 0xe4, 0xac, 0xc9, 0x6e, 0x6a, 0x2c, 0x8c, 0xad, 0x6c, 0x82,
  0x00, 0x60, 0x1b, 0x8c, 0x24, 0x0d, 0x08, 0x35, 0x20, 0x03, 0x87, 0xc6,
  0x19, 0x51, 0x99, 0x58, 0xdd, 0xd9, 0x04, 0x01, 0xc8, 0x36, 0x18, 0x09,
  0x1b, 0x10, 0x6d, 0x40, 0x06, 0x0e, 0x9d, 0xb3, 0x24, 0x37, 0xbb, 0xa9,
  0x31, 0xb9, 0xb2, 0x32, 0xb7, 0xa9, 0x34, 0xbd, 0xb2, 0x09, 0x02, 0xa0,
  0x6d, 0x30, 0x92, 0x37, 0x20, 0xe0, 0x80, 0x0c, 0x1c, 0x2e, 0x67, 0x53,
  0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x13, 0x04, 0x60,
  0xdb, 0x60, 0x24, 0x72, 0x40, 0xcc, 0x01, 0x19, 0x38, 0x64, 0xce, 0x92,
  0xdc, 0xec, 0xa4, 0xca, 0xc6, 0xe8, 0xa6, 0xd2, 0xf4, 0xca, 0x26, 0x08,
  0x00, 0xb7, 0xc1, 0x48, 0xea, 0x80, 0xb0, 0x03, 0x32, 0x70, 0x98, 0x9c,
  0x49, 0x95, 0x8d, 0xd1, 0x4d, 0xa5, 0xe9, 0x95, 0x4d, 0x10, 0x80, 0x6e,
  0x83, 0x91, 0xe0, 0x01, 0x91, 0x07, 0x64, 0xe0, 0xb0, 0x39, 0x93, 0x2a,
  0x1b, 0xa3, 0x9b, 0x4a, 0xd3, 0x2b, 0x83, 0x92, 0x2b, 0xb3, 0x9b, 0x20,
  0x00, 0xde, 0x06, 0x23, 0xd9, 0x03, 0x82, 0x0f, 0xc8, 0xc0, 0x21, 0x74,
  0x26, 0x55, 0x36, 0xf7, 0xc6, 0x56, 0x47, 0x97, 0xf6, 0xe6, 0x36, 0x35,
  0x16, 0xc6, 0x56, 0x36, 0x41, 0x00, 0xbe, 0x0d, 0x46, 0xe2, 0x07, 0xc4,
  0x1f, 0x90, 0x81, 0xc3, 0xe5, 0x4c, 0xaa, 0x6c, 0x8c, 0xee, 0xc9, 0xcc,
  0x6c, 0xae, 0x8c, 0x6e, 0x82, 0x00, 0x80, 0xc1, 0x06, 0x23, 0x09, 0x05,
  0x42, 0x14, 0xc8, 0xc0, 0xe1, 0x72, 0x26, 0x55, 0x36, 0x46, 0xf7, 0x24,
  0x97, 0x76, 0x96, 0xe6, 0x36, 0x41, 0x00, 0xc2, 0x60, 0x82, 0x00, 0x88,
  0xc1, 0x06, 0x23, 0x21, 0x05, 0xa2, 0x14, 0xc8, 0xc0, 0x14, 0xa8, 0x9c,
  0x3d, 0xc9, 0xd1, 0xa1, 0xbd, 0x35, 0xbd, 0x91, 0x95, 0x4d, 0x10, 0x80,
  0x31, 0x98, 0x20, 0x74, 0x72, 0xb0, 0x01, 0x49, 0x50, 0x81, 0x48, 0x05,
  0x32, 0x70, 0x1c, 0x55, 0xa0, 0x72, 0x56, 0xe5, 0x06, 0x27, 0xf7, 0xa6,
  0x56, 0x36, 0x46, 0x37, 0x41, 0x00, 0xc8, 0x60, 0x03, 0x92, 0xb0, 0x02,
  0xd1, 0x0a, 0x64, 0xe0, 0x38, 0xaa, 0xc0, 0xe7, 0x8c, 0xa8, 0xcc, 0xed,
  0x2d, 0x6d, 0x2e, 0xcd, 0xed, 0x4c, 0x2a, 0xcc, 0xed, 0xac, 0x6c, 0x82,
  0x00, 0x94, 0xc1, 0x06, 0x24, 0x79, 0x05, 0x02, 0x16, 0xc8, 0xc0, 0x71,
  0x54, 0x81, 0xd5, 0x19, 0x14, 0x5b, 0x98, 0x5b, 0x19, 0x51, 0xda, 0x1c,
  0xdd, 0x54, 0x99, 0xdb, 0x5c, 0x1a, 0x5d, 0x9a, 0x5d, 0x1a, 0x5d, 0xde,
  0x04, 0x01, 0x30, 0x83, 0x0d, 0x46, 0x22, 0x0b, 0xc4, 0x2c, 0x90, 0x81,
  0x43, 0xe8, 0x4c, 0x88, 0xad, 0x4e, 0x4e, 0x2a, 0x8c, 0x2c, 0xad, 0x6e,
  0x6e, 0x6a, 0x2c, 0x8c, 0xad, 0x6c, 0x82, 0x00, 0x9c, 0xc1, 0x06, 0x24,
  0xa9, 0x05, 0xc2, 0x16, 0xc8, 0xc0, 0x71, 0x54, 0x81, 0xd5, 0xd9, 0xd0,
  0x9b, 0x1b, 0x5d, 0x9a, 0x5b, 0x5d, 0x59, 0xd0, 0xd8, 0x58, 0x5d, 0x5b,
  0x1d, 0x5b, 0x18, 0x5d, 0xda, 0x9b, 0xdb, 0x04, 0x01, 0x40, 0x83, 0x0d,
  0x46, 0x82, 0x0b, 0x44, 0x2e, 0x90, 0x81, 0x43, 0xed, 0x2c, 0x69, 0xee,
  0xea, 0x4d, 0x8e, 0x8d, 0x6c, 0x0a, 0x2e, 0x6c, 0xac, 0xac, 0xe9, 0x8d,
  0x2e, 0xed, 0xcd, 0xad, 0xc8, 0x2d, 0x4c, 0x8c, 0xad, 0x8c, 0x6c, 0x82,
  0x00, 0xa4, 0xc1, 0x06, 0x23, 0xd9, 0x05, 0x82, 0x17, 0xc8, 0xc0, 0x14,
  0xb8, 0x9c, 0x19, 0xc9, 0x85, 0xb5, 0x95, 0x25, 0xb9, 0x91, 0x95, 0xe1,
  0x4d, 0x10, 0x00, 0x35, 0xd8, 0x60, 0x24, 0xbe, 0x40, 0xfc, 0x02, 0x19,
  0x98, 0xc2, 0x86, 0x8a, 0x2b, 0x03, 0x34, 0x58, 0x03, 0x37, 0x88, 0x03,
  0x3a, 0xb8, 0x03, 0x3d, 0xe8, 0x03, 0x50, 0x18, 0x85, 0x53, 0x58, 0x05,
  0x57, 0x88, 0x05, 0x5a, 0xb8, 0x05, 0x5d, 0xe8, 0x05, 0x70, 0xd8, 0x30,
  0x18, 0x60, 0x10, 0x0e, 0x13, 0x04, 0x42, 0xd8, 0x00, 0x6c, 0x18, 0x0c,
  0x72, 0x20, 0x87, 0x0d, 0x41, 0x39, 0x6c, 0x18, 0x86, 0x71, 0x30, 0x07,
  0x12, 0x6d, 0x61, 0x69, 0x6e, 0x13, 0x84, 0x38, 0x98, 0x83, 0x09, 0x02,
  0xb0, 0x06, 0x1b, 0x06, 0x75, 0x10, 0x83, 0x61, 0x03, 0x61, 0xa4, 0x83,
  0x18, 0xac, 0xc3, 0x86, 0x62, 0x1c, 0xd0, 0x01, 0xf8, 0xd8, 0x81, 0x46,
  0x18, 0xdd, 0x5b, 0x5b, 0xda, 0x18, 0x0f, 0xb1, 0x30, 0x39, 0xb9, 0xb4,
  0x32, 0x39, 0x22, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x34,
  0xcc, 0xd8, 0xde, 0xc2, 0xe8, 0xe6, 0x26, 0x08, 0x00, 0x1b, 0xb0, 0x48,
  0x73, 0x9b, 0xa3, 0x9b, 0x9b, 0x20, 0x00, 0x6d, 0x40, 0x22, 0xcd, 0x8d,
  0x6e, 0x6e, 0x82, 0x00, 0xb8, 0x01, 0x11, 0xba, 0x32, 0xbc, 0x2f, 0xb6,
  0xb7, 0x30, 0xb2, 0x09, 0x02, 0xf0, 0x06, 0x4c, 0xe8, 0xca, 0xf0, 0xbe,
  0xe6, 0xe8, 0xde, 0xe4, 0xca, 0x58, 0xd4, 0xa5, 0xb9, 0xd1, 0xcd, 0x4d,
  0x10, 0x00, 0x38, 0xd8, 0x20, 0xb9, 0x43, 0xf3, 0x0e, 0x0d, 0x3c, 0x34,
  0xf1, 0x20, 0x0f, 0xf3, 0x40, 0x0f, 0xf5, 0x60, 0x0f, 0xf7, 0x80, 0x0f,
  0xf9, 0x30, 0xe8, 0xc3, 0x3e, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49,
  0x23, 0x2b, 0x73, 0xa3, 0x9b, 0x12, 0x04, 0x55, 0xc8, 0xf0, 0x5c, 0xec,
  0xca, 0xe4, 0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x44, 0x13, 0x32, 0x3c,
  0x17, 0xbb, 0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29, 0x81, 0x51, 0x87, 0x0c,
  0xcf, 0x65, 0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c,
  0x6d, 0x4a, 0x90, 0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab,
  0x93, 0x1b, 0x2b, 0x9b, 0x9b, 0x12, 0x78, 0x95, 0xc8, 0xf0, 0x5c, 0xe8,
  0xf2, 0xe0, 0xca, 0x82, 0xdc, 0xdc, 0xde, 0xe8, 0xc2, 0xe8, 0xd2, 0xde,
  0xdc, 0xe6, 0xa6, 0x08, 0xe1, 0x60, 0x0e, 0x75, 0xc8, 0xf0, 0x5c, 0xca,
  0xdc, 0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8, 0xe6, 0xa6, 0x04,
  0xec, 0xd0, 0x85, 0x0c, 0xcf, 0x65, 0xec, 0xad, 0xce, 0x8d, 0xae, 0x4c,
  0x6e, 0x6e, 0x4a, 0xb0, 0x0f, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x55, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x61, 0x06, 0x13,
  0x91, 0x03, 0x3e, 0xb8, 0x81, 0x38, 0xc8, 0x43, 0x39, 0x84, 0xc3, 0x3a,
  0xb8, 0x81, 0x38, 0xc8, 0x03, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x39, 0x00, 0x00, 0x00, 0x05, 0xd0, 0x04, 0x7e, 0xf3, 0x6f, 0x33, 0x3c,
  0x5f, 0x03, 0x81, 0xb3, 0x64, 0xb0, 0x02, 0x9e, 0xc0, 0x6f, 0xfe, 0x95,
  0x86, 0xc9, 0xe9, 0xfa, 0x1c, 0x08, 0x9c, 0x25, 0x83, 0x66, 0xd0, 0x0c,
  0x97, 0xef, 0x3c, 0x7e, 0x00, 0x44, 0x11, 0x42, 0x44, 0xa6, 0x00, 0x0d,
  0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b,
  0xc3, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95,
  0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x35, 0x48,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c,
  0x0b, 0x61, 0x0b, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb,
  0xc5, 0x6d, 0x5b, 0x81, 0x18, 0x0c, 0x97, 0xef, 0x3c, 0x7e, 0xb1, 0x00,
  0xd3, 0x44, 0x34, 0xc4, 0xd0, 0x1e, 0x11, 0x01, 0x0c, 0xe2, 0x20, 0x36,
  0x60, 0xe4, 0x50, 0x8f, 0x8f, 0xdc, 0xb6, 0x11, 0x44, 0xc3, 0xe5, 0x3b,
  0x8f, 0x6f, 0x44, 0x0e, 0xf5, 0x88, 0x83, 0x8f, 0xdc, 0xb6, 0x21, 0x54,
  0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd7, 0x44, 0x45, 0x44, 0xe9, 0x00,
  0x83, 0x5f, 0xdc, 0xb6, 0x1d, 0x58, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11,
  0xd7, 0x44, 0x45, 0x04, 0x3b, 0x39, 0x11, 0xe1, 0x17, 0xb7, 0x6d, 0x03,
  0xd9, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x47, 0x44, 0x00, 0x83, 0x38, 0x88,
  0x0d, 0x18, 0x39, 0xd4, 0xe3, 0x23, 0xb7, 0x6d, 0x09, 0xcf, 0x70, 0xf9,
  0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x26, 0x40, 0x30,
  0x00, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xfb, 0xa6, 0xd6,
  0x53, 0x7c, 0x3b, 0x9b, 0x85, 0x7a, 0xdd, 0x19, 0x63, 0x44, 0xd4, 0xd1,
  0x44, 0x58, 0x49, 0x4c, 0xf0, 0x10, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00,
  0x3c, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xd8, 0x10, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x33, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0xc0, 0x00, 0xd2, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x90, 0x36, 0x18, 0xc4, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x80,
  0x04, 0x54, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x86, 0x09, 0x01, 0x01, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xcc, 0xc1, 0x1c, 0x01, 0x18, 0x0c, 0x22, 0x00, 0xc3, 0x08, 0x40,
  0x09, 0x04, 0x1a, 0xca, 0x00, 0x00, 0x00, 0x15, 0x45, 0x00, 0x00, 0x3a,
  0xca, 0x20, 0x00, 0x00, 0x25, 0x73, 0x04, 0x08, 0x2d, 0xf7, 0x0c, 0x97,
  0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x02, 0x66,
  0x06, 0xa0, 0x2c, 0x02, 0xd0, 0x00, 0x00, 0xe0, 0x38, 0x8e, 0xb3, 0xd0,
  0x73, 0xd3, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0xbf, 0x12, 0xd2, 0x4a,
  0x4c, 0x7e, 0x71, 0xdb, 0xa8, 0x70, 0x1c, 0xc7, 0x01, 0x8a, 0x12, 0x01,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x95, 0xc1, 0x01, 0x1c, 0xa2,
  0x0a, 0xe1, 0x00, 0x8e, 0x43, 0x56, 0x41, 0x1c, 0xc0, 0x71, 0x1c, 0xc7,
  0x71, 0x08, 0x3b, 0x6a, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0xe7, 0x36,
  0xaa, 0x58, 0x89, 0xc9, 0x2f, 0x6e, 0x1b, 0x11, 0x8e, 0xe3, 0x38, 0x85,
  0xd0, 0x80, 0x06, 0xa0, 0x6d, 0x8e, 0x20, 0x28, 0x46, 0x03, 0x2c, 0x00,
  0xd0, 0x91, 0x37, 0x10, 0x30, 0x8c, 0x20, 0x38, 0x33, 0xb5, 0xc1, 0x38,
  0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e,
  0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d,
  0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b,
  0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x81, 0x1c, 0xf8, 0x01, 0x18,
  0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f,
  0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x00, 0x98, 0x49, 0x0c, 0xc6,
  0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0,
  0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec,
  0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8,
  0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe4, 0xc0, 0x0f, 0xc0,
  0xc0, 0x0f, 0x90, 0x10, 0x8a, 0x34, 0x0e, 0x23, 0x10, 0xce, 0x4c, 0x6d,
  0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5,
  0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c,
  0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6,
  0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x40, 0x07, 0x7e,
  0x00, 0x06, 0x7e, 0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3,
  0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x00, 0x66, 0x12,
  0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28,
  0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0,
  0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30,
  0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03, 0x3a, 0xf0,
  0x03, 0x30, 0xf0, 0x03, 0x24, 0x94, 0x26, 0x9d, 0x33, 0x91, 0xc1, 0x38,
  0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x81, 0x2c, 0xdc, 0x02, 0x2d,
  0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29,
  0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f,
  0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x81, 0x1c,
  0xf8, 0x01, 0x18, 0xf8, 0x01, 0x0a, 0x42, 0x4a, 0x93, 0xa0, 0x3c, 0x4b,
  0x58, 0x00, 0x49, 0xf2, 0x19, 0x60, 0x8a, 0x90, 0xcb, 0x2f, 0x16, 0x07,
  0x98, 0x7c, 0xdc, 0xc7, 0x51, 0xb0, 0x0e, 0x23, 0x0c, 0xce, 0x30, 0x82,
  0x00, 0xdc, 0x63, 0x2c, 0x4e, 0x00, 0x2c, 0x9c, 0xd3, 0x48, 0x13, 0xd0,
  0x4c, 0x12, 0xa2, 0xd8, 0xb2, 0x75, 0xc2, 0x30, 0x0c, 0xc3, 0x30, 0x74,
  0x1d, 0xc7, 0x71, 0x1c, 0x07, 0x00, 0xe8, 0x9d, 0x23, 0x00, 0x85, 0x29,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xae, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xd0,
  0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x6d, 0x90,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xa0, 0xf3, 0x40, 0x00,
  0x19, 0x32, 0x52, 0x44, 0x04, 0xa0, 0x03, 0x80, 0xe9, 0x00, 0xe0, 0x21,
  0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x02, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x0e, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x24, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x79, 0x80, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x23, 0x01, 0x01, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x87, 0x02, 0x02, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x05, 0x04,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x0c,
  0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c,
  0x1b, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x79, 0x3c, 0x20, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc8, 0x02, 0x01, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x02,
  0x4a, 0xa0, 0x0c, 0x8a, 0x61, 0x04, 0xa0, 0x08, 0x4a, 0xa2, 0x00, 0x07,
  0x0a, 0xa1, 0x20, 0xa8, 0x1b, 0x01, 0xa0, 0x78, 0x04, 0xa0, 0x00, 0x09,
  0x01, 0x11, 0x48, 0x9d, 0x01, 0x20, 0x78, 0x06, 0x80, 0xd0, 0x19, 0x00,
  0x22, 0x67, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b,
  0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99,
  0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62,
  0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73,
  0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0xc0, 0x99, 0x20, 0x00,
  0xcf, 0x06, 0x61, 0x20, 0x26, 0x08, 0x00, 0xb4, 0x41, 0x18, 0x0c, 0x0a,
  0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x40, 0x34, 0x41, 0x20,
  0x83, 0x8e, 0xc0, 0x04, 0x01, 0x90, 0x26, 0x08, 0xc0, 0xb4, 0x41, 0x50,
  0x9c, 0x0d, 0x89, 0xb2, 0x30, 0x8a, 0x32, 0x34, 0xca, 0x33, 0x41, 0x40,
  0x03, 0x6e, 0x43, 0x32, 0x44, 0x8c, 0x32, 0x0c, 0x8d, 0xf2, 0x6c, 0x10,
  0x20, 0x69, 0x82, 0xa0, 0x06, 0xda, 0x04, 0xa1, 0xbb, 0x36, 0x2c, 0x0a,
  0xc5, 0x28, 0xca, 0xd0, 0x54, 0x55, 0xf5, 0x6c, 0x08, 0xac, 0x09, 0x02,
  0x1c, 0x6c, 0x13, 0x04, 0x80, 0xda, 0x80, 0x28, 0x18, 0xa3, 0x28, 0x43,
  0x06, 0x6c, 0x08, 0xb4, 0x0d, 0xc4, 0x74, 0x6d, 0xc0, 0x04, 0x81, 0x10,
  0x48, 0xb4, 0x85, 0xa5, 0xb9, 0x4d, 0x10, 0xe2, 0x20, 0x9b, 0x20, 0x00,
  0xd5, 0x04, 0x01, 0xb0, 0x36, 0x0c, 0x61, 0x00, 0x06, 0xc3, 0x06, 0x42,
  0xf9, 0xc0, 0x40, 0x0c, 0x36, 0x14, 0x9d, 0x07, 0x70, 0x63, 0xc0, 0x21,
  0xcd, 0x8d, 0x8e, 0xcf, 0x5b, 0x9b, 0x5b, 0x1a, 0xdc, 0x1b, 0x5d, 0x99,
  0x1b, 0x1d, 0xc8, 0x18, 0x5a, 0x98, 0x1c, 0xa3, 0xa9, 0xb4, 0x36, 0x38,
  0xb6, 0x32, 0x90, 0xa1, 0x97, 0xa1, 0x95, 0x15, 0x10, 0x2a, 0xa1, 0xa0,
  0xa0, 0x0d, 0xc1, 0x19, 0x4c, 0x10, 0xe2, 0x00, 0xdb, 0x30, 0x98, 0x01,
  0x1a, 0xa4, 0xc1, 0x86, 0xa1, 0x0c, 0xd4, 0x20, 0x0d, 0x36, 0x0c, 0x6b,
  0xb0, 0x06, 0x69, 0x50, 0x85, 0x8d, 0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac,
  0xcc, 0x8d, 0x6e, 0x4a, 0x10, 0x54, 0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93,
  0x9b, 0x4b, 0x7b, 0x73, 0x9b, 0x12, 0x10, 0x4d, 0xc8, 0xf0, 0x5c, 0xec,
  0xc2, 0xd8, 0xec, 0xca, 0xe4, 0xa6, 0x04, 0x46, 0x1d, 0x32, 0x3c, 0x97,
  0x39, 0xb4, 0x30, 0xb2, 0x32, 0xb9, 0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29,
  0x01, 0x52, 0x86, 0x0c, 0xcf, 0x45, 0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e,
  0xac, 0x6c, 0x6e, 0x4a, 0xb0, 0xd5, 0x21, 0xc3, 0x73, 0x29, 0x73, 0xa3,
  0x93, 0xcb, 0x83, 0x7a, 0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12, 0x8c, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e,
  0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41,
  0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21,
  0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x61, 0x06, 0x13, 0x91, 0x03, 0x3e, 0xb8,
  0x81, 0x38, 0xc8, 0x43, 0x39, 0x84, 0xc3, 0x3a, 0xb8, 0x81, 0x38, 0xc8,
  0x03, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
  0x05, 0xd0, 0x04, 0x7e, 0xf3, 0x6f, 0x33, 0x3c, 0x5f, 0x03, 0x81, 0xb3,
  0x64, 0xb0, 0x02, 0x9e, 0xc0, 0x6f, 0xfe, 0x95, 0x86, 0xc9, 0xe9, 0xfa,
  0x1c, 0x08, 0x9c, 0x25, 0x83, 0x66, 0xd0, 0x0c, 0x97, 0xef, 0x3c, 0x7e,
  0x00, 0x44, 0x11, 0x42, 0x44, 0xa6, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e,
  0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc3, 0x36, 0x5c, 0xbe,
  0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84,
  0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x35, 0x48, 0xc3, 0xe5, 0x3b, 0x8f,
  0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x0b, 0xce,
  0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x5b, 0x81,
  0x18, 0x0c, 0x97, 0xef, 0x3c, 0x7e, 0xb1, 0x00, 0xd3, 0x44, 0x34, 0xc4,
  0xd0, 0x1e, 0x11, 0x01, 0x0c, 0xe2, 0x20, 0x36, 0x60, 0xe4, 0x50, 0x8f,
  0x8f, 0xdc, 0xb6, 0x11, 0x44, 0xc3, 0xe5, 0x3b, 0x8f, 0x6f, 0x44, 0x0e,
  0xf5, 0x88, 0x83, 0x8f, 0xdc, 0xb6, 0x21, 0x54, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x11, 0xd7, 0x44, 0x45, 0x44, 0xe9, 0x00, 0x83, 0x5f, 0xdc, 0xb6,
  0x1d, 0x58, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd7, 0x44, 0x45, 0x04,
  0x3b, 0x39, 0x11, 0xe1, 0x17, 0xb7, 0x6d, 0x03, 0xd9, 0x70, 0xf9, 0xce,
  0xe3, 0x4f, 0x47, 0x44, 0x00, 0x83, 0x38, 0x88, 0x0d, 0x18, 0x39, 0xd4,
  0xe3, 0x23, 0xb7, 0x6d, 0x09, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d,
  0x10, 0x61, 0x7e, 0x71, 0xdb, 0x26, 0x40, 0x30, 0x00, 0xd2, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x13, 0x04, 0x45, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x14,
  0x61, 0x40, 0x19, 0x95, 0x5b, 0x21, 0x95, 0x5c, 0xf9, 0x06, 0x14, 0x6f,
  0x40, 0x81, 0x06, 0x94, 0x5d, 0x81, 0x14, 0x70, 0x40, 0x51, 0x94, 0x45,
  0xf9, 0xff, 0x1f, 0x14, 0x20, 0x41, 0x05, 0x02, 0x22, 0x14, 0x20, 0x20,
  0x20, 0x44, 0x39, 0x94, 0x61, 0x00, 0x2d, 0x23, 0x00, 0x25, 0x50, 0x04,
  0xe5, 0x41, 0x5d, 0x0d, 0x90, 0x33, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f,
  0x63, 0x04, 0x20, 0x08, 0x82, 0x30, 0x18, 0x8c, 0x11, 0x80, 0x20, 0xfe,
  0xdf, 0x63, 0x30, 0x46, 0x70, 0xd2, 0xa5, 0x9c, 0x7e, 0x63, 0x04, 0x62,
  0x1b, 0xb3, 0xf1, 0x37, 0x46, 0x50, 0x9b, 0xbe, 0xec, 0x7b, 0x63, 0x04,
  0x66, 0x6f, 0xa6, 0x74, 0x37, 0x46, 0xd0, 0xaf, 0x27, 0x98, 0x4e, 0x63,
  0x04, 0x20, 0x08, 0x82, 0x60, 0x18, 0x8c, 0x11, 0x80, 0x20, 0x08, 0xe2,
  0xde, 0x08, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xd5,
  0xc1, 0xf7, 0xc4, 0x41, 0x1c, 0xac, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x78, 0x76, 0x00, 0x06, 0x51, 0x1d, 0xd4, 0x01, 0x1b, 0x8c, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0x77, 0x07, 0x61, 0x20, 0xcd, 0xc1, 0x1c,
  0xb4, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x78, 0x78, 0x20, 0x06,
  0x11, 0x1d, 0xd0, 0x81, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41,
  0x31, 0x0a, 0x62, 0x50, 0x07, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x50,
  0x90, 0xc2, 0x18, 0xe4, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x14,
  0xa4, 0x30, 0x06, 0x77, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x45,
  0x29, 0x90, 0xc1, 0x1e, 0x8c, 0x18, 0x14, 0x00, 0x08, 0x82, 0xc1, 0x51,
  0x0a, 0x61, 0x30, 0xdc, 0x10, 0xe8, 0x01, 0x18, 0xcc, 0x32, 0x04, 0x42,
  0x30, 0x6c, 0x40, 0xb0, 0xc2, 0x1e, 0x0c, 0xc0, 0xb0, 0x01, 0xb1, 0x0a,
  0x7b, 0x30, 0x00, 0xb3, 0x04, 0xc2, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x24, 0xa6, 0x60, 0x06, 0x76, 0x50, 0xc4, 0x1d, 0x5c, 0x11, 0x78, 0x70,
  0x85, 0x80, 0xc2, 0x15, 0xd2, 0x07, 0x57, 0x84, 0x00, 0x45, 0x08, 0x30,
  0x62, 0xd0, 0x00, 0x20, 0x08, 0x06, 0x92, 0x2a, 0xcc, 0x81, 0x13, 0x0a,
  0x42, 0x40, 0x07, 0x74, 0x40, 0x07, 0x74, 0x30, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x14, 0x2b, 0x94,
  0x42, 0x60, 0x81, 0x27, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xd8,
  0x56, 0x01, 0x0e, 0xa4, 0x36, 0x18, 0x4d, 0x08, 0x84, 0xe1, 0x88, 0x21,
  0x10, 0xbe, 0xe1, 0x88, 0x23, 0x0b, 0xbe, 0x0a, 0x84, 0x1d, 0x8e, 0x48,
  0xc6, 0x20, 0xf8, 0x46, 0x0c, 0x1a, 0x00, 0x04, 0xc1, 0x40, 0xaa, 0x05,
  0x3f, 0xd0, 0x58, 0xa1, 0x61, 0xfe, 0xe0, 0x0f, 0xfe, 0xe0, 0x0f, 0x46,
  0x13, 0x82, 0x60, 0x34, 0x41, 0x10, 0x46, 0x13, 0x86, 0x61, 0xc4, 0x60,
  0x01, 0x40, 0x10, 0x0c, 0x30, 0x5b, 0x00, 0x85, 0x41, 0x08, 0xce, 0xc0,
  0x0c, 0xca, 0x60, 0x38, 0x22, 0x28, 0x03, 0xe2, 0xab, 0x03, 0xd9, 0x0b,
  0x80, 0xa8, 0xe4, 0x0d, 0xb8, 0x88, 0x40, 0x8b, 0x09, 0xf6, 0x02, 0x20,
  0x2c, 0x08, 0x85, 0x1b, 0x54, 0x60, 0xec, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x6c, 0xbf, 0x40, 0x0a, 0x66, 0x00, 0x0a, 0xa3, 0x09, 0x01, 0x60,
  0x81, 0x26, 0x9f, 0xe9, 0x86, 0x36, 0x08, 0x96, 0xd1, 0x04, 0x0c, 0x18,
  0x4d, 0xc8, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xa0, 0xd0, 0x21,
  0x1c, 0x04, 0xdb, 0x03, 0x2e, 0x3e, 0x26, 0x04, 0xf2, 0xb1, 0xc0, 0x83,
  0x8f, 0x05, 0x85, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x62,
  0x07, 0x5b, 0x08, 0xf0, 0xc0, 0x40, 0x21, 0xa0, 0x8f, 0x05, 0x8a, 0x7c,
  0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x7a, 0x87, 0x5b, 0x08, 0xf4,
  0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2c, 0x78, 0xd0, 0x85, 0x20,
  0x0f, 0x4a, 0x0d, 0xda, 0x61, 0x47, 0x0c, 0x1a, 0x00, 0x04, 0xc1, 0x40,
  0xa2, 0x87, 0x5e, 0xc0, 0x83, 0x75, 0x60, 0x83, 0xc0, 0x17, 0x7c, 0xc1,
  0x17, 0x7c, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x28, 0x7b, 0x78, 0x87, 0xc0, 0x02, 0x54, 0x90,
  0xcf, 0x70, 0x44, 0x90, 0x06, 0xc2, 0x37, 0x1c, 0x51, 0x84, 0x42, 0xf0,
  0x55, 0x20, 0xec, 0x70, 0xc4, 0xb1, 0x0a, 0xc1, 0x37, 0x62, 0xd0, 0x00,
  0x20, 0x08, 0x06, 0x52, 0x3f, 0x98, 0x83, 0x28, 0xd0, 0x43, 0x1d, 0x28,
  0xe7, 0x70, 0x0e, 0xe7, 0x70, 0x0e, 0xa3, 0x09, 0x41, 0x30, 0x9a, 0x20,
  0x08, 0xa3, 0x09, 0xc3, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x98,
  0x3f, 0xa0, 0xc3, 0x20, 0x04, 0xaf, 0xe0, 0x0a, 0xad, 0x30, 0x1c, 0x11,
  0xb4, 0x02, 0xf1, 0xd5, 0x81, 0xec, 0x05, 0x40, 0x54, 0x72, 0x0b, 0x5c,
  0x44, 0xa0, 0xc5, 0x04, 0x7b, 0x01, 0x10, 0x56, 0x06, 0x94, 0x7c, 0xa6,
  0x1b, 0x62, 0x21, 0x38, 0x8c, 0x17, 0xa6, 0xf8, 0xd8, 0x18, 0x04, 0xf2,
  0xb1, 0xa0, 0x82, 0x8f, 0x05, 0x66, 0x20, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xb0, 0x5a, 0xe2, 0x1e, 0x82, 0x5c, 0xb0, 0x70, 0x08, 0xe8,
  0x63, 0xc1, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb0, 0x60,
  0x02, 0x1f, 0x82, 0x5d, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x2b,
  0x26, 0xf6, 0x21, 0x08, 0x83, 0x5a, 0x05, 0x95, 0xd8, 0x11, 0x83, 0x06,
  0x00, 0x41, 0x30, 0x90, 0x6a, 0xc2, 0x1f, 0x72, 0x81, 0x25, 0x5a, 0x21,
  0xf8, 0x87, 0x7f, 0xf8, 0x87, 0x7f, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0xea, 0x26, 0x60, 0x22,
  0xb0, 0x20, 0x1d, 0xe4, 0x33, 0x1c, 0x11, 0xa8, 0x82, 0xf0, 0x0d, 0x47,
  0x14, 0xe2, 0x10, 0x7c, 0x15, 0x08, 0x3b, 0x1c, 0x71, 0xb0, 0x43, 0xf0,
  0x8d, 0x18, 0x34, 0x00, 0x08, 0x82, 0x81, 0xe4, 0x13, 0x27, 0x31, 0x0e,
  0x35, 0x61, 0x0b, 0x0a, 0x4a, 0xa0, 0x04, 0x4a, 0xa0, 0xc4, 0x68, 0x42,
  0x10, 0x8c, 0x26, 0x08, 0xc2, 0x68, 0xc2, 0x30, 0x8c, 0x18, 0x2c, 0x00,
  0x08, 0x82, 0x01, 0xf6, 0x13, 0x29, 0x31, 0x08, 0x01, 0x3c, 0xbc, 0x83,
  0x3b, 0x0c, 0x47, 0x04, 0xee, 0x40, 0x7c, 0x75, 0x20, 0x7b, 0x01, 0x10,
  0x95, 0xe0, 0x03, 0x17, 0x11, 0x68, 0x31, 0xc1, 0x5e, 0x00, 0x84, 0x99,
  0x02, 0x25, 0x9f, 0xe9, 0x06, 0x79, 0x08, 0x0e, 0xeb, 0x87, 0x29, 0x3e,
  0x46, 0x0a, 0x81, 0x7c, 0x2c, 0xa8, 0xe0, 0x63, 0xc1, 0x29, 0xc8, 0x67,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2c, 0xb7, 0xc0, 0x89, 0x40, 0x1f,
  0x4c, 0x24, 0x02, 0xfa, 0x58, 0x70, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xac, 0xb8, 0xc8, 0x89, 0x80, 0x1f, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xc0, 0x92, 0x0b, 0x9e, 0x08, 0xc2, 0xa0, 0xd8, 0xc1, 0x2d,
  0x76, 0xc4, 0xa0, 0x01, 0x40, 0x10, 0x0c, 0x24, 0xbb, 0xf8, 0x09, 0x7d,
  0x68, 0x0b, 0x77, 0x08, 0xc0, 0x02, 0x2c, 0xc0, 0x02, 0x2c, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80,
  0xc2, 0x8b, 0xb8, 0x08, 0x2c, 0x50, 0x09, 0xf9, 0x0c, 0x47, 0x04, 0xeb,
  0x20, 0x7c, 0xc3, 0x11, 0xc5, 0x48, 0x04, 0x5f, 0x05, 0xc2, 0x0e, 0x47,
  0x1c, 0x2d, 0x11, 0x7c, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0x20, 0xfd,
  0x05, 0x5a, 0x90, 0x84, 0x5d, 0xdc, 0x83, 0x92, 0x16, 0x69, 0x91, 0x16,
  0x69, 0x31, 0x9a, 0x10, 0x04, 0xa3, 0x09, 0x82, 0x30, 0x9a, 0x30, 0x0c,
  0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x80, 0x81, 0x86, 0x5a, 0x0c, 0x42,
  0x10, 0x13, 0x30, 0xf1, 0x12, 0xc3, 0x11, 0xc1, 0x4b, 0x10, 0x5f, 0x1d,
  0xc8, 0x5e, 0x00, 0x44, 0x25, 0x39, 0xc1, 0x45, 0x04, 0x5a, 0x4c, 0xb0,
  0x17, 0x00, 0x61, 0xe7, 0x40, 0xc9, 0x67, 0xba, 0x61, 0x26, 0x82, 0xc3,
  0x7c, 0x62, 0x8a, 0x8f, 0x95, 0x43, 0x20, 0x1f, 0x0b, 0x2a, 0xf8, 0x58,
  0x80, 0x0e, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xeb, 0x35,
  0xf2, 0x22, 0xd8, 0x09, 0x1b, 0x8b, 0x80, 0x3e, 0x16, 0x1c, 0xf2, 0x19,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x4b, 0x36, 0xf4, 0x22, 0xe8, 0x89,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb0, 0x66, 0xa3, 0x2f, 0x82, 0x30,
  0x28, 0x97, 0x80, 0x8d, 0x1d, 0x31, 0x68, 0x00, 0x10, 0x04, 0x03, 0xe9,
  0x36, 0x40, 0x63, 0x27, 0x5c, 0x23, 0x70, 0x89, 0xd0, 0x08, 0x8d, 0xd0,
  0x08, 0x8d, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0xa0, 0x72, 0x43, 0x36, 0x02, 0x0b, 0xd6, 0x42, 0x3e,
  0xc3, 0x11, 0x01, 0x4b, 0x08, 0xdf, 0x70, 0x44, 0x41, 0x16, 0xc1, 0x57,
  0x81, 0xb0, 0xc3, 0x11, 0x87, 0x5b, 0x04, 0xdf, 0x88, 0x41, 0x03, 0x80,
  0x20, 0x18, 0x48, 0xe0, 0x91, 0x1a, 0x65, 0x71, 0x1b, 0xca, 0x4d, 0xa8,
  0x86, 0x6a, 0xa8, 0x86, 0x6a, 0x8c, 0x26, 0x04, 0xc1, 0x68, 0x82, 0x20,
  0x8c, 0x26, 0x0c, 0xc3, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x60, 0xe1,
  0xb1, 0x1a, 0x83, 0x10, 0xc8, 0x45, 0x5c, 0xc0, 0xc5, 0x70, 0x44, 0x00,
  0x17, 0xc4, 0x57, 0x07, 0xb2, 0x17, 0x00, 0x51, 0x89, 0x5e, 0x70, 0x11,
  0x81, 0x16, 0x13, 0xec, 0x05, 0x40, 0x18, 0x4a, 0x50, 0xf2, 0x99, 0x6e,
  0xa0, 0x8b, 0xe0, 0xb0, 0xbf, 0x98, 0xe2, 0x63, 0x26, 0x11, 0xc8, 0xc7,
  0x82, 0x0a, 0x3e, 0x16, 0xa4, 0x84, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0xc0, 0x82, 0x0f, 0xdd, 0x08, 0xf8, 0xc2, 0x48, 0x23, 0xa0, 0x8f,
  0x05, 0x87, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x9a, 0x8f,
  0xdd, 0x08, 0xfc, 0x62, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2c, 0xfa,
  0xf0, 0x8d, 0x20, 0x0c, 0x46, 0x0c, 0x1a, 0x00, 0x04, 0xc1, 0x40, 0xba,
  0x0f, 0xf0, 0xd8, 0x0b, 0xf7, 0x08, 0x03, 0x92, 0x08, 0x8f, 0xf0, 0x08,
  0x8f, 0xf0, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0x2a, 0x3f, 0xe4, 0x23, 0xb0, 0x60, 0x35, 0xe4,
  0x33, 0x1c, 0x11, 0xb0, 0x85, 0xf0, 0x0d, 0x47, 0x14, 0xa4, 0x11, 0x7c,
  0x15, 0x08, 0x3b, 0x1c, 0x71, 0xb8, 0x46, 0xf0, 0x8d, 0x18, 0x34, 0x00,
  0x08, 0x82, 0x81, 0x04, 0x22, 0xe9, 0x51, 0x1a, 0xf7, 0xa1, 0x06, 0x2d,
  0xa1, 0x1e, 0xea, 0xa1, 0x1e, 0xea, 0x31, 0x9a, 0x10, 0x04, 0xa3, 0x09,
  0x82, 0x30, 0x9a, 0x30, 0x0c, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x80,
  0x85, 0xc8, 0x7a, 0x0c, 0x42, 0x20, 0x1b, 0xb1, 0x01, 0x1b, 0xc3, 0x11,
  0x01, 0x6c, 0x10, 0x5f, 0x1d, 0xc8, 0x5e, 0x00, 0x44, 0x25, 0xba, 0xc1,
  0x45, 0x04, 0x5a, 0x4c, 0xb0, 0x17, 0x00, 0x61, 0x68, 0x41, 0xc9, 0x67,
  0xba, 0x81, 0x36, 0x82, 0xc3, 0x7e, 0x63, 0x8a, 0x8f, 0x99, 0x45, 0x20,
  0x1f, 0x0b, 0x2a, 0xf8, 0x58, 0x90, 0x16, 0xf2, 0x19, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x03, 0x0b, 0x46, 0xf4, 0x23, 0xe0, 0x0d, 0x23, 0x8f, 0x80,
  0x3e, 0x16, 0x1c, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x6b,
  0x46, 0xf6, 0x23, 0xf0, 0x8d, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb0,
  0x68, 0xc4, 0x3f, 0x02, 0x30, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x03,
  0xe9, 0x46, 0x40, 0x64, 0x37, 0x5c, 0x24, 0x14, 0x46, 0x22, 0x44, 0x42,
  0x24, 0x44, 0x42, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa8, 0x1c, 0x91, 0x91, 0xc0, 0x82, 0xf5,
  0x90, 0xcf, 0x70, 0x44, 0xc0, 0x1a, 0xc2, 0x37, 0x1c, 0x51, 0x90, 0x47,
  0xf0, 0x55, 0x20, 0xec, 0x70, 0xc4, 0xe1, 0x1e, 0xc1, 0x37, 0x62, 0xd0,
  0x00, 0x20, 0x08, 0x06, 0x12, 0x98, 0xa4, 0x48, 0x79, 0xdc, 0x88, 0x2a,
  0xb0, 0x84, 0x8a, 0xa8, 0x88, 0x8a, 0xa8, 0xc8, 0x68, 0x42, 0x10, 0x8c,
  0x26, 0x08, 0xc2, 0x68, 0xc2, 0x30, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82,
  0x01, 0x16, 0x26, 0x2b, 0x32, 0x08, 0x81, 0x7c, 0xc4, 0x07, 0x7c, 0x0c,
  0x47, 0x04, 0xf0, 0x41, 0x7c, 0x75, 0x20, 0x7b, 0x01, 0x10, 0x95, 0xe8,
  0x07, 0x17, 0x11, 0x68, 0x31, 0xc1, 0x5e, 0x00, 0x84, 0xa1, 0x06, 0x25,
  0x9f, 0xe9, 0x06, 0xfa, 0x08, 0x0e, 0xfb, 0x8f, 0x29, 0x3e, 0x66, 0x1a,
  0x81, 0x7c, 0x2c, 0xa8, 0xe0, 0x63, 0x41, 0x6a, 0xc8, 0x67, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x2c, 0x38, 0xd1, 0x91, 0x80, 0x3f, 0x8c, 0x44,
  0x02, 0xfa, 0x58, 0x70, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0xac, 0x39, 0xd9, 0x91, 0xc0, 0x3f, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0xc0, 0xa2, 0x13, 0x1f, 0x09, 0xc0, 0x60, 0xc4, 0xa0, 0x01, 0x40, 0x10,
  0x0c, 0xa4, 0x3b, 0x01, 0x93, 0xfd, 0x70, 0x93, 0x70, 0x10, 0x89, 0x30,
  0x09, 0x93, 0x30, 0x09, 0x93, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xa0, 0xf2, 0x44, 0x4e, 0x02, 0x0b,
  0x56, 0x44, 0x3e, 0xc3, 0x11, 0x01, 0x7b, 0x08, 0xdf, 0x70, 0x44, 0x41,
  0x22, 0xc1, 0x57, 0x81, 0xb0, 0xc3, 0x11, 0x87, 0x8b, 0x04, 0xdf, 0x88,
  0x41, 0x03, 0x80, 0x20, 0x18, 0x48, 0xa0, 0x92, 0x26, 0x25, 0x72, 0x27,
  0xea, 0xb0, 0x12, 0x6a, 0xa2, 0x26, 0x6a, 0xa2, 0x26, 0xa3, 0x09, 0x41,
  0x30, 0x9a, 0x20, 0x08, 0xa3, 0x09, 0xc3, 0x30, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0x58, 0xa8, 0xac, 0xc9, 0x20, 0x04, 0x32, 0x12, 0x23, 0x30,
  0x32, 0x1c, 0x11, 0xc0, 0x08, 0xf1, 0xd5, 0x81, 0xec, 0x05, 0x40, 0x54,
  0xa2, 0x23, 0x5c, 0x44, 0xa0, 0xc5, 0x04, 0x7b, 0x01, 0x10, 0x36, 0x16,
  0xa4, 0x01, 0x03, 0x0b, 0x46, 0x02, 0x06, 0x16, 0x8c, 0x03, 0x0c, 0x2c,
  0x20, 0x05, 0x18, 0x58, 0x50, 0x06, 0x30, 0xb0, 0xc0, 0x80, 0x41, 0x05,
  0x72, 0x72, 0xf6, 0x1a, 0xf1, 0x01, 0x03, 0x0b, 0xde, 0x02, 0x06, 0x16,
  0xbc, 0x04, 0x0c, 0x2c, 0x78, 0x07, 0x18, 0x58, 0x00, 0x0b, 0x20, 0xa8,
  0x20, 0x0e, 0xa0, 0x02, 0x09, 0x2a, 0x40, 0xc0, 0xee, 0x63, 0x0c, 0xe4,
  0x33, 0xdd, 0x30, 0x26, 0x81, 0x65, 0x6e, 0x22, 0x06, 0xf1, 0xb1, 0xfa,
  0x08, 0xe4, 0x63, 0x01, 0x19, 0xc0, 0xc7, 0x02, 0xfc, 0x90, 0xcf, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0x58, 0xbf, 0x92, 0x2a, 0xc1, 0x9a, 0xd8,
  0x9c, 0x04, 0xf4, 0xb1, 0xe0, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x58, 0xe2, 0xa2, 0x2a, 0x41, 0x9b, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x81, 0x35, 0x2e, 0xad, 0x12, 0xbc, 0xc1, 0x98, 0x81, 0xe1, 0x2e,
  0x4c, 0x00, 0x18, 0xc1, 0x09, 0xc0, 0x8e, 0x19, 0x18, 0xef, 0x12, 0x24,
  0x80, 0x11, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xb2, 0x2e, 0xab,
  0xb2, 0x2b, 0xb3, 0x0c, 0x03, 0x61, 0x26, 0x14, 0x2f, 0xc0, 0xa8, 0xc0,
  0x54, 0x74, 0xb8, 0x21, 0x30, 0x15, 0x30, 0xa8, 0xc1, 0x54, 0x74, 0xb8,
  0x21, 0x30, 0x15, 0x30, 0xa8, 0x21, 0xd8, 0xe9, 0x06, 0x3b, 0x01, 0x95,
  0x80, 0xee, 0x05, 0x18, 0x17, 0x38, 0x6b, 0x81, 0x9e, 0xc8, 0x67, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x28, 0x79, 0x59, 0x95, 0x60, 0xc4, 0xc0,
  0x01, 0x40, 0x10, 0x0c, 0x9e, 0x7a, 0x59, 0x15, 0x3d, 0xa1, 0x93, 0x39,
  0xf1, 0x95, 0x22, 0x28, 0x8a, 0x53, 0x99, 0x25, 0x20, 0x30, 0x20, 0x06,
  0x06, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x25, 0x58, 0x83, 0x2d, 0x03, 0x13,
  0xac, 0xc1, 0x96, 0xc1, 0x4e, 0x82, 0x35, 0xd8, 0x32, 0xf4, 0x49, 0xb0,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
