#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c1f6b1fb72d05cc1249a19c87c38435f
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer globalConstants
; {
;
;   struct globalConstants
;   {
;
;       column_major float4x4 gWorldToClipPrev;       ; Offset:    0
;       float3 gMvScale;                              ; Offset:   64
;       float gDebug;                                 ; Offset:   76
;       uint2 gRectSize;                              ; Offset:   80
;       float2 gInvRectSize;                          ; Offset:   88
;       uint2 gRectOrigin;                            ; Offset:   96
;       uint gIsWorldSpaceMotionEnabled;              ; Offset:  104
;   
;   } globalConstants;                                ; Offset:    0 Size:   108
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; globalConstants                   cbuffer      NA          NA     CB0            cb0     1
; gLinearClamp                      sampler      NA          NA      S0             s2     1
; gIn_Mv                            texture     f32          2d      T0             t0     1
; gIn_DeltaPrimaryPos               texture     f32          2d      T1             t1     1
; gIn_DeltaSecondaryPos             texture     f32          2d      T2             t2     1
; gIn_PrevDeltaSecondaryPos         texture     f32          2d      T3             t3     1
; gOut_DeltaMv                          UAV     f32          2d      U0             u0     1
; gOut_DeltaSecondaryPos                UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 2> >" = type { <2 x float> }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%globalConstants = type { %class.matrix.float.4.4, <3 x float>, float, <2 x i32>, <2 x float>, <2 x i32>, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %10 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %11 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.i32 %11, 0
  %13 = extractvalue %dx.types.CBufRet.i32 %11, 1
  %14 = add i32 %12, %9
  %15 = add i32 %13, %10
  %16 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %17 = extractvalue %dx.types.CBufRet.i32 %16, 0
  %18 = extractvalue %dx.types.CBufRet.i32 %16, 1
  %19 = icmp uge i32 %14, %17
  %20 = icmp uge i32 %15, %18
  %21 = or i1 %19, %20
  br i1 %21, label %679, label %22

; <label>:22                                      ; preds = %0
  %23 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %5, i32 0, i32 %14, i32 %15, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %24 = extractvalue %dx.types.ResRet.f32 %23, 0
  %25 = extractvalue %dx.types.ResRet.f32 %23, 1
  %26 = extractvalue %dx.types.ResRet.f32 %23, 2
  %27 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %4, i32 0, i32 %14, i32 %15, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %28 = extractvalue %dx.types.ResRet.f32 %27, 0
  %29 = extractvalue %dx.types.ResRet.f32 %27, 1
  %30 = extractvalue %dx.types.ResRet.f32 %27, 2
  %31 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %6, i32 0, i32 %14, i32 %15, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %32 = extractvalue %dx.types.ResRet.f32 %31, 0
  %33 = extractvalue %dx.types.ResRet.f32 %31, 1
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = fmul fast float %35, %32
  %38 = fmul fast float %36, %33
  %39 = uitofp i32 %9 to float
  %40 = uitofp i32 %10 to float
  %41 = fadd fast float %39, 5.000000e-01
  %42 = fadd fast float %40, 5.000000e-01
  %43 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.f32 %43, 2
  %45 = extractvalue %dx.types.CBufRet.f32 %43, 3
  %46 = fmul fast float %44, %41
  %47 = fmul fast float %45, %42
  %48 = fadd fast float %46, %37
  %49 = fadd fast float %47, %38
  %50 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %94, label %53

; <label>:53                                      ; preds = %22
  %54 = extractvalue %dx.types.ResRet.f32 %31, 2
  %55 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %56 = fmul fast float %55, %54
  %57 = fadd fast float %37, %24
  %58 = fadd fast float %38, %25
  %59 = fadd fast float %56, %26
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 3
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 3
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 3
  %76 = fmul fast float %61, %57
  %77 = call float @dx.op.tertiary.f32(i32 46, float %65, float %58, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %69, float %59, float %77)  ; FMad(a,b,c)
  %79 = fadd fast float %78, %73
  %80 = fmul fast float %62, %57
  %81 = call float @dx.op.tertiary.f32(i32 46, float %66, float %58, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %70, float %59, float %81)  ; FMad(a,b,c)
  %83 = fadd fast float %82, %74
  %84 = fmul fast float %63, %57
  %85 = call float @dx.op.tertiary.f32(i32 46, float %67, float %58, float %84)  ; FMad(a,b,c)
  %86 = call float @dx.op.tertiary.f32(i32 46, float %71, float %59, float %85)  ; FMad(a,b,c)
  %87 = fadd fast float %86, %75
  %88 = fdiv fast float %79, %87
  %89 = fdiv fast float %83, %87
  %90 = fmul fast float %88, 5.000000e-01
  %91 = fmul fast float %89, 5.000000e-01
  %92 = fadd fast float %90, 5.000000e-01
  %93 = fsub fast float 5.000000e-01, %91
  br label %94

; <label>:94                                      ; preds = %53, %22
  %95 = phi float [ %92, %53 ], [ %48, %22 ]
  %96 = phi float [ %93, %53 ], [ %49, %22 ]
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1, i32 %14, i32 %15, i32 undef, float %28, float %29, float %30, float %28, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %97 = fsub fast float %95, %46
  %98 = fsub fast float %96, %47
  %99 = fmul fast float %97, %97
  %100 = fmul fast float %98, %98
  %101 = fadd fast float %100, %99
  %102 = call float @dx.op.unary.f32(i32 24, float %101)  ; Sqrt(value)
  %103 = fcmp fast ult float %102, 0x3F1A36E2E0000000
  br i1 %103, label %678, label %104

; <label>:104                                     ; preds = %94
  %105 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.i32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.i32 %105, 1
  %108 = uitofp i32 %106 to float
  %109 = uitofp i32 %107 to float
  %110 = fmul fast float %108, %95
  %111 = fmul fast float %109, %96
  %112 = fsub fast float %28, %24
  %113 = fsub fast float %29, %25
  %114 = fsub fast float %30, %26
  %115 = call float @dx.op.dot3.f32(i32 55, float %112, float %113, float %114, float %112, float %113, float %114)  ; Dot3(ax,ay,az,bx,by,bz)
  %116 = call float @dx.op.unary.f32(i32 25, float %115)  ; Rsqrt(value)
  %117 = fmul fast float %116, %112
  %118 = fmul fast float %116, %113
  %119 = fmul fast float %116, %114
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 3
  %123 = fmul fast float %121, %110
  %124 = fmul fast float %122, %111
  %125 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %123, float %124, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %126 = extractvalue %dx.types.ResRet.f32 %125, 0
  %127 = extractvalue %dx.types.ResRet.f32 %125, 1
  %128 = extractvalue %dx.types.ResRet.f32 %125, 2
  %129 = fsub fast float %126, %24
  %130 = fsub fast float %127, %25
  %131 = fsub fast float %128, %26
  %132 = call float @dx.op.dot3.f32(i32 55, float %129, float %130, float %131, float %129, float %130, float %131)  ; Dot3(ax,ay,az,bx,by,bz)
  %133 = call float @dx.op.unary.f32(i32 25, float %132)  ; Rsqrt(value)
  %134 = fmul fast float %129, %133
  %135 = fmul fast float %130, %133
  %136 = fmul fast float %131, %133
  %137 = fmul fast float %135, %119
  %138 = fmul fast float %136, %118
  %139 = fsub fast float %137, %138
  %140 = fmul fast float %136, %117
  %141 = fmul fast float %134, %119
  %142 = fsub fast float %140, %141
  %143 = fmul fast float %134, %118
  %144 = fmul fast float %135, %117
  %145 = fsub fast float %143, %144
  %146 = fmul fast float %139, %139
  %147 = fmul fast float %142, %142
  %148 = fadd fast float %146, %147
  %149 = fmul fast float %145, %145
  %150 = fadd fast float %148, %149
  %151 = call float @dx.op.unary.f32(i32 24, float %150)  ; Sqrt(value)
  %152 = call float @dx.op.unary.f32(i32 7, float %151)  ; Saturate(value)
  %153 = call float @dx.op.dot3.f32(i32 55, float %134, float %135, float %136, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %154 = call float @dx.op.unary.f32(i32 7, float %153)  ; Saturate(value)
  %155 = fdiv fast float %152, %154
  %156 = call float @dx.op.unary.f32(i32 17, float %155)  ; Atan(value)
  %157 = fadd fast float %156, 0x400921FB60000000
  %158 = fadd fast float %156, 0xC00921FB60000000
  %159 = fcmp fast olt float %154, 0.000000e+00
  %160 = fcmp fast oeq float %154, 0.000000e+00
  %161 = fcmp fast oge float %152, 0.000000e+00
  %162 = fcmp fast olt float %152, 0.000000e+00
  %163 = and i1 %161, %159
  %164 = select i1 %163, float %157, float %156
  %165 = and i1 %162, %159
  %166 = select i1 %165, float %158, float %164
  %167 = and i1 %162, %160
  %168 = select i1 %167, float 0xBFF921FB60000000, float %166
  %169 = and i1 %161, %160
  %170 = select i1 %169, float 0x3FF921FB60000000, float %168
  %171 = fmul fast float %170, %170
  br label %172

; <label>:172                                     ; preds = %670, %104
  %173 = phi float [ %110, %104 ], [ %608, %670 ]
  %174 = phi float [ %111, %104 ], [ %609, %670 ]
  %175 = phi i32 [ 0, %104 ], [ %671, %670 ]
  %176 = fcmp fast olt float %171, 0x3E45798EE0000000
  %177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %178 = extractvalue %dx.types.CBufRet.f32 %177, 2
  %179 = extractvalue %dx.types.CBufRet.f32 %177, 3
  %180 = fmul fast float %179, %174
  %181 = fmul fast float %178, %173
  br i1 %176, label %182, label %185

; <label>:182                                     ; preds = %172
  %183 = fsub fast float %181, %46
  %184 = fsub fast float %180, %47
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2, i32 %14, i32 %15, i32 undef, float %183, float %184, float %183, float %183, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %679

; <label>:185                                     ; preds = %172
  %186 = fadd fast float %173, 1.000000e+00
  %187 = fmul fast float %178, %186
  %188 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %187, float %180, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %189 = extractvalue %dx.types.ResRet.f32 %188, 0
  %190 = extractvalue %dx.types.ResRet.f32 %188, 1
  %191 = extractvalue %dx.types.ResRet.f32 %188, 2
  %192 = fsub fast float %189, %24
  %193 = fsub fast float %190, %25
  %194 = fsub fast float %191, %26
  %195 = call float @dx.op.dot3.f32(i32 55, float %192, float %193, float %194, float %192, float %193, float %194)  ; Dot3(ax,ay,az,bx,by,bz)
  %196 = call float @dx.op.unary.f32(i32 25, float %195)  ; Rsqrt(value)
  %197 = fmul fast float %192, %196
  %198 = fmul fast float %193, %196
  %199 = fmul fast float %194, %196
  %200 = fmul fast float %198, %119
  %201 = fmul fast float %199, %118
  %202 = fsub fast float %200, %201
  %203 = fmul fast float %199, %117
  %204 = fmul fast float %197, %119
  %205 = fsub fast float %203, %204
  %206 = fmul fast float %197, %118
  %207 = fmul fast float %198, %117
  %208 = fsub fast float %206, %207
  %209 = fmul fast float %202, %202
  %210 = fmul fast float %205, %205
  %211 = fadd fast float %209, %210
  %212 = fmul fast float %208, %208
  %213 = fadd fast float %211, %212
  %214 = call float @dx.op.unary.f32(i32 24, float %213)  ; Sqrt(value)
  %215 = call float @dx.op.unary.f32(i32 7, float %214)  ; Saturate(value)
  %216 = call float @dx.op.dot3.f32(i32 55, float %197, float %198, float %199, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %217 = call float @dx.op.unary.f32(i32 7, float %216)  ; Saturate(value)
  %218 = fdiv fast float %215, %217
  %219 = call float @dx.op.unary.f32(i32 17, float %218)  ; Atan(value)
  %220 = fadd fast float %219, 0x400921FB60000000
  %221 = fadd fast float %219, 0xC00921FB60000000
  %222 = fcmp fast olt float %217, 0.000000e+00
  %223 = fcmp fast oeq float %217, 0.000000e+00
  %224 = fcmp fast oge float %215, 0.000000e+00
  %225 = fcmp fast olt float %215, 0.000000e+00
  %226 = and i1 %224, %222
  %227 = select i1 %226, float %220, float %219
  %228 = and i1 %225, %222
  %229 = select i1 %228, float %221, float %227
  %230 = and i1 %225, %223
  %231 = select i1 %230, float 0xBFF921FB60000000, float %229
  %232 = and i1 %224, %223
  %233 = select i1 %232, float 0x3FF921FB60000000, float %231
  %234 = fmul fast float %233, %233
  %235 = fadd fast float %173, -1.000000e+00
  %236 = fmul fast float %178, %235
  %237 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %236, float %180, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %238 = extractvalue %dx.types.ResRet.f32 %237, 0
  %239 = extractvalue %dx.types.ResRet.f32 %237, 1
  %240 = extractvalue %dx.types.ResRet.f32 %237, 2
  %241 = fsub fast float %238, %24
  %242 = fsub fast float %239, %25
  %243 = fsub fast float %240, %26
  %244 = call float @dx.op.dot3.f32(i32 55, float %241, float %242, float %243, float %241, float %242, float %243)  ; Dot3(ax,ay,az,bx,by,bz)
  %245 = call float @dx.op.unary.f32(i32 25, float %244)  ; Rsqrt(value)
  %246 = fmul fast float %241, %245
  %247 = fmul fast float %242, %245
  %248 = fmul fast float %243, %245
  %249 = fmul fast float %247, %119
  %250 = fmul fast float %248, %118
  %251 = fsub fast float %249, %250
  %252 = fmul fast float %248, %117
  %253 = fmul fast float %246, %119
  %254 = fsub fast float %252, %253
  %255 = fmul fast float %246, %118
  %256 = fmul fast float %247, %117
  %257 = fsub fast float %255, %256
  %258 = fmul fast float %251, %251
  %259 = fmul fast float %254, %254
  %260 = fadd fast float %258, %259
  %261 = fmul fast float %257, %257
  %262 = fadd fast float %260, %261
  %263 = call float @dx.op.unary.f32(i32 24, float %262)  ; Sqrt(value)
  %264 = call float @dx.op.unary.f32(i32 7, float %263)  ; Saturate(value)
  %265 = call float @dx.op.dot3.f32(i32 55, float %246, float %247, float %248, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %266 = call float @dx.op.unary.f32(i32 7, float %265)  ; Saturate(value)
  %267 = fdiv fast float %264, %266
  %268 = call float @dx.op.unary.f32(i32 17, float %267)  ; Atan(value)
  %269 = fadd fast float %268, 0x400921FB60000000
  %270 = fadd fast float %268, 0xC00921FB60000000
  %271 = fcmp fast olt float %266, 0.000000e+00
  %272 = fcmp fast oeq float %266, 0.000000e+00
  %273 = fcmp fast oge float %264, 0.000000e+00
  %274 = fcmp fast olt float %264, 0.000000e+00
  %275 = and i1 %273, %271
  %276 = select i1 %275, float %269, float %268
  %277 = and i1 %274, %271
  %278 = select i1 %277, float %270, float %276
  %279 = and i1 %274, %272
  %280 = select i1 %279, float 0xBFF921FB60000000, float %278
  %281 = and i1 %273, %272
  %282 = select i1 %281, float 0x3FF921FB60000000, float %280
  %283 = fmul fast float %282, %282
  %284 = fsub fast float %234, %283
  %285 = fmul fast float %284, 5.000000e-01
  %286 = fadd fast float %174, 1.000000e+00
  %287 = fmul fast float %179, %286
  %288 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %181, float %287, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %289 = extractvalue %dx.types.ResRet.f32 %288, 0
  %290 = extractvalue %dx.types.ResRet.f32 %288, 1
  %291 = extractvalue %dx.types.ResRet.f32 %288, 2
  %292 = fsub fast float %289, %24
  %293 = fsub fast float %290, %25
  %294 = fsub fast float %291, %26
  %295 = call float @dx.op.dot3.f32(i32 55, float %292, float %293, float %294, float %292, float %293, float %294)  ; Dot3(ax,ay,az,bx,by,bz)
  %296 = call float @dx.op.unary.f32(i32 25, float %295)  ; Rsqrt(value)
  %297 = fmul fast float %292, %296
  %298 = fmul fast float %293, %296
  %299 = fmul fast float %294, %296
  %300 = fmul fast float %298, %119
  %301 = fmul fast float %299, %118
  %302 = fsub fast float %300, %301
  %303 = fmul fast float %299, %117
  %304 = fmul fast float %297, %119
  %305 = fsub fast float %303, %304
  %306 = fmul fast float %297, %118
  %307 = fmul fast float %298, %117
  %308 = fsub fast float %306, %307
  %309 = fmul fast float %302, %302
  %310 = fmul fast float %305, %305
  %311 = fadd fast float %309, %310
  %312 = fmul fast float %308, %308
  %313 = fadd fast float %311, %312
  %314 = call float @dx.op.unary.f32(i32 24, float %313)  ; Sqrt(value)
  %315 = call float @dx.op.unary.f32(i32 7, float %314)  ; Saturate(value)
  %316 = call float @dx.op.dot3.f32(i32 55, float %297, float %298, float %299, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %317 = call float @dx.op.unary.f32(i32 7, float %316)  ; Saturate(value)
  %318 = fdiv fast float %315, %317
  %319 = call float @dx.op.unary.f32(i32 17, float %318)  ; Atan(value)
  %320 = fadd fast float %319, 0x400921FB60000000
  %321 = fadd fast float %319, 0xC00921FB60000000
  %322 = fcmp fast olt float %317, 0.000000e+00
  %323 = fcmp fast oeq float %317, 0.000000e+00
  %324 = fcmp fast oge float %315, 0.000000e+00
  %325 = fcmp fast olt float %315, 0.000000e+00
  %326 = and i1 %324, %322
  %327 = select i1 %326, float %320, float %319
  %328 = and i1 %325, %322
  %329 = select i1 %328, float %321, float %327
  %330 = and i1 %325, %323
  %331 = select i1 %330, float 0xBFF921FB60000000, float %329
  %332 = and i1 %324, %323
  %333 = select i1 %332, float 0x3FF921FB60000000, float %331
  %334 = fmul fast float %333, %333
  %335 = fadd fast float %174, -1.000000e+00
  %336 = fmul fast float %179, %335
  %337 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %181, float %336, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %338 = extractvalue %dx.types.ResRet.f32 %337, 0
  %339 = extractvalue %dx.types.ResRet.f32 %337, 1
  %340 = extractvalue %dx.types.ResRet.f32 %337, 2
  %341 = fsub fast float %338, %24
  %342 = fsub fast float %339, %25
  %343 = fsub fast float %340, %26
  %344 = call float @dx.op.dot3.f32(i32 55, float %341, float %342, float %343, float %341, float %342, float %343)  ; Dot3(ax,ay,az,bx,by,bz)
  %345 = call float @dx.op.unary.f32(i32 25, float %344)  ; Rsqrt(value)
  %346 = fmul fast float %341, %345
  %347 = fmul fast float %342, %345
  %348 = fmul fast float %343, %345
  %349 = fmul fast float %347, %119
  %350 = fmul fast float %348, %118
  %351 = fsub fast float %349, %350
  %352 = fmul fast float %348, %117
  %353 = fmul fast float %346, %119
  %354 = fsub fast float %352, %353
  %355 = fmul fast float %346, %118
  %356 = fmul fast float %347, %117
  %357 = fsub fast float %355, %356
  %358 = fmul fast float %351, %351
  %359 = fmul fast float %354, %354
  %360 = fadd fast float %358, %359
  %361 = fmul fast float %357, %357
  %362 = fadd fast float %360, %361
  %363 = call float @dx.op.unary.f32(i32 24, float %362)  ; Sqrt(value)
  %364 = call float @dx.op.unary.f32(i32 7, float %363)  ; Saturate(value)
  %365 = call float @dx.op.dot3.f32(i32 55, float %346, float %347, float %348, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %366 = call float @dx.op.unary.f32(i32 7, float %365)  ; Saturate(value)
  %367 = fdiv fast float %364, %366
  %368 = call float @dx.op.unary.f32(i32 17, float %367)  ; Atan(value)
  %369 = fadd fast float %368, 0x400921FB60000000
  %370 = fadd fast float %368, 0xC00921FB60000000
  %371 = fcmp fast olt float %366, 0.000000e+00
  %372 = fcmp fast oeq float %366, 0.000000e+00
  %373 = fcmp fast oge float %364, 0.000000e+00
  %374 = fcmp fast olt float %364, 0.000000e+00
  %375 = and i1 %373, %371
  %376 = select i1 %375, float %369, float %368
  %377 = and i1 %374, %371
  %378 = select i1 %377, float %370, float %376
  %379 = and i1 %374, %372
  %380 = select i1 %379, float 0xBFF921FB60000000, float %378
  %381 = and i1 %373, %372
  %382 = select i1 %381, float 0x3FF921FB60000000, float %380
  %383 = fmul fast float %382, %382
  %384 = fsub fast float %334, %383
  %385 = fmul fast float %384, 5.000000e-01
  %386 = fmul fast float %171, 2.000000e+00
  %387 = fsub fast float %234, %386
  %388 = fadd fast float %283, %387
  %389 = fsub fast float %334, %386
  %390 = fadd fast float %383, %389
  %391 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %187, float %287, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %392 = extractvalue %dx.types.ResRet.f32 %391, 0
  %393 = extractvalue %dx.types.ResRet.f32 %391, 1
  %394 = extractvalue %dx.types.ResRet.f32 %391, 2
  %395 = fsub fast float %392, %24
  %396 = fsub fast float %393, %25
  %397 = fsub fast float %394, %26
  %398 = call float @dx.op.dot3.f32(i32 55, float %395, float %396, float %397, float %395, float %396, float %397)  ; Dot3(ax,ay,az,bx,by,bz)
  %399 = call float @dx.op.unary.f32(i32 25, float %398)  ; Rsqrt(value)
  %400 = fmul fast float %395, %399
  %401 = fmul fast float %396, %399
  %402 = fmul fast float %397, %399
  %403 = fmul fast float %401, %119
  %404 = fmul fast float %402, %118
  %405 = fsub fast float %403, %404
  %406 = fmul fast float %402, %117
  %407 = fmul fast float %400, %119
  %408 = fsub fast float %406, %407
  %409 = fmul fast float %400, %118
  %410 = fmul fast float %401, %117
  %411 = fsub fast float %409, %410
  %412 = fmul fast float %405, %405
  %413 = fmul fast float %408, %408
  %414 = fadd fast float %412, %413
  %415 = fmul fast float %411, %411
  %416 = fadd fast float %414, %415
  %417 = call float @dx.op.unary.f32(i32 24, float %416)  ; Sqrt(value)
  %418 = call float @dx.op.unary.f32(i32 7, float %417)  ; Saturate(value)
  %419 = call float @dx.op.dot3.f32(i32 55, float %400, float %401, float %402, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %420 = call float @dx.op.unary.f32(i32 7, float %419)  ; Saturate(value)
  %421 = fdiv fast float %418, %420
  %422 = call float @dx.op.unary.f32(i32 17, float %421)  ; Atan(value)
  %423 = fadd fast float %422, 0x400921FB60000000
  %424 = fadd fast float %422, 0xC00921FB60000000
  %425 = fcmp fast olt float %420, 0.000000e+00
  %426 = fcmp fast oeq float %420, 0.000000e+00
  %427 = fcmp fast oge float %418, 0.000000e+00
  %428 = fcmp fast olt float %418, 0.000000e+00
  %429 = and i1 %427, %425
  %430 = select i1 %429, float %423, float %422
  %431 = and i1 %428, %425
  %432 = select i1 %431, float %424, float %430
  %433 = and i1 %428, %426
  %434 = select i1 %433, float 0xBFF921FB60000000, float %432
  %435 = and i1 %427, %426
  %436 = select i1 %435, float 0x3FF921FB60000000, float %434
  %437 = fmul fast float %436, %436
  %438 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %187, float %336, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %439 = extractvalue %dx.types.ResRet.f32 %438, 0
  %440 = extractvalue %dx.types.ResRet.f32 %438, 1
  %441 = extractvalue %dx.types.ResRet.f32 %438, 2
  %442 = fsub fast float %439, %24
  %443 = fsub fast float %440, %25
  %444 = fsub fast float %441, %26
  %445 = call float @dx.op.dot3.f32(i32 55, float %442, float %443, float %444, float %442, float %443, float %444)  ; Dot3(ax,ay,az,bx,by,bz)
  %446 = call float @dx.op.unary.f32(i32 25, float %445)  ; Rsqrt(value)
  %447 = fmul fast float %442, %446
  %448 = fmul fast float %443, %446
  %449 = fmul fast float %444, %446
  %450 = fmul fast float %448, %119
  %451 = fmul fast float %449, %118
  %452 = fsub fast float %450, %451
  %453 = fmul fast float %449, %117
  %454 = fmul fast float %447, %119
  %455 = fsub fast float %453, %454
  %456 = fmul fast float %447, %118
  %457 = fmul fast float %448, %117
  %458 = fsub fast float %456, %457
  %459 = fmul fast float %452, %452
  %460 = fmul fast float %455, %455
  %461 = fadd fast float %459, %460
  %462 = fmul fast float %458, %458
  %463 = fadd fast float %461, %462
  %464 = call float @dx.op.unary.f32(i32 24, float %463)  ; Sqrt(value)
  %465 = call float @dx.op.unary.f32(i32 7, float %464)  ; Saturate(value)
  %466 = call float @dx.op.dot3.f32(i32 55, float %447, float %448, float %449, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %467 = call float @dx.op.unary.f32(i32 7, float %466)  ; Saturate(value)
  %468 = fdiv fast float %465, %467
  %469 = call float @dx.op.unary.f32(i32 17, float %468)  ; Atan(value)
  %470 = fadd fast float %469, 0x400921FB60000000
  %471 = fadd fast float %469, 0xC00921FB60000000
  %472 = fcmp fast olt float %467, 0.000000e+00
  %473 = fcmp fast oeq float %467, 0.000000e+00
  %474 = fcmp fast oge float %465, 0.000000e+00
  %475 = fcmp fast olt float %465, 0.000000e+00
  %476 = and i1 %474, %472
  %477 = select i1 %476, float %470, float %469
  %478 = and i1 %475, %472
  %479 = select i1 %478, float %471, float %477
  %480 = and i1 %475, %473
  %481 = select i1 %480, float 0xBFF921FB60000000, float %479
  %482 = and i1 %474, %473
  %483 = select i1 %482, float 0x3FF921FB60000000, float %481
  %484 = fmul fast float %483, %483
  %485 = fsub fast float %437, %484
  %486 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %236, float %287, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %487 = extractvalue %dx.types.ResRet.f32 %486, 0
  %488 = extractvalue %dx.types.ResRet.f32 %486, 1
  %489 = extractvalue %dx.types.ResRet.f32 %486, 2
  %490 = fsub fast float %487, %24
  %491 = fsub fast float %488, %25
  %492 = fsub fast float %489, %26
  %493 = call float @dx.op.dot3.f32(i32 55, float %490, float %491, float %492, float %490, float %491, float %492)  ; Dot3(ax,ay,az,bx,by,bz)
  %494 = call float @dx.op.unary.f32(i32 25, float %493)  ; Rsqrt(value)
  %495 = fmul fast float %490, %494
  %496 = fmul fast float %491, %494
  %497 = fmul fast float %492, %494
  %498 = fmul fast float %496, %119
  %499 = fmul fast float %497, %118
  %500 = fsub fast float %498, %499
  %501 = fmul fast float %497, %117
  %502 = fmul fast float %495, %119
  %503 = fsub fast float %501, %502
  %504 = fmul fast float %495, %118
  %505 = fmul fast float %496, %117
  %506 = fsub fast float %504, %505
  %507 = fmul fast float %500, %500
  %508 = fmul fast float %503, %503
  %509 = fadd fast float %507, %508
  %510 = fmul fast float %506, %506
  %511 = fadd fast float %509, %510
  %512 = call float @dx.op.unary.f32(i32 24, float %511)  ; Sqrt(value)
  %513 = call float @dx.op.unary.f32(i32 7, float %512)  ; Saturate(value)
  %514 = call float @dx.op.dot3.f32(i32 55, float %495, float %496, float %497, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %515 = call float @dx.op.unary.f32(i32 7, float %514)  ; Saturate(value)
  %516 = fdiv fast float %513, %515
  %517 = call float @dx.op.unary.f32(i32 17, float %516)  ; Atan(value)
  %518 = fadd fast float %517, 0x400921FB60000000
  %519 = fadd fast float %517, 0xC00921FB60000000
  %520 = fcmp fast olt float %515, 0.000000e+00
  %521 = fcmp fast oeq float %515, 0.000000e+00
  %522 = fcmp fast oge float %513, 0.000000e+00
  %523 = fcmp fast olt float %513, 0.000000e+00
  %524 = and i1 %522, %520
  %525 = select i1 %524, float %518, float %517
  %526 = and i1 %523, %520
  %527 = select i1 %526, float %519, float %525
  %528 = and i1 %523, %521
  %529 = select i1 %528, float 0xBFF921FB60000000, float %527
  %530 = and i1 %522, %521
  %531 = select i1 %530, float 0x3FF921FB60000000, float %529
  %532 = fmul fast float %531, %531
  %533 = fsub fast float %485, %532
  %534 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %236, float %336, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %535 = extractvalue %dx.types.ResRet.f32 %534, 0
  %536 = extractvalue %dx.types.ResRet.f32 %534, 1
  %537 = extractvalue %dx.types.ResRet.f32 %534, 2
  %538 = fsub fast float %535, %24
  %539 = fsub fast float %536, %25
  %540 = fsub fast float %537, %26
  %541 = call float @dx.op.dot3.f32(i32 55, float %538, float %539, float %540, float %538, float %539, float %540)  ; Dot3(ax,ay,az,bx,by,bz)
  %542 = call float @dx.op.unary.f32(i32 25, float %541)  ; Rsqrt(value)
  %543 = fmul fast float %538, %542
  %544 = fmul fast float %539, %542
  %545 = fmul fast float %540, %542
  %546 = fmul fast float %544, %119
  %547 = fmul fast float %545, %118
  %548 = fsub fast float %546, %547
  %549 = fmul fast float %545, %117
  %550 = fmul fast float %543, %119
  %551 = fsub fast float %549, %550
  %552 = fmul fast float %543, %118
  %553 = fmul fast float %544, %117
  %554 = fsub fast float %552, %553
  %555 = fmul fast float %548, %548
  %556 = fmul fast float %551, %551
  %557 = fadd fast float %555, %556
  %558 = fmul fast float %554, %554
  %559 = fadd fast float %557, %558
  %560 = call float @dx.op.unary.f32(i32 24, float %559)  ; Sqrt(value)
  %561 = call float @dx.op.unary.f32(i32 7, float %560)  ; Saturate(value)
  %562 = call float @dx.op.dot3.f32(i32 55, float %543, float %544, float %545, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %563 = call float @dx.op.unary.f32(i32 7, float %562)  ; Saturate(value)
  %564 = fdiv fast float %561, %563
  %565 = call float @dx.op.unary.f32(i32 17, float %564)  ; Atan(value)
  %566 = fadd fast float %565, 0x400921FB60000000
  %567 = fadd fast float %565, 0xC00921FB60000000
  %568 = fcmp fast olt float %563, 0.000000e+00
  %569 = fcmp fast oeq float %563, 0.000000e+00
  %570 = fcmp fast oge float %561, 0.000000e+00
  %571 = fcmp fast olt float %561, 0.000000e+00
  %572 = and i1 %570, %568
  %573 = select i1 %572, float %566, float %565
  %574 = and i1 %571, %568
  %575 = select i1 %574, float %567, float %573
  %576 = and i1 %571, %569
  %577 = select i1 %576, float 0xBFF921FB60000000, float %575
  %578 = and i1 %570, %569
  %579 = select i1 %578, float 0x3FF921FB60000000, float %577
  %580 = fmul fast float %579, %579
  %581 = fadd fast float %533, %580
  %582 = fmul fast float %581, 2.500000e-01
  %583 = fmul fast float %390, %388
  %584 = fmul fast float %582, %582
  %585 = fsub fast float %583, %584
  %586 = call float @dx.op.unary.f32(i32 6, float %585)  ; FAbs(value)
  %587 = fcmp fast olt float %586, 0x3CD203AFA0000000
  br i1 %587, label %588, label %589

; <label>:588                                     ; preds = %185
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2, i32 %14, i32 %15, i32 undef, float %97, float %98, float %97, float %97, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %679

; <label>:589                                     ; preds = %185
  %590 = fdiv fast float 1.000000e+00, %585
  %591 = fmul fast float %390, %285
  %592 = fmul fast float %582, %385
  %593 = fsub fast float %591, %592
  %594 = fmul fast float %590, %593
  %595 = fmul fast float %582, %285
  %596 = fmul fast float %388, %385
  %597 = fsub fast float %596, %595
  %598 = fmul fast float %590, %597
  %599 = fsub fast float -0.000000e+00, %594
  %600 = fsub fast float -0.000000e+00, %598
  %601 = call float @dx.op.dot2.f32(i32 54, float %285, float %385, float %599, float %600)  ; Dot2(ax,ay,bx,by)
  %602 = fmul fast float %601, 0x3F847AE140000000
  br label %603

; <label>:603                                     ; preds = %667, %589
  %604 = phi float [ 1.000000e+00, %589 ], [ %668, %667 ]
  %605 = phi i32 [ 0, %589 ], [ %669, %667 ]
  %606 = fmul fast float %604, %599
  %607 = fmul fast float %604, %600
  %608 = fadd fast float %606, %173
  %609 = fadd fast float %607, %174
  %610 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %611 = extractvalue %dx.types.CBufRet.f32 %610, 2
  %612 = extractvalue %dx.types.CBufRet.f32 %610, 3
  %613 = fmul fast float %611, %608
  %614 = fmul fast float %612, %609
  %615 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %7, float %613, float %614, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %616 = extractvalue %dx.types.ResRet.f32 %615, 0
  %617 = extractvalue %dx.types.ResRet.f32 %615, 1
  %618 = extractvalue %dx.types.ResRet.f32 %615, 2
  %619 = fsub fast float %616, %24
  %620 = fsub fast float %617, %25
  %621 = fsub fast float %618, %26
  %622 = call float @dx.op.dot3.f32(i32 55, float %619, float %620, float %621, float %619, float %620, float %621)  ; Dot3(ax,ay,az,bx,by,bz)
  %623 = call float @dx.op.unary.f32(i32 25, float %622)  ; Rsqrt(value)
  %624 = fmul fast float %619, %623
  %625 = fmul fast float %620, %623
  %626 = fmul fast float %621, %623
  %627 = fmul fast float %625, %119
  %628 = fmul fast float %626, %118
  %629 = fsub fast float %627, %628
  %630 = fmul fast float %626, %117
  %631 = fmul fast float %624, %119
  %632 = fsub fast float %630, %631
  %633 = fmul fast float %624, %118
  %634 = fmul fast float %625, %117
  %635 = fsub fast float %633, %634
  %636 = fmul fast float %629, %629
  %637 = fmul fast float %632, %632
  %638 = fadd fast float %636, %637
  %639 = fmul fast float %635, %635
  %640 = fadd fast float %638, %639
  %641 = call float @dx.op.unary.f32(i32 24, float %640)  ; Sqrt(value)
  %642 = call float @dx.op.unary.f32(i32 7, float %641)  ; Saturate(value)
  %643 = call float @dx.op.dot3.f32(i32 55, float %624, float %625, float %626, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %644 = call float @dx.op.unary.f32(i32 7, float %643)  ; Saturate(value)
  %645 = fdiv fast float %642, %644
  %646 = call float @dx.op.unary.f32(i32 17, float %645)  ; Atan(value)
  %647 = fadd fast float %646, 0x400921FB60000000
  %648 = fadd fast float %646, 0xC00921FB60000000
  %649 = fcmp fast olt float %644, 0.000000e+00
  %650 = fcmp fast oeq float %644, 0.000000e+00
  %651 = fcmp fast oge float %642, 0.000000e+00
  %652 = fcmp fast olt float %642, 0.000000e+00
  %653 = and i1 %651, %649
  %654 = select i1 %653, float %647, float %646
  %655 = and i1 %652, %649
  %656 = select i1 %655, float %648, float %654
  %657 = and i1 %652, %650
  %658 = select i1 %657, float 0xBFF921FB60000000, float %656
  %659 = and i1 %651, %650
  %660 = select i1 %659, float 0x3FF921FB60000000, float %658
  %661 = fmul fast float %660, %660
  %662 = fmul fast float %602, %604
  %663 = fadd fast float %662, %171
  %664 = fcmp fast ogt float %661, %663
  %665 = icmp ult i32 %605, 10
  %666 = and i1 %665, %664
  br i1 %666, label %667, label %670

; <label>:667                                     ; preds = %603
  %668 = fmul fast float %604, 5.000000e-01
  %669 = add nuw nsw i32 %605, 1
  br label %603

; <label>:670                                     ; preds = %603
  %671 = add nuw nsw i32 %175, 1
  %672 = icmp ult i32 %671, 5
  br i1 %672, label %172, label %673

; <label>:673                                     ; preds = %670
  %674 = fcmp fast olt float %171, 0x3F847AE140000000
  br i1 %674, label %675, label %678

; <label>:675                                     ; preds = %673
  %676 = fsub fast float %613, %46
  %677 = fsub fast float %614, %47
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2, i32 %14, i32 %15, i32 undef, float %676, float %677, float %676, float %676, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %679

; <label>:678                                     ; preds = %673, %94
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2, i32 %14, i32 %15, i32 undef, float %97, float %98, float %97, float %97, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %679

; <label>:679                                     ; preds = %678, %675, %588, %182, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!18}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{!5, !11, !14, !16}
!5 = !{!6, !8, !9, !10}
!6 = !{i32 0, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{!12, !13}
!12 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!13 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!14 = !{!15}
!15 = !{i32 0, %globalConstants* undef, !"", i32 0, i32 0, i32 1, i32 108, null}
!16 = !{!17}
!17 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!18 = !{void ()* @main, !"main", null, !4, !19}
!19 = !{i32 0, i64 8388864, i32 4, !20}
!20 = !{i32 16, i32 16, i32 1}

#endif

const unsigned char g_SpecularDeltaMv_Compute_cs_dxil[] = {
  0x44, 0x58, 0x42, 0x43, 0x0d, 0xf5, 0x4d, 0x0c, 0x43, 0xce, 0x88, 0x1b,
  0x12, 0x01, 0x49, 0xfb, 0xce, 0x79, 0x60, 0xdc, 0x01, 0x00, 0x00, 0x00,
  0x74, 0x23, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00,
  0x7c, 0x01, 0x00, 0x00, 0x88, 0x0b, 0x00, 0x00, 0xa4, 0x0b, 0x00, 0x00,
  0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x08, 0x01, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54,
  0x04, 0x0a, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00, 0x81, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xec, 0x09, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x78, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x87, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xd4, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0xc3, 0x30, 0x10,
  0x31, 0x47, 0x80, 0x90, 0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92,
  0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x38, 0x66, 0x00, 0xca, 0x02, 0x0c,
  0xc8, 0x30, 0x0c, 0x49, 0x92, 0x24, 0x06, 0x29, 0x37, 0x0d, 0x97, 0x3f,
  0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x17, 0xb7, 0x8d,
  0x8a, 0x24, 0x49, 0x92, 0xa1, 0x28, 0xcc, 0x80, 0x0c, 0xc3, 0x30, 0x0c,
  0xc3, 0x40, 0x4d, 0x19, 0x92, 0x21, 0xa1, 0xa7, 0x20, 0xc9, 0x90, 0x24,
  0x49, 0x92, 0x24, 0x14, 0x15, 0x23, 0x19, 0x92, 0x24, 0x49, 0x68, 0x2a,
  0x0c, 0x33, 0x20, 0x48, 0x92, 0x24, 0xc9, 0x30, 0x0c, 0x09, 0x55, 0x47,
  0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31,
  0xf9, 0xc5, 0x6d, 0x23, 0x22, 0x49, 0x92, 0xa4, 0x10, 0xd7, 0x80, 0x0c,
  0x84, 0x1d, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55,
  0xac, 0xc4, 0xe4, 0x23, 0xb7, 0x8d, 0x88, 0x61, 0x18, 0x86, 0x42, 0x68,
  0x03, 0x32, 0xd0, 0x56, 0x8a, 0x64, 0x48, 0x92, 0x84, 0xba, 0x39, 0x82,
  0xa0, 0x18, 0xc8, 0x60, 0x0c, 0xc3, 0x47, 0xe0, 0x40, 0xc0, 0x30, 0xc2,
  0x90, 0xcc, 0xd4, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0,
  0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20,
  0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20,
  0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00,
  0x06, 0x73, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x7a, 0xa0, 0x07, 0xed, 0x90,
  0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f, 0xe5, 0x80,
  0x82, 0x61, 0x26, 0x31, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07,
  0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07,
  0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78, 0x07,
  0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60, 0x03,
  0x30, 0x98, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0xc2, 0x48, 0x52, 0x39,
  0x8c, 0x20, 0x24, 0x33, 0x91, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3,
  0x3c, 0xb8, 0x81, 0x2c, 0xdc, 0x02, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43,
  0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3,
  0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43,
  0x38, 0xd0, 0x03, 0x1b, 0x80, 0x81, 0x1c, 0xf8, 0x01, 0x18, 0xf8, 0x01,
  0x0a, 0x4e, 0x42, 0x67, 0x22, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87,
  0x79, 0x70, 0x03, 0x59, 0xb8, 0x05, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87,
  0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87,
  0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87,
  0x70, 0xa0, 0x07, 0x36, 0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0, 0x03,
  0x14, 0x8c, 0xa4, 0x0e, 0x23, 0x10, 0x49, 0x12, 0xb0, 0x67, 0x09, 0x0b,
  0x20, 0x49, 0x3e, 0x03, 0x4c, 0x11, 0x72, 0xf9, 0xc5, 0xe2, 0x00, 0x93,
  0x8f, 0xfb, 0x38, 0x0a, 0xda, 0x61, 0x04, 0x61, 0xb8, 0xc7, 0x58, 0x9c,
  0x00, 0x58, 0x38, 0xa7, 0x91, 0x26, 0xa0, 0x99, 0x24, 0x74, 0xb8, 0x63,
  0xf2, 0x9e, 0xef, 0x40, 0xf0, 0x4d, 0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xb3,
  0x00, 0xf3, 0x2c, 0x44, 0xc4, 0x4e, 0xc0, 0x44, 0xa0, 0x60, 0x20, 0x79,
  0x8e, 0x00, 0x14, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xae, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xd0,
  0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x6d, 0x90,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x43,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x47, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xb3, 0x01, 0x01, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xa7, 0x03, 0x02,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x18,
  0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16,
  0x08, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x1a,
  0x4a, 0xa0, 0x0c, 0x46, 0x00, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0xb0, 0x03,
  0x0a, 0xa1, 0x1c, 0x0a, 0x30, 0xa0, 0x30, 0x03, 0x0a, 0x34, 0xa0, 0x14,
  0x0a, 0x36, 0xa0, 0x80, 0x03, 0x0a, 0x3a, 0xa0, 0x40, 0x0a, 0xa2, 0x18,
  0x0f, 0x4a, 0x5b, 0xa1, 0x28, 0x8a, 0x8a, 0xbe, 0x11, 0x80, 0x1a, 0x20,
  0xba, 0x00, 0x09, 0x01, 0x11, 0x28, 0x9d, 0x01, 0xa0, 0x75, 0x06, 0x80,
  0xe0, 0x19, 0x00, 0x8a, 0x67, 0x00, 0x68, 0x9e, 0x01, 0x20, 0x73, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b,
  0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99,
  0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62,
  0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73,
  0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x84, 0x81, 0x99, 0x20, 0x0c,
  0xcd, 0x06, 0x61, 0x20, 0x26, 0x08, 0x83, 0xb3, 0x41, 0x30, 0x0c, 0x0a,
  0x63, 0x73, 0x13, 0x84, 0xe1, 0xd9, 0x30, 0x20, 0x09, 0x31, 0x41, 0x30,
  0x03, 0x35, 0xa0, 0x71, 0x96, 0xe4, 0xf6, 0xd5, 0x64, 0x37, 0x41, 0x18,
  0xa0, 0x09, 0xc2, 0x10, 0x6d, 0x10, 0x0c, 0x67, 0x43, 0x62, 0x2c, 0x8c,
  0x61, 0x0c, 0x8d, 0xf1, 0x70, 0x3a, 0x4b, 0x72, 0xfb, 0x22, 0x2a, 0x63,
  0xa3, 0x0b, 0x83, 0x92, 0x4b, 0x6b, 0x0b, 0x93, 0xcb, 0x83, 0x7a, 0x9b,
  0xdb, 0x90, 0x0c, 0x4b, 0x64, 0x0c, 0x43, 0x63, 0x3c, 0xac, 0xce, 0x92,
  0xdc, 0xbe, 0x88, 0xca, 0xd8, 0xe8, 0xc2, 0xa6, 0xca, 0xc6, 0xde, 0xdc,
  0xc8, 0xc2, 0xe4, 0xf2, 0xa0, 0xde, 0xe6, 0x36, 0x24, 0xcd, 0x32, 0x19,
  0xcd, 0xd0, 0x18, 0x0f, 0xb3, 0xb3, 0x24, 0xb7, 0x2f, 0x28, 0xb9, 0x32,
  0x3b, 0xa2, 0x32, 0x36, 0xba, 0xb0, 0xa9, 0xb2, 0xb1, 0x37, 0x37, 0xb2,
  0x30, 0xb9, 0x3c, 0xa8, 0xb7, 0xb9, 0x0d, 0x09, 0xb1, 0x54, 0x06, 0x31,
  0x34, 0xc6, 0xb3, 0x81, 0x80, 0x24, 0xca, 0x9a, 0x20, 0xa4, 0x41, 0x19,
  0x90, 0x39, 0x7b, 0xaa, 0xa3, 0xfb, 0x22, 0x2a, 0x63, 0xa3, 0x0b, 0x6b,
  0xb2, 0x9b, 0x20, 0x7c, 0x62, 0xb0, 0x61, 0x31, 0xb0, 0xcc, 0x30, 0x86,
  0x46, 0xd3, 0xb4, 0x67, 0x82, 0xb0, 0x06, 0x66, 0x40, 0xeb, 0xec, 0xa9,
  0x8e, 0xee, 0x8b, 0xa8, 0x8c, 0x8d, 0x2e, 0x6c, 0xaa, 0x6c, 0xec, 0xcd,
  0x8d, 0x2c, 0x4c, 0x2e, 0x0f, 0xea, 0x6d, 0x6e, 0xc3, 0x32, 0x70, 0x9d,
  0x31, 0x0c, 0x8d, 0xa6, 0x69, 0xcf, 0x06, 0x61, 0xf3, 0x26, 0x08, 0x71,
  0x80, 0x06, 0x7c, 0xce, 0xd8, 0xde, 0xc4, 0xc2, 0xd8, 0x86, 0xde, 0xdc,
  0xe6, 0xe8, 0xc2, 0xdc, 0xe8, 0xe6, 0x26, 0x08, 0x83, 0xb4, 0x01, 0x31,
  0xc0, 0x20, 0x0c, 0x0c, 0x63, 0x10, 0x03, 0x60, 0x43, 0x30, 0x06, 0x13,
  0x84, 0x39, 0x48, 0x03, 0x32, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
  0x43, 0x6c, 0x61, 0x6d, 0x70, 0x1b, 0x10, 0xa3, 0x0c, 0xcc, 0xc0, 0x68,
  0x06, 0x03, 0xd8, 0x10, 0x9c, 0xc1, 0x06, 0xe2, 0xfa, 0xc8, 0x00, 0x0d,
  0x26, 0x08, 0x70, 0x70, 0x06, 0x84, 0xce, 0xae, 0xde, 0xe4, 0xd8, 0xc8,
  0xa8, 0xde, 0x86, 0xd8, 0xd2, 0xe0, 0xa0, 0xe4, 0xca, 0xec, 0x26, 0x08,
  0xc3, 0xb4, 0x61, 0x60, 0x03, 0x36, 0x68, 0x26, 0x08, 0x03, 0x35, 0x41,
  0xf8, 0xc6, 0x60, 0x83, 0x92, 0xac, 0x41, 0xd3, 0x06, 0x84, 0xe1, 0x06,
  0x8e, 0xf3, 0x06, 0x44, 0xce, 0x9a, 0xec, 0xa6, 0xc6, 0xc2, 0xd8, 0xca,
  0x26, 0x08, 0x43, 0xb5, 0x01, 0x49, 0xe2, 0x80, 0x90, 0x03, 0x37, 0x70,
  0x9c, 0x37, 0xa0, 0x71, 0x46, 0x54, 0x26, 0x56, 0x77, 0x36, 0x41, 0x18,
  0xac, 0x0d, 0x46, 0x42, 0x07, 0x44, 0x1d, 0xb8, 0x81, 0xc3, 0xe4, 0x4c,
  0xaa, 0x6c, 0x8c, 0x6e, 0x2a, 0x4d, 0xaf, 0x6c, 0x82, 0x30, 0x5c, 0x13,
  0x84, 0x01, 0xdb, 0x80, 0x24, 0x77, 0x40, 0xe0, 0x81, 0x1b, 0xe4, 0x81,
  0xf3, 0x06, 0x64, 0xce, 0x92, 0xdc, 0xec, 0xa4, 0xca, 0xc6, 0xe8, 0xa6,
  0xd2, 0xf4, 0xca, 0x26, 0x08, 0x43, 0xb6, 0x01, 0x49, 0xf6, 0x80, 0xe0,
  0x03, 0x37, 0x70, 0x9c, 0x37, 0xe0, 0x72, 0x26, 0x55, 0x36, 0x46, 0xf7,
  0x24, 0x97, 0x76, 0x96, 0xe6, 0x36, 0x41, 0x18, 0xb4, 0x0d, 0x48, 0xe2,
  0x07, 0xc4, 0x1f, 0xb8, 0x41, 0x1e, 0x38, 0x6f, 0x40, 0xed, 0x2c, 0x69,
  0xee, 0xea, 0x4d, 0x8e, 0x8d, 0x6c, 0x0a, 0x2e, 0x6c, 0xac, 0xac, 0xe9,
  0x8d, 0x2e, 0xed, 0xcd, 0xad, 0xc8, 0x2d, 0x4c, 0x8c, 0xad, 0x8c, 0x6c,
  0x82, 0x30, 0x6c, 0x1b, 0x90, 0x24, 0x14, 0x08, 0x51, 0x70, 0x83, 0x3c,
  0x70, 0xde, 0x60, 0x03, 0x22, 0x06, 0x70, 0x30, 0x07, 0x76, 0xa0, 0x07,
  0x7d, 0x00, 0x0a, 0xa3, 0xb0, 0x61, 0x30, 0xd4, 0x80, 0x14, 0x26, 0x08,
  0x02, 0xb0, 0x01, 0xd8, 0x30, 0x18, 0xa7, 0x70, 0x0a, 0x1b, 0x02, 0x54,
  0xd8, 0x30, 0x0c, 0xa6, 0x90, 0x0a, 0x24, 0xda, 0xc2, 0xd2, 0xdc, 0x26,
  0x08, 0x74, 0x40, 0x06, 0x13, 0x84, 0x81, 0xdb, 0x30, 0xb4, 0x42, 0x2b,
  0x0c, 0x1b, 0x08, 0x83, 0x15, 0xd8, 0xc0, 0x15, 0x36, 0x14, 0xa6, 0xb0,
  0x0a, 0x40, 0x1a, 0xbc, 0x02, 0x11, 0x31, 0xb9, 0x30, 0xb7, 0x31, 0xb4,
  0xb2, 0xb9, 0x09, 0xc2, 0xd0, 0xd1, 0x30, 0x63, 0x7b, 0x0b, 0xa3, 0x9b,
  0x9b, 0x20, 0x0c, 0x1e, 0x8b, 0x34, 0xb7, 0x39, 0xba, 0xb9, 0x09, 0xc2,
  0xf0, 0x91, 0x48, 0x73, 0xa3, 0x9b, 0x23, 0x42, 0x57, 0x86, 0xf7, 0xc5,
  0xf6, 0x16, 0x46, 0x46, 0x84, 0xae, 0x0c, 0xef, 0xcb, 0xed, 0x4d, 0xae,
  0x6d, 0x82, 0x30, 0x80, 0x01, 0x13, 0xba, 0x32, 0xbc, 0xaf, 0x39, 0xba,
  0x37, 0xb9, 0x32, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x73, 0x13, 0x84, 0x21,
  0x0c, 0x36, 0x40, 0xb1, 0x20, 0x0b, 0xb3, 0x40, 0x0b, 0xb5, 0x60, 0x0b,
  0xb7, 0xe0, 0xe0, 0x02, 0x91, 0x0b, 0xba, 0xb0, 0x0b, 0x79, 0xc0, 0x0b,
  0xbd, 0x50, 0x85, 0x8d, 0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac, 0xcc, 0x8d,
  0x6e, 0x4a, 0x10, 0x54, 0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b,
  0x7b, 0x73, 0x9b, 0x12, 0x10, 0x4d, 0xc8, 0xf0, 0x5c, 0xec, 0xc2, 0xd8,
  0xec, 0xca, 0xe4, 0xa6, 0x04, 0x46, 0x1d, 0x32, 0x3c, 0x97, 0x39, 0xb4,
  0x30, 0xb2, 0x32, 0xb9, 0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29, 0x41, 0x52,
  0x86, 0x0c, 0xcf, 0x45, 0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e, 0xac, 0x6c,
  0x6e, 0x4a, 0x80, 0x06, 0x95, 0xc8, 0xf0, 0x5c, 0xe8, 0xf2, 0xe0, 0xca,
  0x82, 0xdc, 0xdc, 0xde, 0xe8, 0xc2, 0xe8, 0xd2, 0xde, 0xdc, 0xe6, 0xa6,
  0x08, 0xa4, 0x90, 0x0a, 0x75, 0xc8, 0xf0, 0x5c, 0xca, 0xdc, 0xe8, 0xe4,
  0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8, 0xe6, 0xa6, 0x04, 0xaf, 0xd0, 0x85,
  0x0c, 0xcf, 0x65, 0xec, 0xad, 0xce, 0x8d, 0xae, 0x4c, 0x6e, 0x6e, 0x4a,
  0xd0, 0x0b, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x86, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x3e, 0x72, 0xdb, 0xb6, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x19, 0x38, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x93, 0xed, 0x17, 0xb7, 0x6d, 0x05, 0xce,
  0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0xdb, 0x41,
  0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x12, 0xc0, 0x3c, 0x0b, 0x51, 0x12, 0x15,
  0xb1, 0xf8, 0xc5, 0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13,
  0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x36, 0x50, 0x0d, 0x97,
  0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0x7e,
  0x71, 0xdb, 0x26, 0x60, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13,
  0x15, 0x11, 0xec, 0xe4, 0x44, 0x84, 0x5f, 0xdc, 0xb6, 0x05, 0x48, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x1d, 0x11, 0x01, 0x0c, 0xe2, 0xe0, 0x23, 0xb7,
  0x6d, 0x04, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e,
  0x71, 0xdb, 0x06, 0x40, 0x30, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc1, 0xf6, 0xb1, 0xfb, 0x72, 0xd0, 0x5c, 0xc1, 0x24, 0x9a, 0x19, 0xc8,
  0x7c, 0x38, 0x43, 0x5f, 0x44, 0x58, 0x49, 0x4c, 0xc8, 0x17, 0x00, 0x00,
  0x63, 0x00, 0x05, 0x00, 0xf2, 0x05, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xb0, 0x17, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xe9, 0x05, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff,
  0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xd8, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a,
  0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0xc3, 0x30, 0x10, 0x31, 0x47, 0x80, 0x90,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x38, 0x66, 0x00, 0xca, 0x02, 0x0c, 0xc8, 0x30, 0x0c, 0x49,
  0x92, 0x24, 0x06, 0x29, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9,
  0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x8a, 0x24, 0x49, 0x92,
  0xa1, 0x28, 0xcc, 0x80, 0x0c, 0xc3, 0x30, 0x0c, 0xc3, 0x40, 0x4d, 0x19,
  0x92, 0x21, 0xa1, 0xa7, 0x20, 0xc9, 0x90, 0x24, 0x49, 0x92, 0x24, 0x14,
  0x15, 0x23, 0x19, 0x92, 0x24, 0x49, 0x68, 0x2a, 0x0c, 0x33, 0x20, 0x48,
  0x92, 0x24, 0xc9, 0x30, 0x0c, 0x09, 0x55, 0x47, 0x0d, 0x97, 0x3f, 0x61,
  0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23,
  0x22, 0x49, 0x92, 0xa4, 0x10, 0xd7, 0x80, 0x0c, 0x84, 0x1d, 0x35, 0x5c,
  0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x23,
  0xb7, 0x8d, 0x88, 0x61, 0x18, 0x86, 0x42, 0x68, 0x03, 0x32, 0xd0, 0x56,
  0x8a, 0x64, 0x48, 0x92, 0x84, 0xba, 0x39, 0x82, 0xa0, 0x18, 0xc8, 0x60,
  0x0c, 0xc3, 0x47, 0xe0, 0x40, 0xc0, 0x30, 0xc2, 0x90, 0xcc, 0xd4, 0x06,
  0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e,
  0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07,
  0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e,
  0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x73, 0xe0, 0x07,
  0x60, 0xe0, 0x07, 0x7a, 0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f,
  0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f, 0xe5, 0x80, 0x82, 0x61, 0x26, 0x31,
  0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0, 0x85, 0x72,
  0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3e,
  0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03, 0x73,
  0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0x98, 0x03, 0x3f,
  0x00, 0x03, 0x3f, 0x40, 0xc2, 0x48, 0x52, 0x39, 0x8c, 0x20, 0x24, 0x33,
  0x91, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x81, 0x2c,
  0xdc, 0x02, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39,
  0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b,
  0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b,
  0x80, 0x81, 0x1c, 0xf8, 0x01, 0x18, 0xf8, 0x01, 0x0a, 0x4e, 0x42, 0x67,
  0x22, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x59,
  0xb8, 0x05, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72,
  0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77,
  0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36,
  0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x14, 0x8c, 0xa4, 0x0e,
  0x23, 0x10, 0x49, 0x12, 0xb0, 0x67, 0x09, 0x0b, 0x20, 0x49, 0x3e, 0x03,
  0x4c, 0x11, 0x72, 0xf9, 0xc5, 0xe2, 0x00, 0x93, 0x8f, 0xfb, 0x38, 0x0a,
  0xda, 0x61, 0x04, 0x61, 0xb8, 0xc7, 0x58, 0x9c, 0x00, 0x58, 0x38, 0xa7,
  0x91, 0x26, 0xa0, 0x99, 0x24, 0x74, 0xb8, 0x63, 0xf2, 0x9e, 0xef, 0x40,
  0xf0, 0x4d, 0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xb3, 0x00, 0xf3, 0x2c, 0x44,
  0xc4, 0x4e, 0xc0, 0x44, 0xa0, 0x60, 0x20, 0x79, 0x8e, 0x00, 0x14, 0xa6,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xae, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xd0,
  0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x6d, 0x90,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x43,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x47, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xb3, 0x01, 0x01, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xa7, 0x03, 0x02,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x18,
  0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16,
  0x08, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x1a,
  0x4a, 0xa0, 0x0c, 0x8a, 0x61, 0x04, 0xa0, 0x08, 0x4a, 0xa2, 0xb0, 0x03,
  0x0a, 0xa1, 0x40, 0xe8, 0x1b, 0x01, 0x20, 0xba, 0x00, 0x09, 0x01, 0x11,
  0x28, 0x9d, 0x01, 0xa0, 0x75, 0x06, 0x80, 0xe2, 0x19, 0x00, 0x9a, 0x67,
  0x00, 0xc8, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x57, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44,
  0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b,
  0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b,
  0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81,
  0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x84,
  0x81, 0x99, 0x20, 0x0c, 0xcd, 0x06, 0x61, 0x20, 0x26, 0x08, 0x83, 0xb3,
  0x41, 0x18, 0x0c, 0x0a, 0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08,
  0xc3, 0x33, 0x41, 0x30, 0x83, 0x8d, 0xc0, 0x04, 0x61, 0x80, 0x26, 0x08,
  0x43, 0xb4, 0x41, 0x50, 0x9c, 0x0d, 0x89, 0xb2, 0x30, 0x8a, 0x32, 0x34,
  0xca, 0xb3, 0x21, 0x19, 0x16, 0x46, 0x19, 0x86, 0x46, 0x79, 0x36, 0x24,
  0xcd, 0xc2, 0x28, 0xcd, 0xd0, 0x28, 0xcf, 0x86, 0x84, 0x58, 0x18, 0x85,
  0x18, 0x1a, 0xe5, 0xd9, 0x40, 0x40, 0x91, 0x34, 0x4d, 0x10, 0xd2, 0xe0,
  0x9a, 0x20, 0x7c, 0xd5, 0x86, 0x45, 0xa9, 0x18, 0x45, 0x19, 0x1a, 0xcb,
  0xb2, 0x9e, 0x09, 0xc2, 0x1a, 0x60, 0x1b, 0x96, 0x01, 0x63, 0x94, 0x61,
  0x68, 0x2c, 0xcb, 0x7a, 0x36, 0x08, 0x57, 0x36, 0x41, 0x88, 0x83, 0x6c,
  0x82, 0x30, 0x48, 0x1b, 0x10, 0x65, 0x63, 0x14, 0x65, 0xe0, 0x80, 0x0d,
  0x41, 0x37, 0x41, 0x98, 0x03, 0x6d, 0x03, 0xa2, 0x7c, 0x8c, 0xd2, 0x0c,
  0x0a, 0xb0, 0x21, 0x00, 0x83, 0x0d, 0x04, 0xa5, 0x79, 0x61, 0x30, 0x41,
  0x10, 0x00, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x13, 0x04, 0x3a, 0xb0, 0x26,
  0x08, 0xc3, 0x34, 0x41, 0x18, 0xa8, 0x0d, 0xc3, 0x19, 0x9c, 0xc1, 0xb0,
  0x81, 0x50, 0xca, 0xc0, 0x0c, 0xd0, 0x60, 0x43, 0x31, 0x06, 0x64, 0x00,
  0x88, 0x41, 0x1a, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49, 0x23, 0x2b,
  0x73, 0xa3, 0x9b, 0x12, 0x04, 0x55, 0xc8, 0xf0, 0x5c, 0xec, 0xca, 0xe4,
  0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x44, 0x13, 0x32, 0x3c, 0x17, 0xbb,
  0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29, 0x81, 0x51, 0x87, 0x0c, 0xcf, 0x65,
  0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c, 0x6d, 0x4a,
  0x80, 0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab, 0x93, 0x1b,
  0x2b, 0x9b, 0x9b, 0x12, 0x84, 0x41, 0x1d, 0x32, 0x3c, 0x97, 0x32, 0x37,
  0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34, 0x37, 0xba, 0xb9, 0x29, 0x41, 0x1a,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x86, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x3e, 0x72, 0xdb, 0xb6, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x19, 0x38, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x93, 0xed, 0x17, 0xb7, 0x6d, 0x05, 0xce,
  0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0xdb, 0x41,
  0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x12, 0xc0, 0x3c, 0x0b, 0x51, 0x12, 0x15,
  0xb1, 0xf8, 0xc5, 0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13,
  0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x36, 0x50, 0x0d, 0x97,
  0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0x7e,
  0x71, 0xdb, 0x26, 0x60, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13,
  0x15, 0x11, 0xec, 0xe4, 0x44, 0x84, 0x5f, 0xdc, 0xb6, 0x05, 0x48, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x1d, 0x11, 0x01, 0x0c, 0xe2, 0xe0, 0x23, 0xb7,
  0x6d, 0x04, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e,
  0x71, 0xdb, 0x06, 0x40, 0x30, 0x00, 0xd2, 0x00, 0x61, 0x20, 0x00, 0x00,
  0xfe, 0x03, 0x00, 0x00, 0x13, 0x04, 0x51, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x34, 0xcc, 0x00, 0x94, 0x5b, 0x39, 0x94, 0x5d,
  0xc1, 0x94, 0x4c, 0xf1, 0x95, 0x48, 0xc9, 0x95, 0x42, 0x71, 0x95, 0x61,
  0x40, 0x11, 0x06, 0x94, 0x6e, 0x40, 0xb1, 0x15, 0x05, 0x19, 0xe5, 0x31,
  0x02, 0x50, 0x02, 0x65, 0x50, 0x04, 0x94, 0x8c, 0x00, 0xcc, 0x00, 0x8c,
  0x11, 0xec, 0xfe, 0x28, 0x93, 0x60, 0x30, 0x46, 0xb0, 0xfb, 0xa3, 0x4c,
  0x82, 0xc3, 0x18, 0xc1, 0xee, 0x8f, 0x32, 0xff, 0x0b, 0x63, 0x04, 0xbb,
  0x3f, 0xca, 0xfc, 0x37, 0x46, 0x00, 0x82, 0x20, 0x08, 0x7f, 0x63, 0x04,
  0x20, 0x08, 0x82, 0xf8, 0x37, 0x46, 0x00, 0x82, 0x20, 0x88, 0xff, 0xc2,
  0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x0a, 0x63, 0x04, 0x2a, 0x5e, 0x9f,
  0xa2, 0x37, 0x46, 0x70, 0xe3, 0xed, 0xd8, 0x72, 0x63, 0x04, 0xf7, 0x38,
  0xdf, 0x62, 0x36, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xc1, 0x18, 0x01,
  0x08, 0x82, 0x20, 0xfa, 0x8d, 0x11, 0xf4, 0xeb, 0x09, 0xa6, 0x13, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x00, 0x06, 0x76, 0xd0, 0x4d, 0x75,
  0x50, 0x07, 0x6c, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x60, 0x70,
  0x07, 0x1e, 0x35, 0x07, 0x73, 0xd0, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x00, 0x06, 0x78, 0xf0, 0x59, 0x76, 0x60, 0x07, 0x6e, 0x30, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x60, 0x90, 0x07, 0x60, 0x70, 0xd1, 0x01,
  0x1d, 0xbc, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x80, 0x81, 0x1e,
  0x84, 0x01, 0x96, 0x07, 0x79, 0x00, 0x07, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x00, 0x06, 0x7b, 0x20, 0x06, 0xd9, 0x1d, 0xdc, 0x41, 0x1c, 0x8c,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x18, 0xf0, 0xc1, 0x18, 0x60, 0x78,
  0x70, 0x07, 0x72, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x60, 0xd0,
  0x07, 0x64, 0x80, 0xe5, 0x41, 0x1e, 0xcc, 0xc1, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x10, 0xa8, 0x00, 0x06, 0x7a, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x44, 0x2a, 0x84, 0x81, 0x1f, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0x26, 0x0a, 0x6c, 0x30, 0xf4, 0xc1, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0x41, 0x09, 0x05, 0x94, 0x50, 0xc0, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x6c, 0xa7, 0x10, 0x07, 0xc8, 0x1a, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x0c, 0x37, 0x14, 0xc2, 0x18, 0x0c, 0x37, 0x14, 0xc2,
  0x18, 0x94, 0x10, 0xec, 0x2c, 0x03, 0x14, 0x04, 0x23, 0x06, 0x0d, 0x00,
  0x82, 0x60, 0xd0, 0xcc, 0x82, 0x1b, 0x44, 0xa7, 0x80, 0x1c, 0x7a, 0xa0,
  0x07, 0x7a, 0xa0, 0x07, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x30, 0x62, 0xd0, 0x00, 0x20, 0x08, 0x06, 0xcd, 0x2d, 0xc8,
  0x81, 0xb5, 0x0a, 0xcc, 0xe2, 0x07, 0x7e, 0xe0, 0x07, 0x7e, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x0d,
  0x00, 0x82, 0x60, 0xd0, 0xec, 0x82, 0x1d, 0x60, 0xaf, 0x00, 0x3d, 0xa2,
  0x20, 0x0a, 0xa2, 0x20, 0x0a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xe5, 0x82, 0x28, 0x64, 0xae,
  0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x60, 0x42, 0x21, 0x1f, 0x13,
  0x0a, 0xf9, 0x5c, 0x97, 0xd4, 0x75, 0x49, 0x99, 0x10, 0x07, 0xf0, 0x31,
  0x41, 0x0e, 0xe0, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x98, 0x38,
  0xac, 0x82, 0x18, 0x94, 0xc2, 0x68, 0x42, 0x20, 0x8c, 0x26, 0x08, 0x83,
  0x09, 0x85, 0x7c, 0x4c, 0x28, 0xe4, 0x63, 0xc2, 0x02, 0x1f, 0x13, 0x16,
  0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x86, 0x0e, 0xb2, 0x90,
  0x06, 0xe3, 0x30, 0x9a, 0x10, 0x08, 0xc3, 0x0d, 0x01, 0x39, 0x80, 0xc1,
  0x2c, 0xc3, 0x20, 0x04, 0xa3, 0x09, 0x96, 0x30, 0x9a, 0x40, 0x09, 0x16,
  0x08, 0xf2, 0xb1, 0x09, 0x0c, 0xe0, 0x63, 0x13, 0x18, 0xc0, 0xc7, 0x06,
  0x30, 0x80, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xf2, 0xb0,
  0x0b, 0x72, 0xb0, 0x0e, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0xc3, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x98, 0x3d, 0xfc,
  0x82, 0x1d, 0xc8, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x30, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xa6, 0x0f, 0xe3,
  0xa0, 0x07, 0xf2, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xf9, 0xc3, 0x39,
  0xf8, 0x41, 0x3e, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0x83, 0x3d, 0x93, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0,
  0x0b, 0x89, 0x72, 0x60, 0xa6, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x3a, 0x91, 0x30, 0x87, 0x64, 0x0a, 0x2c, 0x30, 0xa0, 0x63, 0xd2, 0x25,
  0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xe8, 0x4a, 0x22, 0x1d, 0x9e,
  0x2b, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xce, 0x24, 0xd4, 0x81,
  0xb9, 0x02, 0x0b, 0x12, 0xe8, 0x58, 0xb5, 0xc9, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xba, 0x94, 0x68, 0x07, 0x69, 0x0b, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0xa0, 0x53, 0x09, 0x77, 0x78, 0xb6, 0xc0, 0x02, 0x06,
  0x3a, 0x96, 0x04, 0xf4, 0x31, 0x43, 0xa0, 0x8f, 0x09, 0xe1, 0x20, 0x1f,
  0x13, 0xc4, 0x41, 0x3e, 0x26, 0x8c, 0x03, 0x7c, 0x8c, 0x1c, 0x84, 0xf8,
  0xcc, 0x12, 0x0c, 0x03, 0x15, 0x09, 0x21, 0xe8, 0x42, 0x30, 0x50, 0x91,
  0x10, 0x82, 0x2e, 0x04, 0x23, 0x06, 0x0e, 0x00, 0x82, 0x60, 0xa0, 0xf0,
  0xc4, 0x3d, 0xf4, 0x02, 0x2c, 0xbc, 0x82, 0x48, 0x8c, 0x82, 0x28, 0x84,
  0xc2, 0x28, 0xc8, 0x83, 0x09, 0x71, 0x10, 0x1f, 0x13, 0xe2, 0x20, 0x3e,
  0x26, 0x08, 0xf2, 0x31, 0x41, 0x90, 0x8f, 0x05, 0x02, 0x7c, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0xe0, 0xf9, 0x89, 0x91, 0x08, 0x86, 0x23, 0x02,
  0x74, 0x60, 0xbe, 0x59, 0x86, 0x87, 0x08, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0x60, 0xe3, 0x09, 0x93, 0xe8, 0x05, 0x90, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x38, 0x21, 0xa9, 0x13, 0x92, 0x32, 0xc1, 0x91, 0x8f,
  0x09, 0x8e, 0x7c, 0x2c, 0x16, 0x6a, 0x21, 0x3e, 0x16, 0x0b, 0xb5, 0x10,
  0x1f, 0x8b, 0x85, 0x5a, 0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x44, 0x6a, 0x21, 0x13, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x0f, 0x5b, 0xbc, 0x44, 0x60, 0x41, 0x21, 0x1f, 0x13,
  0x0a, 0xf9, 0xd8, 0x50, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0x30, 0xb6, 0xa8, 0x09, 0x76, 0x78, 0x89, 0xd1, 0x84, 0x40, 0x18, 0x4d,
  0x10, 0x06, 0x13, 0x1a, 0xf9, 0x98, 0xd0, 0xc8, 0x67, 0xc4, 0xe0, 0x01,
  0x40, 0x10, 0x0c, 0x2a, 0xb9, 0xb8, 0x09, 0x7b, 0x90, 0x07, 0x21, 0x38,
  0x89, 0x93, 0x50, 0x0b, 0xb5, 0xe8, 0x09, 0x94, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0xcc, 0x21, 0x3e, 0x36,
  0x98, 0x43, 0x7c, 0x6c, 0x30, 0x87, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08,
  0x82, 0x41, 0xb4, 0x17, 0x63, 0x31, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0xf0, 0xf4, 0x05, 0x58, 0x04, 0x56, 0x04, 0xf2,
  0xb1, 0x42, 0x90, 0x8f, 0x15, 0x83, 0x7c, 0x4c, 0x90, 0xe4, 0x63, 0x02,
  0x25, 0x1f, 0x13, 0x82, 0xf8, 0x18, 0x71, 0xc9, 0xc7, 0x0e, 0x4b, 0x3e,
  0x26, 0x04, 0xf1, 0xb1, 0x24, 0x93, 0x8f, 0x25, 0x9b, 0x7c, 0x4c, 0x08,
  0xe2, 0x63, 0xc7, 0x21, 0x1f, 0x2b, 0x0a, 0xf9, 0x98, 0x10, 0xc0, 0xc7,
  0x08, 0x42, 0x3e, 0x26, 0x04, 0xf0, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x83, 0xe7, 0x35, 0xe6, 0x22, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83,
  0x07, 0x36, 0xec, 0x22, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0x08,
  0x36, 0xf0, 0x62, 0x92, 0x22, 0x32, 0x18, 0x03, 0x31, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x83, 0x47, 0x36, 0xf0, 0x22, 0xb0, 0x21, 0xa0, 0xcf,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xb4, 0x51, 0x17, 0x81, 0x05,
  0x66, 0x01, 0x1f, 0x13, 0xcc, 0x02, 0x3e, 0xc3, 0x11, 0x85, 0x5a, 0x10,
  0xdf, 0x70, 0x84, 0xb1, 0x16, 0xc1, 0x37, 0x1c, 0x91, 0xb0, 0xc5, 0xf0,
  0x0d, 0x47, 0x28, 0x6d, 0x41, 0x7c, 0x25, 0x10, 0x3a, 0xdd, 0x70, 0x20,
  0x41, 0x0d, 0x86, 0x4e, 0x37, 0x20, 0x42, 0x50, 0xc5, 0xa1, 0xd3, 0x0d,
  0x6f, 0x21, 0x04, 0x85, 0x24, 0x3a, 0xdd, 0x00, 0x17, 0x42, 0x60, 0x41,
  0x20, 0x9f, 0x59, 0x82, 0x62, 0xa0, 0x22, 0xe1, 0x07, 0xa2, 0xd7, 0x98,
  0x81, 0x8a, 0x84, 0x1f, 0x88, 0x5e, 0x63, 0x06, 0x2a, 0x06, 0xbb, 0x21,
  0x66, 0x8f, 0x19, 0x8e, 0x20, 0xdc, 0x82, 0xf8, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0x00, 0x23, 0x8f, 0xd6, 0x20, 0x8b, 0xd3, 0x18, 0x4d, 0x08,
  0x84, 0xd1, 0x04, 0x61, 0xb0, 0xc0, 0x90, 0x8f, 0x0d, 0x88, 0x7c, 0x66,
  0x19, 0x8c, 0xc3, 0xb0, 0x80, 0x24, 0xe2, 0x63, 0x03, 0x49, 0xc4, 0x67,
  0xc4, 0xc0, 0x01, 0x40, 0x10, 0x0c, 0x94, 0xf8, 0x60, 0x8d, 0xb8, 0x28,
  0x0b, 0xb2, 0xb8, 0x0d, 0x21, 0x10, 0x84, 0xd3, 0x98, 0x25, 0x80, 0x6c,
  0xd9, 0x0b, 0xf8, 0xd8, 0x11, 0xc8, 0x67, 0xc4, 0xe0, 0x01, 0x40, 0x10,
  0x0c, 0x2a, 0xf7, 0x98, 0x0d, 0xb9, 0x70, 0x8b, 0xc0, 0x18, 0x8d, 0xd1,
  0x30, 0x0f, 0xf3, 0xc8, 0x0d, 0xd2, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0xc4, 0x22, 0x3e, 0x36, 0x88, 0x45,
  0x7c, 0x6c, 0x10, 0x8b, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x41,
  0x74, 0x1f, 0xbf, 0x31, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xf0, 0xe4, 0x07, 0x6f, 0x04, 0x56, 0x04, 0xf2, 0xb1, 0x42,
  0x90, 0x8f, 0x15, 0x83, 0x7c, 0x4c, 0x70, 0x05, 0xf9, 0x98, 0x00, 0x0b,
  0xf2, 0x31, 0x21, 0x88, 0x8f, 0x11, 0xb3, 0x20, 0x1f, 0x3b, 0x64, 0x41,
  0x3e, 0x26, 0x04, 0xf1, 0xb1, 0xa4, 0x16, 0xe4, 0x63, 0xc9, 0x2d, 0xc8,
  0xc7, 0x84, 0x20, 0x3e, 0x76, 0x1c, 0xf2, 0xb1, 0xa2, 0x90, 0x8f, 0x09,
  0x01, 0x7c, 0x8c, 0x20, 0xe4, 0x63, 0x42, 0x00, 0x9f, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x78, 0x56, 0xe4, 0x3d, 0x82, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0x78, 0x58, 0x44, 0x3e, 0x82, 0x11, 0x83, 0x05, 0x00, 0x41,
  0x30, 0x88, 0x58, 0x84, 0x3e, 0x26, 0x29, 0x02, 0x87, 0x5f, 0xf0, 0x85,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0x5c, 0x84, 0x3e, 0x02, 0x1b,
  0x02, 0xfa, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x03, 0x23, 0xf1,
  0x11, 0x58, 0x20, 0x1e, 0xf0, 0x31, 0x41, 0x3c, 0xe0, 0x33, 0x1c, 0x51,
  0x98, 0x07, 0xf1, 0x0d, 0x47, 0x18, 0xe7, 0x11, 0x7c, 0xc3, 0x11, 0x09,
  0x7a, 0x0c, 0xdf, 0x70, 0x84, 0x92, 0x1e, 0xc4, 0x57, 0x02, 0xa1, 0xd3,
  0x0d, 0x07, 0x12, 0xd4, 0x60, 0xe8, 0x74, 0x03, 0x22, 0x04, 0x55, 0x1c,
  0x3a, 0xdd, 0xb0, 0x1e, 0x42, 0x50, 0x48, 0xa2, 0xd3, 0x0d, 0xec, 0x21,
  0x04, 0x16, 0x04, 0xf2, 0x31, 0x3e, 0x58, 0x0f, 0xf8, 0x18, 0x1e, 0x04,
  0xf2, 0x19, 0x31, 0x78, 0x00, 0x10, 0x04, 0x83, 0xea, 0x47, 0x48, 0x64,
  0x3c, 0x7e, 0x23, 0xb8, 0x03, 0xfa, 0xa0, 0x8f, 0x1b, 0xb9, 0x11, 0x15,
  0xa9, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0xb0, 0x61, 0x36, 0xe2, 0x63, 0xc3, 0x6c, 0xc4, 0xc7, 0x86, 0xd9, 0x88,
  0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x44, 0x68, 0x02, 0x23, 0x83,
  0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x8f, 0x9a,
  0xb4, 0x48, 0x60, 0x45, 0x20, 0x1f, 0x2b, 0x04, 0xf9, 0x58, 0x31, 0xc8,
  0xc7, 0x84, 0x7f, 0x90, 0x8f, 0x09, 0x21, 0x21, 0x1f, 0x13, 0x82, 0xf8,
  0x18, 0x41, 0x12, 0xf2, 0xb1, 0x63, 0x24, 0xe4, 0x63, 0x42, 0x10, 0x1f,
  0x4b, 0x4c, 0x42, 0x3e, 0x96, 0xa0, 0x84, 0x7c, 0x4c, 0x08, 0xe2, 0x63,
  0xc7, 0x21, 0x1f, 0x2b, 0x0a, 0xf9, 0x98, 0x10, 0xc0, 0xc7, 0x08, 0x42,
  0x3e, 0x26, 0x04, 0xf0, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x87,
  0x4f, 0xc0, 0x24, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xa7, 0x4f,
  0xc6, 0x24, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0xa8, 0x4f, 0xca,
  0x64, 0x92, 0xa2, 0x98, 0x80, 0x89, 0x97, 0x18, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x83, 0xe7, 0x4f, 0xca, 0x24, 0xb0, 0x21, 0xa0, 0xcf, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x3c, 0xa1, 0x22, 0x26, 0x81, 0x05, 0x33, 0x02,
  0x1f, 0x13, 0x66, 0x04, 0x3e, 0xc3, 0x11, 0xc5, 0x8d, 0x10, 0xdf, 0x70,
  0x84, 0x81, 0x23, 0xc1, 0x37, 0x1c, 0x91, 0xe4, 0xc8, 0xf0, 0x0d, 0x47,
  0x28, 0x3a, 0x42, 0x7c, 0x25, 0x10, 0x3a, 0xdd, 0x70, 0x20, 0x41, 0x0d,
  0x86, 0x4e, 0x37, 0x20, 0x42, 0x50, 0xc5, 0xa1, 0xd3, 0x0d, 0x3c, 0x22,
  0x04, 0x85, 0x24, 0x3a, 0xdd, 0xd0, 0x23, 0x42, 0x60, 0x41, 0x20, 0x1f,
  0x93, 0x83, 0x20, 0x3e, 0x16, 0xfc, 0x88, 0x7c, 0xcc, 0x1d, 0x7e, 0x04,
  0x3e, 0xa6, 0x0e, 0x81, 0x7c, 0x46, 0x0c, 0x1e, 0x00, 0x04, 0xc1, 0xa0,
  0x92, 0x95, 0x3b, 0xb1, 0x11, 0x19, 0x49, 0x87, 0xe0, 0x4c, 0xce, 0x44,
  0x55, 0x54, 0xa5, 0x4f, 0xd0, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x6c, 0x30, 0x91, 0xf8, 0xd8, 0x60, 0x22, 0xf1,
  0xb1, 0xc1, 0x44, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xd1,
  0xae, 0x8c, 0xca, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0xc1, 0xd3, 0x2b, 0xa0, 0x12, 0x58, 0x11, 0xc8, 0xc7, 0x0a, 0x41,
  0x3e, 0x56, 0x0c, 0xf2, 0x31, 0x41, 0x2e, 0xe4, 0x63, 0x02, 0x5d, 0xc8,
  0xc7, 0x84, 0x20, 0x3e, 0x46, 0xdc, 0x85, 0x7c, 0xec, 0xb0, 0x0b, 0xf9,
  0x98, 0x10, 0xc4, 0xc7, 0x92, 0xbc, 0x90, 0x8f, 0x25, 0x7b, 0x21, 0x1f,
  0x13, 0x82, 0xf8, 0xd8, 0x71, 0xc8, 0xc7, 0x8a, 0x42, 0x3e, 0x26, 0x04,
  0xf0, 0x31, 0x82, 0x90, 0x8f, 0x09, 0x01, 0x7c, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0xe0, 0x79, 0x97, 0x59, 0x09, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0xe0, 0x81, 0x17, 0x5b, 0x09, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1,
  0x20, 0x82, 0x17, 0x5c, 0x99, 0xa4, 0x88, 0x34, 0x46, 0x43, 0x34, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x91, 0x17, 0x5c, 0x09, 0x6c, 0x08,
  0xe8, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0f, 0xbd, 0xd4, 0x4a,
  0x60, 0x81, 0xa9, 0xc0, 0xc7, 0x04, 0x53, 0x81, 0xcf, 0x70, 0x44, 0xa1,
  0x2a, 0xc4, 0x37, 0x1c, 0x61, 0xac, 0x4a, 0xf0, 0x0d, 0x47, 0x24, 0xac,
  0x32, 0x7c, 0xc3, 0x11, 0x4a, 0xab, 0x10, 0x5f, 0x09, 0x84, 0x4e, 0x37,
  0x1c, 0x48, 0x50, 0x83, 0xa1, 0xd3, 0x0d, 0x88, 0x10, 0x54, 0x71, 0xe8,
  0x74, 0xc3, 0xab, 0x08, 0x41, 0x21, 0x89, 0x4e, 0x37, 0xc0, 0x8a, 0x10,
  0x58, 0x10, 0xc8, 0xc7, 0x7e, 0xe2, 0x55, 0xe0, 0x63, 0x3b, 0x11, 0xc8,
  0x67, 0xc4, 0xe0, 0x01, 0x40, 0x10, 0x0c, 0xaa, 0x91, 0x41, 0x97, 0x53,
  0x19, 0x15, 0x9d, 0x08, 0x70, 0x05, 0x57, 0xf6, 0x65, 0x5f, 0xdc, 0x25,
  0x57, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1,
  0x86, 0x3b, 0x89, 0x8f, 0x0d, 0x77, 0x12, 0x1f, 0x1b, 0xee, 0x24, 0x3e,
  0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10, 0xb1, 0x0c, 0xbd, 0x0c, 0x42,
  0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x2e, 0x13,
  0x2f, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5, 0x20, 0x1f,
  0x13, 0xc6, 0x43, 0x3e, 0x26, 0x94, 0x87, 0x7c, 0x4c, 0x08, 0xe2, 0x63,
  0x04, 0x7a, 0xc8, 0xc7, 0x8e, 0xf3, 0x90, 0x8f, 0x09, 0x41, 0x7c, 0x2c,
  0x51, 0x0f, 0xf9, 0x58, 0xc2, 0x1e, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x1d,
  0x87, 0x7c, 0xac, 0x28, 0xe4, 0x63, 0x42, 0x00, 0x1f, 0x23, 0x08, 0xf9,
  0x98, 0x10, 0xc0, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1e, 0xb0,
  0x21, 0x99, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9e, 0xb0, 0x39,
  0x99, 0x60, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0xa2, 0xb0, 0x49, 0x99,
  0x49, 0x8a, 0xea, 0x83, 0x3e, 0xe6, 0x63, 0xc4, 0xc0, 0x00, 0x40, 0x10,
  0x0c, 0x9e, 0xb1, 0x49, 0x99, 0xc0, 0x86, 0x80, 0x3e, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xf0, 0x94, 0x8d, 0xc9, 0x04, 0x16, 0xdc, 0x0b, 0x7c,
  0x4c, 0xb8, 0x17, 0xf8, 0x0c, 0x47, 0x14, 0xfb, 0x42, 0x7c, 0xc3, 0x11,
  0x06, 0xbf, 0x04, 0xdf, 0x70, 0x44, 0xd2, 0x2f, 0xc3, 0x37, 0x1c, 0xa1,
  0xf8, 0x0b, 0xf1, 0x95, 0x40, 0xe8, 0x74, 0xc3, 0x81, 0x04, 0x35, 0x18,
  0x3a, 0xdd, 0x80, 0x08, 0x41, 0x15, 0x87, 0x4e, 0x37, 0x80, 0x8c, 0x10,
  0x14, 0x92, 0xe8, 0x74, 0x43, 0xc8, 0x08, 0x81, 0x05, 0x81, 0x7c, 0x4c,
  0x0e, 0x82, 0xf8, 0x58, 0x30, 0x32, 0xf2, 0x31, 0xda, 0xe8, 0x17, 0xf9,
  0x58, 0x4e, 0x04, 0xf1, 0xb1, 0x74, 0x08, 0xe0, 0x63, 0x77, 0x30, 0xc4,
  0xc7, 0x8e, 0x00, 0x3e, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0x50, 0xe5,
  0x8d, 0xcf, 0xf4, 0x4b, 0xbe, 0xb0, 0x06, 0x3a, 0xb8, 0x8c, 0xcb, 0xc4,
  0x4d, 0xdc, 0x90, 0xcd, 0xcb, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0x82, 0x0d, 0xed, 0x12, 0x1f, 0x1b, 0xda, 0x25, 0x3e,
  0x36, 0xb4, 0x4b, 0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0x20, 0x12,
  0x1d, 0xb5, 0x19, 0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x78, 0x48, 0xe7, 0x6c, 0x02, 0x2b, 0x02, 0xf9, 0x58, 0x21, 0xc8,
  0xc7, 0x8a, 0x41, 0x3e, 0x26, 0xe4, 0x88, 0x7c, 0x4c, 0xd8, 0x11, 0xf9,
  0x98, 0x10, 0xc4, 0xc7, 0x08, 0x1f, 0x91, 0x8f, 0x1d, 0x3d, 0x22, 0x1f,
  0x13, 0x82, 0xf8, 0x58, 0x02, 0x26, 0xf2, 0xb1, 0x44, 0x4c, 0xe4, 0x63,
  0x42, 0x10, 0x1f, 0x3b, 0x0e, 0xf9, 0x58, 0x51, 0xc8, 0xc7, 0x84, 0x00,
  0x3e, 0x46, 0x10, 0xf2, 0x31, 0x21, 0x80, 0xcf, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x3c, 0xb6, 0xa3, 0x37, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x3c, 0xb7, 0xd3, 0x37, 0xc1, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x44, 0xb7, 0xf3, 0x37, 0x93, 0x14, 0xad, 0x89, 0x9a, 0xa4, 0xc9, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xb9, 0xf3, 0x37, 0x81, 0x0d, 0x01,
  0x7d, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0xd9, 0x1d, 0xbe, 0x09,
  0x2c, 0x68, 0x1b, 0xf8, 0x98, 0xd0, 0x36, 0xf0, 0x19, 0x8e, 0x28, 0xe2,
  0x86, 0xf8, 0x86, 0x23, 0x0c, 0xb9, 0x09, 0xbe, 0xe1, 0x88, 0x64, 0x6e,
  0x86, 0x6f, 0x38, 0x42, 0xa1, 0x1b, 0xe2, 0x2b, 0x81, 0xd0, 0xe9, 0x86,
  0x03, 0x09, 0x6a, 0x30, 0x74, 0xba, 0x01, 0x11, 0x82, 0x2a, 0x0e, 0x9d,
  0x6e, 0xb0, 0x1b, 0x21, 0x28, 0x24, 0xd1, 0xe9, 0x86, 0xbb, 0x11, 0x02,
  0x0b, 0x02, 0xf9, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0x41, 0x85, 0x3e,
  0xad, 0xc3, 0x36, 0x68, 0xb3, 0x1f, 0xe6, 0xd0, 0x37, 0x7d, 0x03, 0x3e,
  0xe0, 0x33, 0x3b, 0x7e, 0x33, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0x36, 0xf0, 0x4c, 0x7c, 0x6c, 0xe0, 0x99, 0xf8, 0xd8,
  0xc0, 0x33, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0x28, 0x7e,
  0x72, 0x67, 0x10, 0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0xe0, 0x99, 0x1f, 0xdb, 0x09, 0xac, 0x08, 0xe4, 0x63, 0x85, 0x20, 0x1f,
  0x2b, 0x06, 0xf9, 0x98, 0x80, 0x2a, 0xf2, 0x31, 0x41, 0x55, 0xe4, 0x63,
  0x42, 0x10, 0x1f, 0x23, 0x5a, 0x45, 0x3e, 0x76, 0xb0, 0x8a, 0x7c, 0x4c,
  0x08, 0xe2, 0x63, 0xc9, 0xab, 0xc8, 0xc7, 0x92, 0x58, 0x91, 0x8f, 0x09,
  0x41, 0x7c, 0xec, 0x38, 0xe4, 0x63, 0x45, 0x21, 0x1f, 0x13, 0x02, 0xf8,
  0x18, 0x41, 0xc8, 0xc7, 0x84, 0x00, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0xf0, 0x94, 0x50, 0xfa, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xf0, 0x98, 0x10, 0xfb, 0x04, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0x10,
  0x99, 0x90, 0xfb, 0x4c, 0x52, 0xa4, 0x2b, 0xb9, 0x82, 0x2b, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0xf0, 0xa0, 0x90, 0xfb, 0x04, 0x36, 0x04, 0xf4,
  0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x47, 0x85, 0xd6, 0x27, 0xb0,
  0x80, 0x77, 0xe0, 0x63, 0x02, 0xef, 0xc0, 0x67, 0x38, 0xa2, 0x00, 0x1f,
  0xe2, 0x1b, 0x8e, 0x30, 0xc2, 0x27, 0xf8, 0x86, 0x23, 0x12, 0xf1, 0x19,
  0xbe, 0xe1, 0x08, 0x65, 0x7c, 0x88, 0xaf, 0x04, 0x42, 0xa7, 0x1b, 0x0e,
  0x24, 0xa8, 0xc1, 0xd0, 0xe9, 0x06, 0x44, 0x08, 0xaa, 0x38, 0x74, 0xba,
  0xa1, 0x7c, 0x84, 0xa0, 0x90, 0x44, 0xa7, 0x1b, 0xcc, 0x47, 0x08, 0x2c,
  0x08, 0xe4, 0x63, 0x70, 0x10, 0xc4, 0x67, 0xc4, 0xe0, 0x01, 0x40, 0x10,
  0x0c, 0x2a, 0x1c, 0xea, 0x1f, 0xde, 0xc1, 0x1d, 0xfd, 0x38, 0x8d, 0xf6,
  0x69, 0x1f, 0x18, 0x82, 0xa1, 0x11, 0x72, 0x9f, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x81, 0x75, 0xe2, 0x63, 0x03,
  0xeb, 0xc4, 0xc7, 0x06, 0xd6, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20,
  0x18, 0x44, 0x61, 0x94, 0x42, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0xcf, 0x18, 0x99, 0x50, 0x60, 0x45, 0x20, 0x1f,
  0x2b, 0x04, 0xf9, 0x58, 0x31, 0xc8, 0xc7, 0x04, 0x7c, 0x91, 0x8f, 0x09,
  0xfa, 0x22, 0x1f, 0x13, 0x82, 0xf8, 0x18, 0xd1, 0x2f, 0xf2, 0xb1, 0x83,
  0x5f, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x4b, 0xfe, 0x45, 0x3e, 0x96, 0x84,
  0x8c, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xc7, 0x21, 0x1f, 0x2b, 0x0a, 0xf9,
  0x98, 0x10, 0xc0, 0xc7, 0x08, 0x42, 0x3e, 0x26, 0x04, 0xf0, 0x19, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x83, 0xa7, 0x8e, 0x72, 0x28, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x83, 0xc7, 0x8e, 0x78, 0x28, 0x18, 0x31, 0x58, 0x00,
  0x10, 0x04, 0x83, 0xc8, 0x8e, 0x7c, 0x68, 0x92, 0x22, 0x95, 0x49, 0x19,
  0x94, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x07, 0x8f, 0x7c, 0x28,
  0xb0, 0x21, 0xa0, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x7a,
  0xb4, 0x43, 0x81, 0x05, 0x2c, 0x04, 0x1f, 0x13, 0x58, 0x08, 0x3e, 0xc3,
  0x11, 0x05, 0x0c, 0x11, 0xdf, 0x70, 0x84, 0x11, 0x43, 0xc1, 0x37, 0x1c,
  0x91, 0xc8, 0xd0, 0xf0, 0x0d, 0x47, 0x28, 0x33, 0x44, 0x7c, 0x25, 0x10,
  0x3a, 0xdd, 0x70, 0x20, 0x41, 0x0d, 0x86, 0x4e, 0x37, 0x20, 0x42, 0x50,
  0xc5, 0xa1, 0xd3, 0x0d, 0x35, 0x24, 0x04, 0x85, 0x24, 0x3a, 0xdd, 0x60,
  0x43, 0x42, 0x60, 0x41, 0x20, 0x1f, 0x83, 0x83, 0x20, 0x3e, 0x23, 0x06,
  0x0f, 0x00, 0x82, 0x60, 0x50, 0xa1, 0x52, 0x1b, 0xb1, 0x10, 0x0a, 0xa9,
  0x89, 0x69, 0xf4, 0x50, 0x0f, 0x81, 0x12, 0x28, 0xcd, 0x91, 0x0f, 0x8d,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0xfc,
  0x13, 0x1f, 0x1b, 0xf8, 0x27, 0x3e, 0x36, 0xf0, 0x4f, 0x7c, 0x46, 0x0c,
  0x16, 0x00, 0x04, 0xc1, 0x20, 0x8a, 0xa5, 0x3c, 0x1a, 0x84, 0x60, 0x10,
  0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x78, 0x66, 0xc9, 0x8e, 0x02,
  0x2b, 0x02, 0xf9, 0x58, 0x21, 0xc8, 0xc7, 0x8a, 0x41, 0x3e, 0x26, 0xa0,
  0x8d, 0x7c, 0x4c, 0x50, 0x1b, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x88, 0xb6,
  0x91, 0x8f, 0x1d, 0x6c, 0x23, 0x1f, 0x13, 0x82, 0xf8, 0x58, 0xf2, 0x36,
  0xf2, 0xb1, 0x24, 0x6e, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x3b, 0x0e, 0xf9,
  0x58, 0x51, 0xc8, 0xc7, 0x84, 0x00, 0x3e, 0x46, 0x10, 0xf2, 0x31, 0x21,
  0x80, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xe5, 0x94, 0x4a,
  0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xe6, 0xc4, 0x4a, 0xc1,
  0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x44, 0xe6, 0xe4, 0x4a, 0x93, 0x14,
  0xe9, 0x4d, 0xde, 0xe0, 0xcd, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c,
  0xe8, 0xe4, 0x4a, 0x81, 0x0d, 0x01, 0x7d, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0xe0, 0x51, 0xa7, 0x55, 0x0a, 0x2c, 0xe0, 0x23, 0xf8, 0x98, 0xc0,
  0x47, 0xf0, 0x19, 0x8e, 0x28, 0x40, 0x89, 0xf8, 0x86, 0x23, 0x8c, 0x50,
  0x0a, 0xbe, 0xe1, 0x88, 0x44, 0x94, 0x86, 0x6f, 0x38, 0x42, 0x19, 0x25,
  0xe2, 0x2b, 0x81, 0xd0, 0xe9, 0x86, 0x03, 0x09, 0x6a, 0x30, 0x74, 0xba,
  0x01, 0x11, 0x82, 0x2a, 0x0e, 0x9d, 0x6e, 0x28, 0x25, 0x21, 0x28, 0x24,
  0xd1, 0xe9, 0x06, 0x53, 0x12, 0x02, 0x0b, 0x02, 0xf9, 0x18, 0x1c, 0x04,
  0xf0, 0xb1, 0x00, 0x94, 0xe4, 0x63, 0xa1, 0x31, 0x1a, 0xf2, 0x31, 0x41,
  0x90, 0x8f, 0x09, 0x41, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0,
  0xf9, 0xa7, 0x7a, 0x0a, 0x86, 0x23, 0x02, 0x52, 0x22, 0xbe, 0x59, 0x06,
  0x24, 0x09, 0x46, 0x0c, 0x1c, 0x00, 0x04, 0xc1, 0x40, 0x19, 0x29, 0x5f,
  0x1a, 0xa5, 0x3b, 0xb2, 0xa3, 0x74, 0x3a, 0x1f, 0xf3, 0x39, 0x9f, 0xf3,
  0xc9, 0xa5, 0x59, 0x02, 0xc8, 0x5a, 0x69, 0xa0, 0x8f, 0x9d, 0x06, 0x9c,
  0xc8, 0xc7, 0x90, 0xd6, 0x90, 0x8f, 0x09, 0x41, 0x7c, 0x8c, 0x08, 0xe4,
  0x63, 0x0b, 0x9d, 0xc8, 0xc7, 0x5c, 0x23, 0x36, 0xe4, 0x63, 0x81, 0x10,
  0x1f, 0x43, 0x02, 0xf9, 0x18, 0x2d, 0x15, 0xf1, 0xb1, 0x5a, 0x12, 0xe2,
  0x33, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x93, 0x4a, 0x99, 0x93, 0x9e,
  0xd8, 0x86, 0x10, 0x58, 0x60, 0x4b, 0xf2, 0x99, 0x25, 0x50, 0x06, 0x2a,
  0x12, 0xba, 0x0c, 0x92, 0x7f, 0x58, 0x06, 0x2a, 0x06, 0x14, 0x0d, 0x92,
  0x7f, 0x58, 0x4c, 0x30, 0xe4, 0x63, 0x83, 0x21, 0x1f, 0x13, 0xdc, 0x06,
  0x3e, 0x26, 0xb8, 0x0d, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00,
  0x83, 0xa9, 0x7c, 0x82, 0xa5, 0x79, 0x1a, 0x4d, 0x08, 0x84, 0xd1, 0x04,
  0x61, 0x30, 0xa1, 0x90, 0x8f, 0x09, 0x85, 0x7c, 0x46, 0x0c, 0x1e, 0x00,
  0x04, 0xc1, 0xa0, 0xb2, 0xa9, 0x7d, 0xd2, 0x25, 0x5b, 0x12, 0x82, 0x75,
  0x5a, 0x27, 0x97, 0x72, 0xa9, 0x90, 0x62, 0xa7, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x41, 0x95, 0xe2, 0x63, 0x83,
  0x2a, 0xc5, 0xc7, 0x06, 0x55, 0x8a, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20,
  0x18, 0x44, 0x3f, 0x75, 0x52, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x4f, 0x58, 0x91, 0x54, 0x60, 0x45, 0x20, 0x1f,
  0x2b, 0x04, 0xf9, 0x58, 0x31, 0xc8, 0xc7, 0x04, 0xfb, 0x91, 0x8f, 0x09,
  0xf8, 0x23, 0x1f, 0x13, 0x82, 0xf8, 0x18, 0xb1, 0x3f, 0xf2, 0xb1, 0x43,
  0x7f, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x4b, 0xfa, 0x47, 0x3e, 0x96, 0xfc,
  0x8f, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xc7, 0x21, 0x1f, 0x2b, 0x0a, 0xf9,
  0x98, 0x10, 0xc0, 0xc7, 0x08, 0x42, 0x3e, 0x26, 0x04, 0xf0, 0x19, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x83, 0x67, 0xae, 0x6e, 0x2a, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x83, 0x87, 0xae, 0x74, 0x2a, 0x18, 0x31, 0x58, 0x00,
  0x10, 0x04, 0x83, 0x88, 0xae, 0x78, 0x6a, 0x92, 0x22, 0x14, 0x3a, 0x21,
  0x13, 0x1a, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xc7, 0xae, 0x78, 0x2a,
  0xb0, 0x21, 0xa0, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x78,
  0x95, 0x53, 0x81, 0x05, 0x2a, 0x05, 0x1f, 0x13, 0x54, 0x0a, 0x3e, 0xc3,
  0x11, 0x85, 0x4b, 0x11, 0xdf, 0x70, 0x84, 0xf1, 0x52, 0xc1, 0x37, 0x1c,
  0x91, 0xc0, 0xd4, 0xf0, 0x0d, 0x47, 0x28, 0x31, 0x45, 0x7c, 0x25, 0x10,
  0x3a, 0xdd, 0x70, 0x20, 0x41, 0x0d, 0x86, 0x4e, 0x37, 0x20, 0x42, 0x50,
  0xc5, 0xa1, 0xd3, 0x0d, 0x33, 0x25, 0x04, 0x85, 0x24, 0x3a, 0xdd, 0x40,
  0x53, 0x42, 0x60, 0x41, 0x20, 0x1f, 0xdb, 0x03, 0x3d, 0x90, 0x8f, 0x05,
  0xe6, 0x03, 0x9f, 0xe1, 0x88, 0x21, 0x10, 0xbe, 0xe1, 0x06, 0x3e, 0x20,
  0x2b, 0x32, 0xa8, 0x40, 0xd0, 0x59, 0x86, 0x85, 0x09, 0xec, 0x0f, 0x74,
  0x4a, 0x3e, 0xf6, 0x07, 0xa6, 0x05, 0x83, 0x59, 0x02, 0xc5, 0xd2, 0xe7,
  0xb4, 0x60, 0x30, 0xdc, 0x10, 0xbc, 0x15, 0x19, 0xcc, 0x32, 0x14, 0x4d,
  0x30, 0x1c, 0xe1, 0x3e, 0x3a, 0x45, 0x7c, 0xb3, 0x0c, 0xce, 0x13, 0xd8,
  0x1e, 0xa4, 0x53, 0x7c, 0x6c, 0x0f, 0xd2, 0x29, 0x3e, 0x23, 0x06, 0x0e,
  0x00, 0x82, 0x60, 0xa0, 0xd8, 0x56, 0x5c, 0xd9, 0x94, 0x4a, 0xa5, 0x14,
  0x5f, 0x09, 0x81, 0x20, 0xb0, 0xd5, 0x2c, 0x01, 0x34, 0x62, 0xe0, 0x00,
  0x20, 0x08, 0x06, 0x8a, 0x6d, 0xc5, 0x95, 0x4d, 0xa9, 0x54, 0x4a, 0xf1,
  0x95, 0x1e, 0xe5, 0x91, 0x1e, 0xe9, 0x11, 0x5b, 0xcd, 0x12, 0x40, 0x08,
  0x00, 0x00, 0x00, 0x00
};
